var main;(()=>{var __webpack_modules__={466:function(module){eval('// stats.js - http://github.com/mrdoob/stats.js\n(function(f,e){ true?module.exports=e():0})(this,function(){var f=function(){function e(a){c.appendChild(a.dom);return a}function u(a){for(var d=0;d<c.children.length;d++)c.children[d].style.display=d===a?"block":"none";l=a}var l=0,c=document.createElement("div");c.style.cssText="position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000";c.addEventListener("click",function(a){a.preventDefault();\nu(++l%c.children.length)},!1);var k=(performance||Date).now(),g=k,a=0,r=e(new f.Panel("FPS","#0ff","#002")),h=e(new f.Panel("MS","#0f0","#020"));if(self.performance&&self.performance.memory)var t=e(new f.Panel("MB","#f08","#201"));u(0);return{REVISION:16,dom:c,addPanel:e,showPanel:u,begin:function(){k=(performance||Date).now()},end:function(){a++;var c=(performance||Date).now();h.update(c-k,200);if(c>g+1E3&&(r.update(1E3*a/(c-g),100),g=c,a=0,t)){var d=performance.memory;t.update(d.usedJSHeapSize/\n1048576,d.jsHeapSizeLimit/1048576)}return c},update:function(){k=this.end()},domElement:c,setMode:u}};f.Panel=function(e,f,l){var c=Infinity,k=0,g=Math.round,a=g(window.devicePixelRatio||1),r=80*a,h=48*a,t=3*a,v=2*a,d=3*a,m=15*a,n=74*a,p=30*a,q=document.createElement("canvas");q.width=r;q.height=h;q.style.cssText="width:80px;height:48px";var b=q.getContext("2d");b.font="bold "+9*a+"px Helvetica,Arial,sans-serif";b.textBaseline="top";b.fillStyle=l;b.fillRect(0,0,r,h);b.fillStyle=f;b.fillText(e,t,v);\nb.fillRect(d,m,n,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d,m,n,p);return{dom:q,update:function(h,w){c=Math.min(c,h);k=Math.max(k,h);b.fillStyle=l;b.globalAlpha=1;b.fillRect(0,0,r,m);b.fillStyle=f;b.fillText(g(h)+" "+e+" ("+g(c)+"-"+g(k)+")",t,v);b.drawImage(q,d+a,m,n-a,p,d,m,n-a,p);b.fillRect(d+n-a,m,a,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d+n-a,m,a,g((1-h/w)*p))}}};return f});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDY2LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYWluLy4vbm9kZV9tb2R1bGVzL3N0YXRzLmpzL2J1aWxkL3N0YXRzLm1pbi5qcz8zMTkxIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHN0YXRzLmpzIC0gaHR0cDovL2dpdGh1Yi5jb20vbXJkb29iL3N0YXRzLmpzXG4oZnVuY3Rpb24oZixlKXtcIm9iamVjdFwiPT09dHlwZW9mIGV4cG9ydHMmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPWUoKTpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShlKTpmLlN0YXRzPWUoKX0pKHRoaXMsZnVuY3Rpb24oKXt2YXIgZj1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoYSl7Yy5hcHBlbmRDaGlsZChhLmRvbSk7cmV0dXJuIGF9ZnVuY3Rpb24gdShhKXtmb3IodmFyIGQ9MDtkPGMuY2hpbGRyZW4ubGVuZ3RoO2QrKyljLmNoaWxkcmVuW2RdLnN0eWxlLmRpc3BsYXk9ZD09PWE/XCJibG9ja1wiOlwibm9uZVwiO2w9YX12YXIgbD0wLGM9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtjLnN0eWxlLmNzc1RleHQ9XCJwb3NpdGlvbjpmaXhlZDt0b3A6MDtsZWZ0OjA7Y3Vyc29yOnBvaW50ZXI7b3BhY2l0eTowLjk7ei1pbmRleDoxMDAwMFwiO2MuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsZnVuY3Rpb24oYSl7YS5wcmV2ZW50RGVmYXVsdCgpO1xudSgrK2wlYy5jaGlsZHJlbi5sZW5ndGgpfSwhMSk7dmFyIGs9KHBlcmZvcm1hbmNlfHxEYXRlKS5ub3coKSxnPWssYT0wLHI9ZShuZXcgZi5QYW5lbChcIkZQU1wiLFwiIzBmZlwiLFwiIzAwMlwiKSksaD1lKG5ldyBmLlBhbmVsKFwiTVNcIixcIiMwZjBcIixcIiMwMjBcIikpO2lmKHNlbGYucGVyZm9ybWFuY2UmJnNlbGYucGVyZm9ybWFuY2UubWVtb3J5KXZhciB0PWUobmV3IGYuUGFuZWwoXCJNQlwiLFwiI2YwOFwiLFwiIzIwMVwiKSk7dSgwKTtyZXR1cm57UkVWSVNJT046MTYsZG9tOmMsYWRkUGFuZWw6ZSxzaG93UGFuZWw6dSxiZWdpbjpmdW5jdGlvbigpe2s9KHBlcmZvcm1hbmNlfHxEYXRlKS5ub3coKX0sZW5kOmZ1bmN0aW9uKCl7YSsrO3ZhciBjPShwZXJmb3JtYW5jZXx8RGF0ZSkubm93KCk7aC51cGRhdGUoYy1rLDIwMCk7aWYoYz5nKzFFMyYmKHIudXBkYXRlKDFFMyphLyhjLWcpLDEwMCksZz1jLGE9MCx0KSl7dmFyIGQ9cGVyZm9ybWFuY2UubWVtb3J5O3QudXBkYXRlKGQudXNlZEpTSGVhcFNpemUvXG4xMDQ4NTc2LGQuanNIZWFwU2l6ZUxpbWl0LzEwNDg1NzYpfXJldHVybiBjfSx1cGRhdGU6ZnVuY3Rpb24oKXtrPXRoaXMuZW5kKCl9LGRvbUVsZW1lbnQ6YyxzZXRNb2RlOnV9fTtmLlBhbmVsPWZ1bmN0aW9uKGUsZixsKXt2YXIgYz1JbmZpbml0eSxrPTAsZz1NYXRoLnJvdW5kLGE9Zyh3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpb3x8MSkscj04MCphLGg9NDgqYSx0PTMqYSx2PTIqYSxkPTMqYSxtPTE1KmEsbj03NCphLHA9MzAqYSxxPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7cS53aWR0aD1yO3EuaGVpZ2h0PWg7cS5zdHlsZS5jc3NUZXh0PVwid2lkdGg6ODBweDtoZWlnaHQ6NDhweFwiO3ZhciBiPXEuZ2V0Q29udGV4dChcIjJkXCIpO2IuZm9udD1cImJvbGQgXCIrOSphK1wicHggSGVsdmV0aWNhLEFyaWFsLHNhbnMtc2VyaWZcIjtiLnRleHRCYXNlbGluZT1cInRvcFwiO2IuZmlsbFN0eWxlPWw7Yi5maWxsUmVjdCgwLDAscixoKTtiLmZpbGxTdHlsZT1mO2IuZmlsbFRleHQoZSx0LHYpO1xuYi5maWxsUmVjdChkLG0sbixwKTtiLmZpbGxTdHlsZT1sO2IuZ2xvYmFsQWxwaGE9Ljk7Yi5maWxsUmVjdChkLG0sbixwKTtyZXR1cm57ZG9tOnEsdXBkYXRlOmZ1bmN0aW9uKGgsdyl7Yz1NYXRoLm1pbihjLGgpO2s9TWF0aC5tYXgoayxoKTtiLmZpbGxTdHlsZT1sO2IuZ2xvYmFsQWxwaGE9MTtiLmZpbGxSZWN0KDAsMCxyLG0pO2IuZmlsbFN0eWxlPWY7Yi5maWxsVGV4dChnKGgpK1wiIFwiK2UrXCIgKFwiK2coYykrXCItXCIrZyhrKStcIilcIix0LHYpO2IuZHJhd0ltYWdlKHEsZCthLG0sbi1hLHAsZCxtLG4tYSxwKTtiLmZpbGxSZWN0KGQrbi1hLG0sYSxwKTtiLmZpbGxTdHlsZT1sO2IuZ2xvYmFsQWxwaGE9Ljk7Yi5maWxsUmVjdChkK24tYSxtLGEsZygoMS1oL3cpKnApKX19fTtyZXR1cm4gZn0pO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///466\n')},5:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n;// CONCATENATED MODULE: ./node_modules/ismobilejs/esm/isMobile.js\nvar appleIphone = /iPhone/i;\nvar appleIpod = /iPod/i;\nvar appleTablet = /iPad/i;\nvar appleUniversal = /\\biOS-universal(?:.+)Mac\\b/i;\nvar androidPhone = /\\bAndroid(?:.+)Mobile\\b/i;\nvar androidTablet = /Android/i;\nvar amazonPhone = /(?:SD4930UR|\\bSilk(?:.+)Mobile\\b)/i;\nvar amazonTablet = /Silk/i;\nvar windowsPhone = /Windows Phone/i;\nvar windowsTablet = /\\bWindows(?:.+)ARM\\b/i;\nvar otherBlackBerry = /BlackBerry/i;\nvar otherBlackBerry10 = /BB10/i;\nvar otherOpera = /Opera Mini/i;\nvar otherChrome = /\\b(CriOS|Chrome)(?:.+)Mobile/i;\nvar otherFirefox = /Mobile(?:.+)Firefox\\b/i;\nvar isAppleTabletOnIos13 = function (navigator) {\n    return (typeof navigator !== 'undefined' &&\n        navigator.platform === 'MacIntel' &&\n        typeof navigator.maxTouchPoints === 'number' &&\n        navigator.maxTouchPoints > 1 &&\n        typeof MSStream === 'undefined');\n};\nfunction createMatch(userAgent) {\n    return function (regex) { return regex.test(userAgent); };\n}\nfunction isMobile(param) {\n    var nav = {\n        userAgent: '',\n        platform: '',\n        maxTouchPoints: 0\n    };\n    if (!param && typeof navigator !== 'undefined') {\n        nav = {\n            userAgent: navigator.userAgent,\n            platform: navigator.platform,\n            maxTouchPoints: navigator.maxTouchPoints || 0\n        };\n    }\n    else if (typeof param === 'string') {\n        nav.userAgent = param;\n    }\n    else if (param && param.userAgent) {\n        nav = {\n            userAgent: param.userAgent,\n            platform: param.platform,\n            maxTouchPoints: param.maxTouchPoints || 0\n        };\n    }\n    var userAgent = nav.userAgent;\n    var tmp = userAgent.split('[FBAN');\n    if (typeof tmp[1] !== 'undefined') {\n        userAgent = tmp[0];\n    }\n    tmp = userAgent.split('Twitter');\n    if (typeof tmp[1] !== 'undefined') {\n        userAgent = tmp[0];\n    }\n    var match = createMatch(userAgent);\n    var result = {\n        apple: {\n            phone: match(appleIphone) && !match(windowsPhone),\n            ipod: match(appleIpod),\n            tablet: !match(appleIphone) &&\n                (match(appleTablet) || isAppleTabletOnIos13(nav)) &&\n                !match(windowsPhone),\n            universal: match(appleUniversal),\n            device: (match(appleIphone) ||\n                match(appleIpod) ||\n                match(appleTablet) ||\n                match(appleUniversal) ||\n                isAppleTabletOnIos13(nav)) &&\n                !match(windowsPhone)\n        },\n        amazon: {\n            phone: match(amazonPhone),\n            tablet: !match(amazonPhone) && match(amazonTablet),\n            device: match(amazonPhone) || match(amazonTablet)\n        },\n        android: {\n            phone: (!match(windowsPhone) && match(amazonPhone)) ||\n                (!match(windowsPhone) && match(androidPhone)),\n            tablet: !match(windowsPhone) &&\n                !match(amazonPhone) &&\n                !match(androidPhone) &&\n                (match(amazonTablet) || match(androidTablet)),\n            device: (!match(windowsPhone) &&\n                (match(amazonPhone) ||\n                    match(amazonTablet) ||\n                    match(androidPhone) ||\n                    match(androidTablet))) ||\n                match(/\\bokhttp\\b/i)\n        },\n        windows: {\n            phone: match(windowsPhone),\n            tablet: match(windowsTablet),\n            device: match(windowsPhone) || match(windowsTablet)\n        },\n        other: {\n            blackberry: match(otherBlackBerry),\n            blackberry10: match(otherBlackBerry10),\n            opera: match(otherOpera),\n            firefox: match(otherFirefox),\n            chrome: match(otherChrome),\n            device: match(otherBlackBerry) ||\n                match(otherBlackBerry10) ||\n                match(otherOpera) ||\n                match(otherFirefox) ||\n                match(otherChrome)\n        },\n        any: false,\n        phone: false,\n        tablet: false\n    };\n    result.any =\n        result.apple.device ||\n            result.android.device ||\n            result.windows.device ||\n            result.other.device;\n    result.phone =\n        result.apple.phone || result.android.phone || result.windows.phone;\n    result.tablet =\n        result.apple.tablet || result.android.tablet || result.windows.tablet;\n    return result;\n}\n//# sourceMappingURL=isMobile.js.map\n;// CONCATENATED MODULE: ./node_modules/fairygui-createjs/dist/fairygui.module.js\n\n\nclass UIContainer extends createjs.Container {\n    constructor(owner) {\n        super();\n        this.UIOwner = owner;\n        this.mouseEnabled = true;\n        this.mouseChildren = true;\n    }\n    get scrollRect() {\n        return this.$scrollRect;\n    }\n    set scrollRect(rect) {\n        this.$scrollRect = rect;\n        if (rect != null) {\n            if (!this.$rectMask) {\n                this.$rectMask = new createjs.Graphics();\n                var shape = new createjs.Shape(this.$rectMask);\n                this.mask = shape;\n            }\n            this.$rectMask.clear();\n            if (rect.width > 0 && rect.height > 0) {\n                this.$rectMask.beginFill('#000');\n                this.$rectMask.drawRect(this.$scrollRect.x, this.$scrollRect.y, this.$scrollRect.width, this.$scrollRect.height);\n                this.$rectMask.endFill();\n            }\n        }\n        else\n            this.mask = null;\n    }\n}\n\nclass InteractiveEvents {\n}\nInteractiveEvents.Down = createjs.Touch.isSupported() ? 'mousedown' : 'mousedown';\nInteractiveEvents.Cancel = createjs.Touch.isSupported() ? 'mousecancel' : 'mousecancel';\nInteractiveEvents.Up = createjs.Touch.isSupported() ? 'stagemouseup' : 'stagemouseup';\nInteractiveEvents.Click = createjs.Touch.isSupported() ? 'click' : 'click';\nInteractiveEvents.UpOutside = createjs.Touch.isSupported()\n    ? 'mouseupoutside'\n    : 'mouseupoutside';\nInteractiveEvents.Move = createjs.Touch.isSupported() ? 'stagemousemove' : 'stagemousemove';\nInteractiveEvents.Over = createjs.Touch.isSupported() ? 'mouseover' : 'mouseover';\nInteractiveEvents.Out = createjs.Touch.isSupported() ? 'mouseout' : 'mouseout';\n//mouse only\nInteractiveEvents.RightDown = 'rightdown';\nInteractiveEvents.RightUp = 'rightup';\nInteractiveEvents.RightClick = 'rightclick';\nInteractiveEvents.RightUpOutside = 'rightupoutside';\nlet GearXMLNodeNameMap = {\n    gearDisplay: 0,\n    gearXY: 1,\n    gearSize: 2,\n    gearLook: 3,\n    gearColor: 4,\n    gearAni: 5,\n    gearText: 6,\n    gearIcon: 7\n};\nlet BlendModeMap = [\n    'Normal',\n    'Add',\n    'Multiply',\n    'Screen',\n    'Overlay',\n    'Darken',\n    'Lighten',\n    'ColorDodge',\n    'ColorBurn',\n    'HardLight',\n    'SoftLight',\n    'Difference',\n    'Exclusion',\n    'Hue',\n    'Saturation',\n    'Color',\n    'Luminosity',\n    'NormalNPM',\n    'AddNPM',\n    'ScreenNPM' //  SCREEN_NPM\n];\nfunction ParseOverflowType(value) {\n    switch (value) {\n        case 'visible':\n            return 0 /* Visible */;\n        case 'hidden':\n            return 1 /* Hidden */;\n        case 'scroll':\n            return 2 /* Scroll */;\n        case 'scale':\n            return 3 /* Scale */;\n        case 'scaleFree':\n            return 4 /* ScaleFree */;\n        default:\n            return 0 /* Visible */;\n    }\n}\nfunction ParseScrollType(value) {\n    switch (value) {\n        case 'horizontal':\n            return 0 /* Horizontal */;\n        case 'vertical':\n            return 1 /* Vertical */;\n        case 'both':\n            return 2 /* Both */;\n        default:\n            return 1 /* Vertical */;\n    }\n}\nfunction ParseLoaderFillType(value) {\n    switch (value) {\n        case 'none':\n            return 0 /* None */;\n        case 'scale':\n            return 1 /* Scale */;\n        case 'scaleMatchHeight':\n            return 2 /* ScaleMatchHeight */;\n        case 'scaleMatchWidth':\n            return 3 /* ScaleMatchWidth */;\n        case 'scaleFree':\n            return 4 /* ScaleFree */;\n        case 'scaleNoBorder':\n            return 5 /* ScaleNoBorder */;\n        default:\n            return 0 /* None */;\n    }\n}\nfunction ParseListLayoutType(value) {\n    switch (value) {\n        case 'column':\n            return 0 /* SingleColumn */;\n        case 'row':\n            return 1 /* SingleRow */;\n        case 'flow_hz':\n            return 2 /* FlowHorizontal */;\n        case 'flow_vt':\n            return 3 /* FlowVertical */;\n        case 'pagination':\n            return 4 /* Pagination */;\n        default:\n            return 0 /* SingleColumn */;\n    }\n}\nfunction ParseListSelectionMode(value) {\n    switch (value) {\n        case 'single':\n            return 0 /* Single */;\n        case 'multiple':\n            return 1 /* Multiple */;\n        case 'multipleSingleClick':\n            return 2 /* Multiple_SingleClick */;\n        case 'none':\n            return 3 /* None */;\n        default:\n            return 0 /* Single */;\n    }\n}\nfunction ParsePackageItemType(value) {\n    switch (value) {\n        case 'image':\n            return 0 /* Image */;\n        case 'movieclip':\n            return 2 /* MovieClip */;\n        case 'sound':\n            return 3 /* Sound */;\n        case 'component':\n            return 4 /* Component */;\n        case 'swf':\n            return 1 /* Swf */;\n        case 'font':\n            return 6 /* Font */;\n        case 'atlas':\n            return 7 /* Atlas */;\n        default:\n            return 5 /* Misc */;\n    }\n}\nfunction ParseProgressTitleType(value) {\n    switch (value) {\n        case 'percent':\n            return 0 /* Percent */;\n        case 'valueAndmax':\n            return 1 /* ValueAndMax */;\n        case 'value':\n            return 2 /* Value */;\n        case 'max':\n            return 3 /* Max */;\n        default:\n            return 0 /* Percent */;\n    }\n}\nfunction ParseScrollBarDisplayType(value) {\n    switch (value) {\n        case 'default':\n            return 0 /* Default */;\n        case 'visible':\n            return 1 /* Visible */;\n        case 'auto':\n            return 2 /* Auto */;\n        case 'hidden':\n            return 3 /* Hidden */;\n        default:\n            return 0 /* Default */;\n    }\n}\nfunction ParseFlipType(value) {\n    switch (value) {\n        case 'hz':\n            return 1 /* Horizontal */;\n        case 'vt':\n            return 2 /* Vertical */;\n        case 'both':\n            return 3 /* Both */;\n        default:\n            return 0 /* None */;\n    }\n}\nfunction ParseButtonMode(value) {\n    switch (value) {\n        case 'Common':\n            return 0 /* Common */;\n        case 'Check':\n            return 1 /* Check */;\n        case 'Radio':\n            return 2 /* Radio */;\n        default:\n            return 0 /* Common */;\n    }\n}\nfunction ParseAutoSizeType(value) {\n    switch (value) {\n        case 'none':\n            return 0 /* None */;\n        case 'both':\n            return 1 /* Both */;\n        case 'height':\n            return 2 /* Height */;\n        case 'shrink':\n            return 3 /* Shrink */;\n        default:\n            return 0 /* None */;\n    }\n}\nfunction ParseAlignType(value) {\n    switch (value) {\n        case 'left':\n            return \"left\" /* Left */;\n        case 'center':\n            return \"center\" /* Center */;\n        case 'right':\n            return \"right\" /* Right */;\n        default:\n            return \"left\" /* Left */;\n    }\n}\nfunction ParseVertAlignType(value) {\n    switch (value) {\n        case 'top':\n            return 0 /* Top */;\n        case 'middle':\n            return 1 /* Middle */;\n        case 'bottom':\n            return 2 /* Bottom */;\n        default:\n            return 0 /* Top */;\n    }\n}\nfunction ParseListChildrenRenderOrder(value) {\n    switch (value) {\n        case 'ascent':\n            return 0 /* Ascent */;\n        case 'descent':\n            return 1 /* Descent */;\n        case 'arch':\n            return 2 /* Arch */;\n        default:\n            return 0 /* Ascent */;\n    }\n}\nlet easeMap = {\n    Linear: createjs.Ease.linear,\n    'Elastic.In': createjs.Ease.elasticIn,\n    'Elastic.Out': createjs.Ease.elasticOut,\n    'Elastic.InOut': createjs.Ease.elasticInOut,\n    'Quad.In': createjs.Ease.quadIn,\n    'Quad.Out': createjs.Ease.quadOut,\n    'Quad.InOut': createjs.Ease.quadInOut,\n    'Cube.In': createjs.Ease.cubicIn,\n    'Cube.Out': createjs.Ease.cubicOut,\n    'Cube.InOut': createjs.Ease.cubicInOut,\n    'Quart.In': createjs.Ease.quartIn,\n    'Quart.Out': createjs.Ease.quartOut,\n    'Quart.InOut': createjs.Ease.quartInOut,\n    'Quint.In': createjs.Ease.quintIn,\n    'Quint.Out': createjs.Ease.quintOut,\n    'Quint.InOut': createjs.Ease.quintInOut,\n    'Sine.In': createjs.Ease.sineIn,\n    'Sine.Out': createjs.Ease.sineOut,\n    'Sine.InOut': createjs.Ease.sineInOut,\n    'Bounce.In': createjs.Ease.bounceIn,\n    'Bounce.Out': createjs.Ease.bounceOut,\n    'Bounce.InOut': createjs.Ease.bounceInOut,\n    'Circ.In': createjs.Ease.circIn,\n    'Circ.Out': createjs.Ease.circOut,\n    'Circ.InOut': createjs.Ease.circInOut,\n    'Expo.In': createjs.Ease.quartIn,\n    'Expo.Out': createjs.Ease.quartOut,\n    'Expo.InOut': createjs.Ease.quartInOut,\n    'Back.In': createjs.Ease.backIn,\n    'Back.Out': createjs.Ease.backOut,\n    'Back.InOut': createjs.Ease.backInOut\n};\nfunction ParseEaseType(name) {\n    return easeMap[name] || easeMap['Linear'];\n}\n\n/**global ui configuration */\nclass UIConfig {\n}\n/**default font name of your project. */\nUIConfig.defaultFont = \"Arial\";\n/** modal layer background configuration. */\nUIConfig.modalLayerColor = \"#333333\";\nUIConfig.modalLayerAlpha = 0.2;\nUIConfig.buttonSoundVolumeScale = 1;\n/** scrolling distance per action in pixel*/\nUIConfig.defaultScrollSpeed = 25;\n/** default scrollbar display mode. It's recommended to set ScrollBarDisplayType.Visible for Desktop environment and ScrollBarDisplayType.Auto for mobile environment.*/\nUIConfig.defaultScrollBarDisplay = 1 /* Visible */;\n/** allow user to drag the content of a container. Set to true for mobile is recommended.*/\nUIConfig.defaultScrollTouchEffect = true;\n/** enable bounce effect when the scrolling reaches to the edge of a container. Set to true for mobile is recommended.*/\nUIConfig.defaultScrollBounceEffect = true;\n/** Deceleration ratio of scrollpane when its in touch dragging.*/\nUIConfig.defaultScrollDecelerationRate = .967;\n/** maximum count of items to be displayed in the visible viewport of the GCombobox.*/\nUIConfig.defaultComboBoxVisibleItemCount = 10;\n/** the finger moving threshold in pixel to trigger the scrolling action.*/\nUIConfig.touchScrollSensitivity = 20;\n/** the finger moving threshold in pixel to trigger the dragging event.*/\nUIConfig.touchDragSensitivity = 10;\n/** auto bring the window you clicked to the topmost level of the GRoot children list.*/\nUIConfig.bringWindowToFrontOnClick = true;\n\nclass GearBase {\n    constructor(owner) {\n        this.$lockToken = 0;\n        this.$owner = owner;\n        this.$easeType = ParseEaseType('Quad.Out');\n        this.$tweenTime = 0.3;\n        this.$tweenDelay = 0;\n    }\n    get controller() {\n        return this.$controller;\n    }\n    set controller(val) {\n        if (val != this.$controller) {\n            this.$controller = val;\n            if (this.$controller)\n                this.init();\n        }\n    }\n    get tween() {\n        return this.$tween;\n    }\n    set tween(val) {\n        this.$tween = val;\n    }\n    get tweenDelay() {\n        return this.$tweenDelay;\n    }\n    set tweenDelay(val) {\n        this.$tweenDelay = val;\n    }\n    get tweenTime() {\n        return this.$tweenTime;\n    }\n    set tweenTime(value) {\n        this.$tweenTime = value;\n    }\n    get easeType() {\n        return this.$easeType;\n    }\n    set easeType(value) {\n        this.$easeType = value;\n    }\n    setup(xml) {\n        this.$controller = this.$owner.parent.getController(xml.attributes.controller);\n        if (this.$controller == null)\n            return;\n        this.init();\n        let str;\n        str = xml.attributes.tween;\n        if (str)\n            this.$tween = true;\n        str = xml.attributes.ease;\n        if (str)\n            this.$easeType = ParseEaseType(str);\n        str = xml.attributes.duration;\n        if (str)\n            this.$tweenTime = parseFloat(str);\n        str = xml.attributes.delay;\n        if (str)\n            this.$tweenDelay = parseFloat(str);\n        if (this['$vid'] != null) {\n            str = xml.attributes.pages;\n            if (str)\n                this['pages'] = str.split(',');\n        }\n        else {\n            let pages;\n            let values;\n            str = xml.attributes.pages;\n            if (str)\n                pages = str.split(',');\n            str = xml.attributes.values;\n            if (str)\n                values = str.split('|');\n            if (pages && values) {\n                values.forEach((s, i) => {\n                    this.addStatus(pages[i], s);\n                });\n            }\n            str = xml.attributes.default;\n            if (str)\n                this.addStatus(null, str);\n        }\n    }\n    updateFromRelations(dx, dy) { }\n    addStatus(pageId, value) { }\n    init() { }\n    apply() { }\n    updateState() { }\n}\nGearBase.disableAllTweenEffect = false;\n\nclass GearDisplay extends GearBase {\n    constructor(owner) {\n        super(owner);\n        this.$vid = 0;\n        this.$lockToken = 1;\n    }\n    init() {\n        this.pages = null;\n    }\n    lock() {\n        this.$vid++;\n        return this.$lockToken;\n    }\n    release(token) {\n        if (token == this.$lockToken)\n            this.$vid--;\n    }\n    get connected() {\n        return this.controller == null || this.$vid > 0;\n    }\n    apply() {\n        this.$lockToken++;\n        if (this.$lockToken <= 0)\n            this.$lockToken = 1;\n        if (this.pages == null ||\n            this.pages.length == 0 ||\n            this.pages.indexOf(this.$controller.selectedPageId) != -1)\n            this.$vid = 1;\n        else\n            this.$vid = 0;\n    }\n}\n\nclass BMGlyph {\n    constructor() {\n        this.x = 0;\n        this.y = 0;\n        this.offsetX = 0;\n        this.offsetY = 0;\n        this.width = 0;\n        this.height = 0;\n        this.advance = 0;\n        this.lineHeight = 0;\n        this.channel = 0;\n    }\n}\nclass BitmapFont {\n    constructor() {\n        this.size = 0;\n        this.glyphs = {};\n    }\n}\n\nclass Frame {\n    constructor() {\n        this.addDelay = 0;\n    }\n}\n\nclass AssetLoader extends createjs.LoadQueue {\n    constructor(preferXHR, basePath, crossOrigin) {\n        super(preferXHR, basePath);\n        this.on('complete', this._onComplete, this);\n    }\n    _onComplete(event) {\n        var loader = event.target;\n        var result = loader[\"_loadedResults\"];\n        AssetLoader.addResources(result);\n    }\n    ;\n    static get resourcesPool() {\n        return AssetLoader.$resources;\n    }\n    static destroyResource(key) {\n        let res = AssetLoader.$resources[key];\n        if (res) {\n            delete AssetLoader.$resources[key];\n        }\n    }\n    static addResources(res) {\n        if (!res)\n            return;\n        for (let key in res) //override the item which has same key name\n            AssetLoader.$resources[key] = res[key];\n    }\n}\nAssetLoader.$resources = {};\n\nclass Endian {\n}\nEndian.LITTLE_ENDIAN = \"littleEndian\";\nEndian.BIG_ENDIAN = \"bigEndian\";\nclass ByteArray {\n    constructor(buffer, bufferExtSize = 0) {\n        this.bufferExtSize = 0; //Buffer expansion size\n        this.EOF_byte = -1;\n        this.EOF_code_point = -1;\n        if (bufferExtSize < 0) {\n            bufferExtSize = 0;\n        }\n        this.bufferExtSize = bufferExtSize;\n        let bytes, wpos = 0;\n        if (buffer) { //有数据，则可写字节数从字节尾开始\n            let uint8;\n            if (buffer instanceof Uint8Array) {\n                uint8 = buffer;\n                wpos = buffer.length;\n            }\n            else {\n                wpos = buffer.byteLength;\n                uint8 = new Uint8Array(buffer);\n            }\n            if (bufferExtSize == 0) {\n                bytes = new Uint8Array(wpos);\n            }\n            else {\n                let multi = (wpos / bufferExtSize | 0) + 1;\n                bytes = new Uint8Array(multi * bufferExtSize);\n            }\n            bytes.set(uint8);\n        }\n        else {\n            bytes = new Uint8Array(bufferExtSize);\n        }\n        this.write_position = wpos;\n        this._position = 0;\n        this._bytes = bytes;\n        this.data = new DataView(bytes.buffer);\n        this.endian = Endian.BIG_ENDIAN;\n    }\n    get endian() {\n        return this.$endian == 0 /* LITTLE_ENDIAN */ ? Endian.LITTLE_ENDIAN : Endian.BIG_ENDIAN;\n    }\n    set endian(value) {\n        this.$endian = value == Endian.LITTLE_ENDIAN ? 0 /* LITTLE_ENDIAN */ : 1 /* BIG_ENDIAN */;\n    }\n    get readAvailable() {\n        return this.write_position - this._position;\n    }\n    get buffer() {\n        return this.data.buffer.slice(0, this.write_position);\n    }\n    get rawBuffer() {\n        return this.data.buffer;\n    }\n    set buffer(value) {\n        let wpos = value.byteLength;\n        let uint8 = new Uint8Array(value);\n        let bufferExtSize = this.bufferExtSize;\n        let bytes;\n        if (bufferExtSize == 0) {\n            bytes = new Uint8Array(wpos);\n        }\n        else {\n            let multi = (wpos / bufferExtSize | 0) + 1;\n            bytes = new Uint8Array(multi * bufferExtSize);\n        }\n        bytes.set(uint8);\n        this.write_position = wpos;\n        this._bytes = bytes;\n        this.data = new DataView(bytes.buffer);\n    }\n    get bytes() {\n        return this._bytes;\n    }\n    get dataView() {\n        return this.data;\n    }\n    set dataView(value) {\n        this.buffer = value.buffer;\n    }\n    get bufferOffset() {\n        return this.data.byteOffset;\n    }\n    get position() {\n        return this._position;\n    }\n    set position(value) {\n        this._position = value;\n        if (value > this.write_position) {\n            this.write_position = value;\n        }\n    }\n    get length() {\n        return this.write_position;\n    }\n    set length(value) {\n        this.write_position = value;\n        if (this.data.byteLength > value) {\n            this._position = value;\n        }\n        this._validateBuffer(value);\n    }\n    _validateBuffer(value) {\n        if (this.data.byteLength < value) {\n            let be = this.bufferExtSize;\n            let tmp;\n            if (be == 0) {\n                tmp = new Uint8Array(value);\n            }\n            else {\n                let nLen = ((value / be >> 0) + 1) * be;\n                tmp = new Uint8Array(nLen);\n            }\n            tmp.set(this._bytes);\n            this._bytes = tmp;\n            this.data = new DataView(tmp.buffer);\n        }\n    }\n    get bytesAvailable() {\n        return this.data.byteLength - this._position;\n    }\n    clear() {\n        let buffer = new ArrayBuffer(this.bufferExtSize);\n        this.data = new DataView(buffer);\n        this._bytes = new Uint8Array(buffer);\n        this._position = 0;\n        this.write_position = 0;\n    }\n    readBoolean() {\n        if (this.validate(1 /* SIZE_OF_BOOLEAN */))\n            return !!this._bytes[this.position++];\n    }\n    readByte() {\n        if (this.validate(1 /* SIZE_OF_INT8 */))\n            return this.data.getInt8(this.position++);\n    }\n    readBytes(bytes, offset = 0, length = 0) {\n        if (!bytes) { //由于bytes不返回，所以new新的无意义\n            return;\n        }\n        let pos = this._position;\n        let available = this.write_position - pos;\n        if (available < 0) {\n            // egret.$error(1025);\n            return;\n        }\n        if (length == 0) {\n            length = available;\n        }\n        else if (length > available) {\n            // egret.$error(1025);\n            return;\n        }\n        const position = bytes._position;\n        bytes._position = 0;\n        bytes.validateBuffer(offset + length);\n        bytes._position = position;\n        bytes._bytes.set(this._bytes.subarray(pos, pos + length), offset);\n        this.position += length;\n    }\n    readDouble() {\n        if (this.validate(8 /* SIZE_OF_FLOAT64 */)) {\n            let value = this.data.getFloat64(this._position, this.$endian == 0 /* LITTLE_ENDIAN */);\n            this.position += 8 /* SIZE_OF_FLOAT64 */;\n            return value;\n        }\n    }\n    readFloat() {\n        if (this.validate(4 /* SIZE_OF_FLOAT32 */)) {\n            let value = this.data.getFloat32(this._position, this.$endian == 0 /* LITTLE_ENDIAN */);\n            this.position += 4 /* SIZE_OF_FLOAT32 */;\n            return value;\n        }\n    }\n    readInt() {\n        if (this.validate(4 /* SIZE_OF_INT32 */)) {\n            let value = this.data.getInt32(this._position, this.$endian == 0 /* LITTLE_ENDIAN */);\n            this.position += 4 /* SIZE_OF_INT32 */;\n            return value;\n        }\n    }\n    readShort() {\n        if (this.validate(2 /* SIZE_OF_INT16 */)) {\n            let value = this.data.getInt16(this._position, this.$endian == 0 /* LITTLE_ENDIAN */);\n            this.position += 2 /* SIZE_OF_INT16 */;\n            return value;\n        }\n    }\n    readUnsignedByte() {\n        if (this.validate(1 /* SIZE_OF_UINT8 */))\n            return this._bytes[this.position++];\n    }\n    readUnsignedInt() {\n        if (this.validate(4 /* SIZE_OF_UINT32 */)) {\n            let value = this.data.getUint32(this._position, this.$endian == 0 /* LITTLE_ENDIAN */);\n            this.position += 4 /* SIZE_OF_UINT32 */;\n            return value;\n        }\n    }\n    readUnsignedShort() {\n        if (this.validate(2 /* SIZE_OF_UINT16 */)) {\n            let value = this.data.getUint16(this._position, this.$endian == 0 /* LITTLE_ENDIAN */);\n            this.position += 2 /* SIZE_OF_UINT16 */;\n            return value;\n        }\n    }\n    readUTF() {\n        let length = this.readUnsignedShort();\n        if (length > 0) {\n            return this.readUTFBytes(length);\n        }\n        else {\n            return \"\";\n        }\n    }\n    readUTFBytes(length) {\n        if (!this.validate(length)) {\n            return;\n        }\n        let data = this.data;\n        let bytes = new Uint8Array(data.buffer, data.byteOffset + this._position, length);\n        this.position += length;\n        return this.decodeUTF8(bytes);\n    }\n    writeBoolean(value) {\n        this.validateBuffer(1 /* SIZE_OF_BOOLEAN */);\n        this._bytes[this.position++] = +value;\n    }\n    writeByte(value) {\n        this.validateBuffer(1 /* SIZE_OF_INT8 */);\n        this._bytes[this.position++] = value & 0xff;\n    }\n    writeBytes(bytes, offset = 0, length = 0) {\n        let writeLength;\n        if (offset < 0) {\n            return;\n        }\n        if (length < 0) {\n            return;\n        }\n        else if (length == 0) {\n            writeLength = bytes.length - offset;\n        }\n        else {\n            writeLength = Math.min(bytes.length - offset, length);\n        }\n        if (writeLength > 0) {\n            this.validateBuffer(writeLength);\n            this._bytes.set(bytes._bytes.subarray(offset, offset + writeLength), this._position);\n            this.position = this._position + writeLength;\n        }\n    }\n    writeDouble(value) {\n        this.validateBuffer(8 /* SIZE_OF_FLOAT64 */);\n        this.data.setFloat64(this._position, value, this.$endian == 0 /* LITTLE_ENDIAN */);\n        this.position += 8 /* SIZE_OF_FLOAT64 */;\n    }\n    writeFloat(value) {\n        this.validateBuffer(4 /* SIZE_OF_FLOAT32 */);\n        this.data.setFloat32(this._position, value, this.$endian == 0 /* LITTLE_ENDIAN */);\n        this.position += 4 /* SIZE_OF_FLOAT32 */;\n    }\n    writeInt(value) {\n        this.validateBuffer(4 /* SIZE_OF_INT32 */);\n        this.data.setInt32(this._position, value, this.$endian == 0 /* LITTLE_ENDIAN */);\n        this.position += 4 /* SIZE_OF_INT32 */;\n    }\n    writeShort(value) {\n        this.validateBuffer(2 /* SIZE_OF_INT16 */);\n        this.data.setInt16(this._position, value, this.$endian == 0 /* LITTLE_ENDIAN */);\n        this.position += 2 /* SIZE_OF_INT16 */;\n    }\n    writeUnsignedInt(value) {\n        this.validateBuffer(4 /* SIZE_OF_UINT32 */);\n        this.data.setUint32(this._position, value, this.$endian == 0 /* LITTLE_ENDIAN */);\n        this.position += 4 /* SIZE_OF_UINT32 */;\n    }\n    writeUnsignedShort(value) {\n        this.validateBuffer(2 /* SIZE_OF_UINT16 */);\n        this.data.setUint16(this._position, value, this.$endian == 0 /* LITTLE_ENDIAN */);\n        this.position += 2 /* SIZE_OF_UINT16 */;\n    }\n    writeUTF(value) {\n        let utf8bytes = this.encodeUTF8(value);\n        let length = utf8bytes.length;\n        this.validateBuffer(2 /* SIZE_OF_UINT16 */ + length);\n        this.data.setUint16(this._position, length, this.$endian == 0 /* LITTLE_ENDIAN */);\n        this.position += 2 /* SIZE_OF_UINT16 */;\n        this._writeUint8Array(utf8bytes, false);\n    }\n    writeUTFBytes(value) {\n        this._writeUint8Array(this.encodeUTF8(value));\n    }\n    toString() {\n        return \"[ByteArray] length:\" + this.length + \", bytesAvailable:\" + this.bytesAvailable;\n    }\n    _writeUint8Array(bytes, validateBuffer = true) {\n        let pos = this._position;\n        let npos = pos + bytes.length;\n        if (validateBuffer) {\n            this.validateBuffer(npos);\n        }\n        this.bytes.set(bytes, pos);\n        this.position = npos;\n    }\n    validate(len) {\n        let bl = this._bytes.length;\n        if (bl > 0 && this._position + len <= bl) {\n            return true;\n        }\n    }\n    /*  PRIVATE METHODS   */\n    validateBuffer(len) {\n        this.write_position = len > this.write_position ? len : this.write_position;\n        len += this._position;\n        this._validateBuffer(len);\n    }\n    encodeUTF8(str) {\n        let pos = 0;\n        let codePoints = this.stringToCodePoints(str);\n        let outputBytes = [];\n        while (codePoints.length > pos) {\n            let code_point = codePoints[pos++];\n            if (this.inRange(code_point, 0xD800, 0xDFFF)) {\n                this.encoderError(code_point);\n            }\n            else if (this.inRange(code_point, 0x0000, 0x007f)) {\n                outputBytes.push(code_point);\n            }\n            else {\n                let count, offset;\n                if (this.inRange(code_point, 0x0080, 0x07FF)) {\n                    count = 1;\n                    offset = 0xC0;\n                }\n                else if (this.inRange(code_point, 0x0800, 0xFFFF)) {\n                    count = 2;\n                    offset = 0xE0;\n                }\n                else if (this.inRange(code_point, 0x10000, 0x10FFFF)) {\n                    count = 3;\n                    offset = 0xF0;\n                }\n                outputBytes.push(this.div(code_point, Math.pow(64, count)) + offset);\n                while (count > 0) {\n                    let temp = this.div(code_point, Math.pow(64, count - 1));\n                    outputBytes.push(0x80 + (temp % 64));\n                    count -= 1;\n                }\n            }\n        }\n        return new Uint8Array(outputBytes);\n    }\n    decodeUTF8(data) {\n        let fatal = false;\n        let pos = 0;\n        let result = \"\";\n        let code_point;\n        let utf8_code_point = 0;\n        let utf8_bytes_needed = 0;\n        let utf8_bytes_seen = 0;\n        let utf8_lower_boundary = 0;\n        while (data.length > pos) {\n            let _byte = data[pos++];\n            if (_byte == this.EOF_byte) {\n                if (utf8_bytes_needed != 0) {\n                    code_point = this.decoderError(fatal);\n                }\n                else {\n                    code_point = this.EOF_code_point;\n                }\n            }\n            else {\n                if (utf8_bytes_needed == 0) {\n                    if (this.inRange(_byte, 0x00, 0x7F)) {\n                        code_point = _byte;\n                    }\n                    else {\n                        if (this.inRange(_byte, 0xC2, 0xDF)) {\n                            utf8_bytes_needed = 1;\n                            utf8_lower_boundary = 0x80;\n                            utf8_code_point = _byte - 0xC0;\n                        }\n                        else if (this.inRange(_byte, 0xE0, 0xEF)) {\n                            utf8_bytes_needed = 2;\n                            utf8_lower_boundary = 0x800;\n                            utf8_code_point = _byte - 0xE0;\n                        }\n                        else if (this.inRange(_byte, 0xF0, 0xF4)) {\n                            utf8_bytes_needed = 3;\n                            utf8_lower_boundary = 0x10000;\n                            utf8_code_point = _byte - 0xF0;\n                        }\n                        else {\n                            this.decoderError(fatal);\n                        }\n                        utf8_code_point = utf8_code_point * Math.pow(64, utf8_bytes_needed);\n                        code_point = null;\n                    }\n                }\n                else if (!this.inRange(_byte, 0x80, 0xBF)) {\n                    utf8_code_point = 0;\n                    utf8_bytes_needed = 0;\n                    utf8_bytes_seen = 0;\n                    utf8_lower_boundary = 0;\n                    pos--;\n                    code_point = this.decoderError(fatal, _byte);\n                }\n                else {\n                    utf8_bytes_seen += 1;\n                    utf8_code_point = utf8_code_point + (_byte - 0x80) * Math.pow(64, utf8_bytes_needed - utf8_bytes_seen);\n                    if (utf8_bytes_seen !== utf8_bytes_needed) {\n                        code_point = null;\n                    }\n                    else {\n                        let cp = utf8_code_point;\n                        let lower_boundary = utf8_lower_boundary;\n                        utf8_code_point = 0;\n                        utf8_bytes_needed = 0;\n                        utf8_bytes_seen = 0;\n                        utf8_lower_boundary = 0;\n                        if (this.inRange(cp, lower_boundary, 0x10FFFF) && !this.inRange(cp, 0xD800, 0xDFFF)) {\n                            code_point = cp;\n                        }\n                        else {\n                            code_point = this.decoderError(fatal, _byte);\n                        }\n                    }\n                }\n            }\n            //Decode string\n            if (code_point !== null && code_point !== this.EOF_code_point) {\n                if (code_point <= 0xFFFF) {\n                    if (code_point > 0)\n                        result += String.fromCharCode(code_point);\n                }\n                else {\n                    code_point -= 0x10000;\n                    result += String.fromCharCode(0xD800 + ((code_point >> 10) & 0x3ff));\n                    result += String.fromCharCode(0xDC00 + (code_point & 0x3ff));\n                }\n            }\n        }\n        return result;\n    }\n    encoderError(code_point) {\n        // egret.$error(1026, code_point);\n    }\n    decoderError(fatal, opt_code_point) {\n        return opt_code_point || 0xFFFD;\n    }\n    inRange(a, min, max) {\n        return min <= a && a <= max;\n    }\n    div(n, d) {\n        return Math.floor(n / d);\n    }\n    stringToCodePoints(string) {\n        let cps = [];\n        // Based on http://www.w3.org/TR/WebIDL/#idl-DOMString\n        let i = 0, n = string.length;\n        while (i < string.length) {\n            let c = string.charCodeAt(i);\n            if (!this.inRange(c, 0xD800, 0xDFFF)) {\n                cps.push(c);\n            }\n            else if (this.inRange(c, 0xDC00, 0xDFFF)) {\n                cps.push(0xFFFD);\n            }\n            else { // (inRange(c, 0xD800, 0xDBFF))\n                if (i == n - 1) {\n                    cps.push(0xFFFD);\n                }\n                else {\n                    let d = string.charCodeAt(i + 1);\n                    if (this.inRange(d, 0xDC00, 0xDFFF)) {\n                        let a = c & 0x3FF;\n                        let b = d & 0x3FF;\n                        i += 1;\n                        cps.push(0x10000 + (a << 10) + b);\n                    }\n                    else {\n                        cps.push(0xFFFD);\n                    }\n                }\n            }\n            i += 1;\n        }\n        return cps;\n    }\n}\n\nclass RawByte {\n    static inRange(a, min, max) {\n        return min <= a && a <= max;\n    }\n    static decodeUTF8(data) {\n        let pos = 0;\n        let result = \"\";\n        let code_point;\n        let utf8_code_point = 0;\n        let utf8_bytes_needed = 0;\n        let utf8_bytes_seen = 0;\n        let utf8_lower_boundary = 0;\n        while (data.length > pos) {\n            let _byte = data[pos++];\n            if (_byte == -1 /* EOF_byte */) {\n                if (utf8_bytes_needed != 0) {\n                    code_point = 65533 /* Fatal_code_point */;\n                }\n                else {\n                    code_point = -1 /* EOF_code_point */;\n                }\n            }\n            else {\n                if (utf8_bytes_needed == 0) {\n                    if (RawByte.inRange(_byte, 0x00, 0x7F)) {\n                        code_point = _byte;\n                    }\n                    else {\n                        if (RawByte.inRange(_byte, 0xC2, 0xDF)) {\n                            utf8_bytes_needed = 1;\n                            utf8_lower_boundary = 0x80;\n                            utf8_code_point = _byte - 0xC0;\n                        }\n                        else if (RawByte.inRange(_byte, 0xE0, 0xEF)) {\n                            utf8_bytes_needed = 2;\n                            utf8_lower_boundary = 0x800;\n                            utf8_code_point = _byte - 0xE0;\n                        }\n                        else if (RawByte.inRange(_byte, 0xF0, 0xF4)) {\n                            utf8_bytes_needed = 3;\n                            utf8_lower_boundary = 0x10000;\n                            utf8_code_point = _byte - 0xF0;\n                        }\n                        else {\n                            throw new Error(\"failed to decode the raw binary data\");\n                        }\n                        utf8_code_point = utf8_code_point * Math.pow(64, utf8_bytes_needed);\n                        code_point = null;\n                    }\n                }\n                else if (!RawByte.inRange(_byte, 0x80, 0xBF)) {\n                    utf8_code_point = 0;\n                    utf8_bytes_needed = 0;\n                    utf8_bytes_seen = 0;\n                    utf8_lower_boundary = 0;\n                    pos--;\n                    code_point = 65533 /* Fatal_code_point */;\n                }\n                else {\n                    utf8_bytes_seen += 1;\n                    utf8_code_point = utf8_code_point + (_byte - 0x80) * Math.pow(64, utf8_bytes_needed - utf8_bytes_seen);\n                    if (utf8_bytes_seen !== utf8_bytes_needed) {\n                        code_point = null;\n                    }\n                    else {\n                        let cp = utf8_code_point;\n                        let lower_boundary = utf8_lower_boundary;\n                        utf8_code_point = 0;\n                        utf8_bytes_needed = 0;\n                        utf8_bytes_seen = 0;\n                        utf8_lower_boundary = 0;\n                        if (RawByte.inRange(cp, lower_boundary, 0x10FFFF) && !this.inRange(cp, 0xD800, 0xDFFF)) {\n                            code_point = cp;\n                        }\n                        else {\n                            code_point = _byte;\n                        }\n                    }\n                }\n            }\n            //Decode string\n            if (code_point !== null && code_point !== -1 /* EOF_code_point */) {\n                if (code_point <= 0xFFFF) {\n                    if (code_point > 0)\n                        result += String.fromCharCode(code_point);\n                }\n                else {\n                    code_point -= 0x10000;\n                    result += String.fromCharCode(0xD800 + ((code_point >> 10) & 0x3ff));\n                    result += String.fromCharCode(0xDC00 + (code_point & 0x3ff));\n                }\n            }\n        }\n        return result;\n    }\n}\n\nvar BufferType;\n(function (BufferType) {\n    BufferType[BufferType[\"BLOCK\"] = 0] = \"BLOCK\";\n    BufferType[BufferType[\"ADAPTIVE\"] = 1] = \"ADAPTIVE\";\n})(BufferType || (BufferType = {}));\n/** @define {number} buffer block size. */\nconst ZLIB_RAW_INFLATE_BUFFER_SIZE = 0x8000; // [ 0x8000 >= ZLIB_BUFFER_BLOCK_SIZE ]\nconst MaxBackwardLength = 32768;\nconst MaxCopyLength = 258;\nconst Order = new Uint16Array([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);\nconst LengthCodeTable = new Uint16Array([\n    0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008, 0x0009, 0x000a, 0x000b,\n    0x000d, 0x000f, 0x0011, 0x0013, 0x0017, 0x001b, 0x001f, 0x0023, 0x002b,\n    0x0033, 0x003b, 0x0043, 0x0053, 0x0063, 0x0073, 0x0083, 0x00a3, 0x00c3,\n    0x00e3, 0x0102, 0x0102, 0x0102\n]);\nconst LengthExtraTable = new Uint8Array([\n    0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5,\n    5, 5, 0, 0, 0\n]);\nconst DistCodeTable = new Uint16Array([\n    0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0007, 0x0009, 0x000d, 0x0011,\n    0x0019, 0x0021, 0x0031, 0x0041, 0x0061, 0x0081, 0x00c1, 0x0101, 0x0181,\n    0x0201, 0x0301, 0x0401, 0x0601, 0x0801, 0x0c01, 0x1001, 0x1801, 0x2001,\n    0x3001, 0x4001, 0x6001\n]);\nconst DistExtraTable = new Uint8Array([\n    0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11,\n    11, 12, 12, 13, 13\n]);\nconst buildHuffmanTable = (lengths) => {\n    /** @type {number} length list size. */\n    var listSize = lengths.length;\n    /** @type {number} max code length for table size. */\n    var maxCodeLength = 0;\n    /** @type {number} min code length for table size. */\n    var minCodeLength = Number.POSITIVE_INFINITY;\n    /** @type {number} table size. */\n    var size;\n    /** @type {!(Array|Uint8Array)} huffman code table. */\n    var table;\n    /** @type {number} bit length. */\n    var bitLength;\n    /** @type {number} huffman code. */\n    var code;\n    /**\n     * サイズが 2^maxlength 個のテーブルを埋めるためのスキップ長.\n     * @type {number} skip length for table filling.\n     */\n    var skip;\n    /** @type {number} reversed code. */\n    var reversed;\n    /** @type {number} reverse temp. */\n    var rtemp;\n    /** @type {number} loop counter. */\n    var i;\n    /** @type {number} loop limit. */\n    var il;\n    /** @type {number} loop counter. */\n    var j;\n    /** @type {number} table value. */\n    var value;\n    // Math.max は遅いので最長の値は for-loop で取得する\n    for (i = 0, il = listSize; i < il; ++i) {\n        if (lengths[i] > maxCodeLength) {\n            maxCodeLength = lengths[i];\n        }\n        if (lengths[i] < minCodeLength) {\n            minCodeLength = lengths[i];\n        }\n    }\n    size = 1 << maxCodeLength;\n    table = new Uint32Array(size);\n    // ビット長の短い順からハフマン符号を割り当てる\n    for (bitLength = 1, code = 0, skip = 2; bitLength <= maxCodeLength;) {\n        for (i = 0; i < listSize; ++i) {\n            if (lengths[i] === bitLength) {\n                // ビットオーダーが逆になるためビット長分並びを反転する\n                for (reversed = 0, rtemp = code, j = 0; j < bitLength; ++j) {\n                    reversed = (reversed << 1) | (rtemp & 1);\n                    rtemp >>= 1;\n                }\n                // 最大ビット長をもとにテーブルを作るため、\n                // 最大ビット長以外では 0 / 1 どちらでも良い箇所ができる\n                // そのどちらでも良い場所は同じ値で埋めることで\n                // 本来のビット長以上のビット数取得しても問題が起こらないようにする\n                value = (bitLength << 16) | i;\n                for (j = reversed; j < size; j += skip) {\n                    table[j] = value;\n                }\n                ++code;\n            }\n        }\n        // 次のビット長へ\n        ++bitLength;\n        code <<= 1;\n        skip <<= 1;\n    }\n    return [table, maxCodeLength, minCodeLength];\n};\nconst FixedLiteralLengthTable = (() => {\n    let lengths = new Uint8Array(288);\n    for (let i = 0, il = lengths.length; i < il; ++i) {\n        lengths[i] =\n            (i <= 143) ? 8 :\n                (i <= 255) ? 9 :\n                    (i <= 279) ? 7 :\n                        8;\n    }\n    return buildHuffmanTable(lengths)[0];\n})();\nconst FixedDistanceTable = (() => {\n    let lengths = new Uint8Array(30);\n    for (let i = 0, il = lengths.length; i < il; ++i) {\n        lengths[i] = 5;\n    }\n    return buildHuffmanTable(lengths);\n})();\nclass RawInflate {\n    constructor(input, opt_params) {\n        this.blocks = [];\n        this.bufferSize = ZLIB_RAW_INFLATE_BUFFER_SIZE;\n        this.totalpos = 0;\n        this.ip = 0;\n        this.bitsbuf = 0;\n        this.bitsbuflen = 0;\n        this.input = new Uint8Array(input);\n        this.bfinal = false;\n        this.bufferType = BufferType.ADAPTIVE;\n        this.resize = false;\n        // option parameters\n        if (opt_params) {\n            if (opt_params['index']) {\n                this.ip = opt_params['index'];\n            }\n            if (opt_params['bufferSize']) {\n                this.bufferSize = opt_params['bufferSize'];\n            }\n            if (opt_params['bufferType']) {\n                this.bufferType = opt_params['bufferType'];\n            }\n            if (opt_params['resize']) {\n                this.resize = opt_params['resize'];\n            }\n        }\n        // initialize\n        switch (this.bufferType) {\n            case BufferType.BLOCK:\n                this.op = MaxBackwardLength;\n                this.output = new Uint8Array(MaxBackwardLength + this.bufferSize + MaxCopyLength);\n                break;\n            case BufferType.ADAPTIVE:\n                this.op = 0;\n                this.output = new Uint8Array(this.bufferSize);\n                break;\n            default:\n                throw new Error('invalid inflate mode');\n        }\n    }\n    decompress() {\n        while (!this.bfinal) {\n            this.parseBlock();\n        }\n        switch (this.bufferType) {\n            case BufferType.BLOCK:\n                return this.concatBufferBlock();\n            case BufferType.ADAPTIVE:\n                return this.concatBufferDynamic();\n            default:\n                throw new Error('invalid inflate mode');\n        }\n    }\n    parseBlock() {\n        let hdr = this.readBits(3);\n        if (hdr & 0x1) {\n            this.bfinal = true;\n        }\n        hdr >>>= 1;\n        switch (hdr) {\n            // uncompressed\n            case 0:\n                this.parseUncompressedBlock();\n                break;\n            // fixed huffman\n            case 1:\n                this.parseFixedHuffmanBlock();\n                break;\n            // dynamic huffman\n            case 2:\n                this.parseDynamicHuffmanBlock();\n                break;\n            // reserved or other\n            default:\n                throw new Error('unknown BTYPE: ' + hdr);\n        }\n    }\n    ;\n    readBits(length) {\n        let bitsbuf = this.bitsbuf;\n        let bitsbuflen = this.bitsbuflen;\n        let input = this.input;\n        let ip = this.ip;\n        let inputLength = input.length;\n        let octet;\n        if (ip + ((length - bitsbuflen + 7) >> 3) >= inputLength) {\n            throw new Error('input buffer is broken');\n        }\n        // not enough buffer\n        while (bitsbuflen < length) {\n            bitsbuf |= input[ip++] << bitsbuflen;\n            bitsbuflen += 8;\n        }\n        // output byte\n        octet = bitsbuf & /* MASK */ ((1 << length) - 1);\n        bitsbuf >>>= length;\n        bitsbuflen -= length;\n        this.bitsbuf = bitsbuf;\n        this.bitsbuflen = bitsbuflen;\n        this.ip = ip;\n        return octet;\n    }\n    ;\n    readCodeByTable(table) {\n        let bitsbuf = this.bitsbuf;\n        let bitsbuflen = this.bitsbuflen;\n        let input = this.input;\n        let ip = this.ip;\n        /** @type {number} */\n        let inputLength = input.length;\n        /** @type {!(Array.<number>|Uint8Array)} huffman code table */\n        let codeTable = table[0];\n        /** @type {number} */\n        let maxCodeLength = table[1];\n        /** @type {number} code length & code (16bit, 16bit) */\n        let codeWithLength;\n        /** @type {number} code bits length */\n        let codeLength;\n        // not enough buffer\n        while (bitsbuflen < maxCodeLength) {\n            if (ip >= inputLength) {\n                break;\n            }\n            bitsbuf |= input[ip++] << bitsbuflen;\n            bitsbuflen += 8;\n        }\n        // read max length\n        codeWithLength = codeTable[bitsbuf & ((1 << maxCodeLength) - 1)];\n        codeLength = codeWithLength >>> 16;\n        if (codeLength > bitsbuflen) {\n            throw new Error('invalid code length: ' + codeLength);\n        }\n        this.bitsbuf = bitsbuf >> codeLength;\n        this.bitsbuflen = bitsbuflen - codeLength;\n        this.ip = ip;\n        return codeWithLength & 0xffff;\n    }\n    ;\n    parseUncompressedBlock() {\n        let input = this.input;\n        let ip = this.ip;\n        let output = this.output;\n        let op = this.op;\n        /** @type {number} */\n        let inputLength = input.length;\n        /** @type {number} block length */\n        let len;\n        /** @type {number} number for check block length */\n        let nlen;\n        /** @type {number} output buffer length */\n        let olength = output.length;\n        /** @type {number} copy counter */\n        let preCopy;\n        // skip buffered header bits\n        this.bitsbuf = 0;\n        this.bitsbuflen = 0;\n        // len\n        if (ip + 1 >= inputLength) {\n            throw new Error('invalid uncompressed block header: LEN');\n        }\n        len = input[ip++] | (input[ip++] << 8);\n        // nlen\n        if (ip + 1 >= inputLength) {\n            throw new Error('invalid uncompressed block header: NLEN');\n        }\n        nlen = input[ip++] | (input[ip++] << 8);\n        // check len & nlen\n        if (len === ~nlen) {\n            throw new Error('invalid uncompressed block header: length verify');\n        }\n        // check size\n        if (ip + len > input.length) {\n            throw new Error('input buffer is broken');\n        }\n        // expand buffer\n        switch (this.bufferType) {\n            case BufferType.BLOCK:\n                // pre copy\n                while (op + len > output.length) {\n                    preCopy = olength - op;\n                    len -= preCopy;\n                    output.set(input.subarray(ip, ip + preCopy), op);\n                    op += preCopy;\n                    ip += preCopy;\n                    this.op = op;\n                    output = this.expandBufferBlock();\n                    op = this.op;\n                }\n                break;\n            case BufferType.ADAPTIVE:\n                while (op + len > output.length) {\n                    output = this.expandBufferAdaptive({ fixRatio: 2 });\n                }\n                break;\n            default:\n                throw new Error('invalid inflate mode');\n        }\n        // copy\n        output.set(input.subarray(ip, ip + len), op);\n        op += len;\n        ip += len;\n        this.ip = ip;\n        this.op = op;\n        this.output = output;\n    }\n    ;\n    parseFixedHuffmanBlock() {\n        switch (this.bufferType) {\n            case BufferType.ADAPTIVE:\n                this.decodeHuffmanAdaptive(FixedLiteralLengthTable, FixedDistanceTable);\n                break;\n            case BufferType.BLOCK:\n                this.decodeHuffmanBlock(FixedLiteralLengthTable, FixedDistanceTable);\n                break;\n            default:\n                throw new Error('invalid inflate mode');\n        }\n    }\n    parseDynamicHuffmanBlock() {\n        /** @type {number} number of literal and length codes. */\n        let hlit = this.readBits(5) + 257;\n        /** @type {number} number of distance codes. */\n        let hdist = this.readBits(5) + 1;\n        /** @type {number} number of code lengths. */\n        let hclen = this.readBits(4) + 4;\n        /** @type {!(Uint8Array|Array.<number>)} code lengths. */\n        let codeLengths = new Uint8Array(Order.length);\n        /** @type {!Array} code lengths table. */\n        let codeLengthsTable;\n        /** @type {!(Uint8Array|Array.<number>)} literal and length code table. */\n        let litlenTable;\n        /** @type {!(Uint8Array|Array.<number>)} distance code table. */\n        let distTable;\n        /** @type {number} */\n        let code;\n        /** @type {number} */\n        let prev;\n        /** @type {number} */\n        let repeat;\n        /** @type {number} loop counter. */\n        let i;\n        /** @type {number} loop limit. */\n        let il;\n        // decode code lengths\n        for (i = 0; i < hclen; ++i) {\n            codeLengths[Order[i]] = this.readBits(3);\n        }\n        // decode length table\n        codeLengthsTable = buildHuffmanTable(codeLengths);\n        let lengthTable = new Uint8Array(hlit + hdist);\n        for (i = 0, il = hlit + hdist; i < il;) {\n            code = this.readCodeByTable(codeLengthsTable);\n            switch (code) {\n                case 16:\n                    repeat = 3 + this.readBits(2);\n                    while (repeat--) {\n                        lengthTable[i++] = prev;\n                    }\n                    break;\n                case 17:\n                    repeat = 3 + this.readBits(3);\n                    while (repeat--) {\n                        lengthTable[i++] = 0;\n                    }\n                    prev = 0;\n                    break;\n                case 18:\n                    repeat = 11 + this.readBits(7);\n                    while (repeat--) {\n                        lengthTable[i++] = 0;\n                    }\n                    prev = 0;\n                    break;\n                default:\n                    lengthTable[i++] = code;\n                    prev = code;\n                    break;\n            }\n        }\n        litlenTable = buildHuffmanTable(lengthTable.subarray(0, hlit));\n        distTable = buildHuffmanTable(lengthTable.subarray(hlit));\n        switch (this.bufferType) {\n            case BufferType.ADAPTIVE:\n                this.decodeHuffmanAdaptive(litlenTable, distTable);\n                break;\n            case BufferType.BLOCK:\n                this.decodeHuffmanBlock(litlenTable, distTable);\n                break;\n            default:\n                throw new Error('invalid inflate mode');\n        }\n    }\n    decodeHuffmanBlock(litlen, dist) {\n        let output = this.output;\n        let op = this.op;\n        this.currentLitlenTable = litlen;\n        /** @type {number} output position limit. */\n        let olength = output.length - MaxCopyLength;\n        /** @type {number} huffman code. */\n        let code;\n        /** @type {number} table index. */\n        let ti;\n        /** @type {number} huffman code distination. */\n        let codeDist;\n        /** @type {number} huffman code length. */\n        let codeLength;\n        let lengthCodeTable = LengthCodeTable;\n        let lengthExtraTable = LengthExtraTable;\n        let distCodeTable = DistCodeTable;\n        let distExtraTable = DistExtraTable;\n        while ((code = this.readCodeByTable(litlen)) !== 256) {\n            // literal\n            if (code < 256) {\n                if (op >= olength) {\n                    this.op = op;\n                    output = this.expandBufferBlock();\n                    op = this.op;\n                }\n                output[op++] = code;\n                continue;\n            }\n            // length code\n            ti = code - 257;\n            codeLength = lengthCodeTable[ti];\n            if (lengthExtraTable[ti] > 0) {\n                codeLength += this.readBits(lengthExtraTable[ti]);\n            }\n            // dist code\n            code = this.readCodeByTable(dist);\n            codeDist = distCodeTable[code];\n            if (distExtraTable[code] > 0) {\n                codeDist += this.readBits(distExtraTable[code]);\n            }\n            // lz77 decode\n            if (op >= olength) {\n                this.op = op;\n                output = this.expandBufferBlock();\n                op = this.op;\n            }\n            while (codeLength--) {\n                output[op] = output[(op++) - codeDist];\n            }\n        }\n        while (this.bitsbuflen >= 8) {\n            this.bitsbuflen -= 8;\n            this.ip--;\n        }\n        this.op = op;\n    }\n    ;\n    decodeHuffmanAdaptive(litlen, dist) {\n        let output = this.output;\n        let op = this.op;\n        this.currentLitlenTable = litlen;\n        /** @type {number} output position limit. */\n        let olength = output.length;\n        /** @type {number} huffman code. */\n        let code;\n        /** @type {number} table index. */\n        let ti;\n        /** @type {number} huffman code distination. */\n        let codeDist;\n        /** @type {number} huffman code length. */\n        let codeLength;\n        let lengthCodeTable = LengthCodeTable;\n        let lengthExtraTable = LengthExtraTable;\n        let distCodeTable = DistCodeTable;\n        let distExtraTable = DistExtraTable;\n        while ((code = this.readCodeByTable(litlen)) !== 256) {\n            // literal\n            if (code < 256) {\n                if (op >= olength) {\n                    output = this.expandBufferAdaptive();\n                    olength = output.length;\n                }\n                output[op++] = code;\n                continue;\n            }\n            // length code\n            ti = code - 257;\n            codeLength = lengthCodeTable[ti];\n            if (lengthExtraTable[ti] > 0) {\n                codeLength += this.readBits(lengthExtraTable[ti]);\n            }\n            // dist code\n            code = this.readCodeByTable(dist);\n            codeDist = distCodeTable[code];\n            if (distExtraTable[code] > 0) {\n                codeDist += this.readBits(distExtraTable[code]);\n            }\n            // lz77 decode\n            if (op + codeLength > olength) {\n                output = this.expandBufferAdaptive();\n                olength = output.length;\n            }\n            while (codeLength--) {\n                output[op] = output[(op++) - codeDist];\n            }\n        }\n        while (this.bitsbuflen >= 8) {\n            this.bitsbuflen -= 8;\n            this.ip--;\n        }\n        this.op = op;\n    }\n    expandBufferBlock() {\n        let buffer = new Uint8Array(this.op - MaxBackwardLength);\n        let backward = this.op - MaxBackwardLength;\n        let output = this.output;\n        // copy to output buffer\n        buffer.set(output.subarray(MaxBackwardLength, buffer.length));\n        this.blocks.push(buffer);\n        this.totalpos += buffer.length;\n        // copy to backward buffer\n        output.set(output.subarray(backward, backward + MaxBackwardLength));\n        this.op = MaxBackwardLength;\n        return output;\n    }\n    expandBufferAdaptive(opt_param) {\n        /** @type {!(Array.<number>|Uint8Array)} store buffer. */\n        let buffer;\n        /** @type {number} expantion ratio. */\n        let ratio = (this.input.length / this.ip + 1) | 0;\n        /** @type {number} maximum number of huffman code. */\n        let maxHuffCode;\n        /** @type {number} new output buffer size. */\n        let newSize;\n        /** @type {number} max inflate size. */\n        let maxInflateSize;\n        let input = this.input;\n        let output = this.output;\n        if (opt_param) {\n            if (typeof opt_param.fixRatio === 'number') {\n                ratio = opt_param.fixRatio;\n            }\n            if (typeof opt_param.addRatio === 'number') {\n                ratio += opt_param.addRatio;\n            }\n        }\n        // calculate new buffer size\n        if (ratio < 2) {\n            maxHuffCode =\n                (input.length - this.ip) / this.currentLitlenTable[2];\n            maxInflateSize = (maxHuffCode / 2 * 258) | 0;\n            newSize = maxInflateSize < output.length ?\n                output.length + maxInflateSize :\n                output.length << 1;\n        }\n        else {\n            newSize = output.length * ratio;\n        }\n        buffer = new Uint8Array(newSize);\n        buffer.set(output);\n        this.output = buffer;\n        return this.output;\n    }\n    ;\n    concatBufferBlock() {\n        /** @type {number} buffer pointer. */\n        let pos = 0;\n        /** @type {number} buffer pointer. */\n        let limit = this.totalpos + (this.op - MaxBackwardLength);\n        /** @type {!(Array.<number>|Uint8Array)} output block array. */\n        let output = this.output;\n        /** @type {!Array} blocks array. */\n        let blocks = this.blocks;\n        /** @type {!(Array.<number>|Uint8Array)} output block array. */\n        let block;\n        /** @type {!(Array.<number>|Uint8Array)} output buffer. */\n        let buffer = new Uint8Array(limit);\n        /** @type {number} loop counter. */\n        let i;\n        /** @type {number} loop limiter. */\n        let il;\n        /** @type {number} loop counter. */\n        let j;\n        /** @type {number} loop limiter. */\n        let jl;\n        // single buffer\n        if (blocks.length === 0) {\n            return this.output.subarray(MaxBackwardLength, this.op);\n        }\n        // copy to buffer\n        for (i = 0, il = blocks.length; i < il; ++i) {\n            block = blocks[i];\n            for (j = 0, jl = block.length; j < jl; ++j) {\n                buffer[pos++] = block[j];\n            }\n        }\n        // current buffer\n        for (i = MaxBackwardLength, il = this.op; i < il; ++i) {\n            buffer[pos++] = output[i];\n        }\n        this.blocks = [];\n        this.buffer = buffer;\n        return this.buffer;\n    }\n    ;\n    concatBufferDynamic() {\n        let buffer;\n        let op = this.op;\n        if (this.resize) {\n            buffer = new Uint8Array(op);\n            buffer.set(this.output.subarray(0, op));\n        }\n        else {\n            buffer = this.output.subarray(0, op);\n        }\n        this.buffer = buffer;\n        return this.buffer;\n    }\n}\n\nclass StringUtil {\n    static encodeHTML(str) {\n        if (!str)\n            return \"\";\n        else\n            return str.replace(\"&\", \"&amp;\").replace(\"<\", \"&lt;\").replace(\">\", \"&gt;\").replace(\"'\", \"&apos;\");\n    }\n    static getFileName(source) {\n        let i = source.lastIndexOf(\"/\");\n        if (i != -1)\n            source = source.substr(i + 1);\n        i = source.lastIndexOf(\"\\\\\");\n        if (i != -1)\n            source = source.substr(i + 1);\n        i = source.lastIndexOf(\".\");\n        if (i != -1)\n            return source.substring(0, i);\n        else\n            return source;\n    }\n    static startsWith(source, str, ignoreCase = false) {\n        if (!source)\n            return false;\n        else if (source.length < str.length)\n            return false;\n        else {\n            source = source.substring(0, str.length);\n            if (!ignoreCase)\n                return source == str;\n            else\n                return source.toLowerCase() == str.toLowerCase();\n        }\n    }\n    static endsWith(source, str, ignoreCase = false) {\n        if (!source)\n            return false;\n        else if (source.length < str.length)\n            return false;\n        else {\n            source = source.substring(source.length - str.length);\n            if (!ignoreCase)\n                return source == str;\n            else\n                return source.toLowerCase() == str.toLowerCase();\n        }\n    }\n    static trim(targetString) {\n        return StringUtil.trimLeft(StringUtil.trimRight(targetString));\n    }\n    static trimLeft(targetString) {\n        let tempChar = \"\";\n        let i;\n        for (i = 0; i < targetString.length; i++) {\n            tempChar = targetString.charAt(i);\n            if (tempChar != \" \" && tempChar != \"\\n\" && tempChar != \"\\r\")\n                break;\n        }\n        return targetString.substr(i);\n    }\n    static trimRight(targetString) {\n        let tempChar = \"\";\n        let i;\n        for (i = targetString.length - 1; i >= 0; i--) {\n            tempChar = targetString.charAt(i);\n            if (tempChar != \" \" && tempChar != \"\\n\" && tempChar != \"\\r\")\n                break;\n        }\n        return targetString.substring(0, i + 1);\n    }\n    static convertToHtmlColor(argb, hasAlpha = false) {\n        let alpha;\n        if (hasAlpha)\n            alpha = (argb >> 24 & 0xFF).toString(16);\n        else\n            alpha = \"\";\n        let red = (argb >> 16 & 0xFF).toString(16);\n        let green = (argb >> 8 & 0xFF).toString(16);\n        let blue = (argb & 0xFF).toString(16);\n        if (alpha.length == 1)\n            alpha = `0${alpha}`;\n        if (red.length == 1)\n            red = `0${red}`;\n        if (green.length == 1)\n            green = `0${green}`;\n        if (blue.length == 1)\n            blue = `0${blue}`;\n        return `#${alpha}${red}${green}${blue}`;\n    }\n    static convertFromHtmlColor(str, hasAlpha = false) {\n        if (str.length < 1)\n            return 0;\n        if (str.charAt(0) == \"#\")\n            str = str.substr(1);\n        if (str.length == 8)\n            return (parseInt(str.substr(0, 2), 16) << 24) + parseInt(str.substr(2), 16);\n        else if (hasAlpha)\n            return 0xFF000000 + parseInt(str, 16);\n        else\n            return parseInt(str, 16);\n    }\n    static convertToRGBA(str) {\n        if (str.charAt(0) == \"#\")\n            str = str.substr(1);\n        let alpha = +(parseInt('0x' + str.slice(0, 2)) / 255).toFixed(2);\n        str = str.substr(2);\n        let r = parseInt(str.substring(0, 2), 16);\n        let g = parseInt(str.substring(2, 4), 16);\n        let b = parseInt(str.substring(4), 16);\n        return createjs.Graphics.getRGB(r, g, b, alpha);\n    }\n    static HEX2RGB(hex) {\n        if (hex.charAt(0) == \"#\")\n            hex = hex.substr(1);\n        if (hex.length === 3) {\n            hex += hex;\n        }\n        return `${this.HEX2DEC(hex.substring(0, 2))},${this.HEX2DEC(hex.substring(2, 4))},${this.HEX2DEC(hex.substring(4))}`;\n    }\n    static HEX2DEC(hex) {\n        return parseInt(hex, 16).toString();\n    }\n}\n\nclass Utils {\n    static deepCopyProperties(target, source, propertyObj) {\n        for (var prop in propertyObj) {\n            if (Array.isArray(source[prop])) {\n                target[prop] = source[prop].slice();\n            }\n            else {\n                target[prop] = source[prop];\n            }\n        }\n    }\n    static fillPath(ctx, points, px, py) {\n        var cnt = points.length;\n        ctx.moveTo(points[0] + px, points[1] + py);\n        for (var i = 2; i < cnt; i += 2) {\n            ctx.lineTo(points[i] + px, points[i + 1] + py);\n        }\n        ctx.lineTo(points[0] + px, points[1] + py);\n    }\n}\nUtils.TextureCache = {};\n\nclass XmlNode {\n    constructor(ele) {\n        this.nodeName = ele.nodeName;\n        this.context = ele;\n        this.type = ele.nodeType;\n        this.text = (this.type == Node.COMMENT_NODE || this.type == Node.TEXT_NODE) ? this.context.textContent : null;\n    }\n    get children() {\n        if (!this.$children)\n            this.$children = XmlParser.getChildNodes(this);\n        return this.$children;\n    }\n    get attributes() {\n        if (!this.$attributes)\n            this.$attributes = XmlParser.getNodeAttributes(this);\n        return this.$attributes;\n    }\n}\nclass XmlParser {\n    static tryParse(xmlstring, mimeType = \"application/xml\") {\n        let doc = XmlParser.$parser.parseFromString(xmlstring, mimeType);\n        if (doc && doc.childNodes && doc.childNodes.length >= 1)\n            return new XmlNode(doc.firstChild);\n        return null;\n    }\n    static getXmlRoot(xml) {\n        if (!xml || !xml.context)\n            throw new Error(\"Invalid xml node\");\n        let p = xml.context;\n        while (p.parentNode != null)\n            p = p.parentNode;\n        return p == xml.context ? xml : new XmlNode(p);\n    }\n    static getChildNodes(xml, matchName = null) {\n        let nodes = xml.context.childNodes;\n        let ret = [];\n        if (!nodes || nodes.length <= 0)\n            return ret;\n        let len = nodes.length;\n        for (let i = 0; i < len; i++) {\n            let n = nodes.item(i);\n            if (n.nodeType == Node.TEXT_NODE)\n                continue;\n            if (!matchName || (matchName && matchName.length > 0 && n.nodeName.toLowerCase() == matchName.toLowerCase()))\n                ret.push(new XmlNode(n));\n        }\n        return ret;\n    }\n    static getNodeAttributes(xml) {\n        let context = xml.context;\n        let asList = context.attributes;\n        let ret = {};\n        if (!asList || asList.length <= 0)\n            return ret;\n        let len = asList.length;\n        for (let i = 0; i < len; i++) {\n            let a = asList.item(i);\n            ret[a.nodeName] = a.nodeValue;\n        }\n        return ret;\n    }\n}\nXmlParser.$parser = new DOMParser();\n\nclass DisplayListItem {\n    constructor(packageItem, type) {\n        this.packageItem = packageItem;\n        this.type = type;\n    }\n}\n\nclass PackageItem {\n    constructor() {\n        this.width = 0;\n        this.height = 0;\n        this.tiledSlices = 0;\n        //movieclip\n        this.interval = 0;\n        this.repeatDelay = 0;\n    }\n    load() {\n        return this.owner.getItemAsset(this);\n    }\n    toString() {\n        return this.name;\n    }\n}\n\nclass AtlasConfig {\n    constructor(atlasName, frame, orig, trim, rotate) {\n        this.atlasName = atlasName;\n        this.frame = frame;\n        this.orig = orig;\n        this.trim = trim;\n        this.rotate = rotate;\n    }\n}\nclass UIPackage {\n    constructor() {\n        this.$items = [];\n        this.$atlasConfigs = {};\n    }\n    static getById(id) {\n        return UIPackage.$packageInstById[id];\n    }\n    static getByName(name) {\n        return UIPackage.$packageInstByName[name];\n    }\n    static addPackage(resKey) {\n        let pkg = new UIPackage();\n        pkg.$resKey = resKey;\n        pkg.create(resKey);\n        UIPackage.$packageInstById[pkg.id] = pkg;\n        UIPackage.$packageInstByName[pkg.name] = pkg;\n        pkg.customId = resKey;\n        return pkg;\n    }\n    static removePackage(packageId) {\n        let pkg = UIPackage.$packageInstById[packageId];\n        pkg.dispose();\n        delete UIPackage.$packageInstById[pkg.id];\n        if (pkg.$customId != null)\n            delete UIPackage.$packageInstById[pkg.$customId];\n        delete UIPackage.$packageInstByName[pkg.name];\n    }\n    static createObject(pkgName, resName, userClass) {\n        let pkg = UIPackage.getByName(pkgName);\n        if (pkg)\n            return pkg.createObject(resName, userClass);\n        else\n            return null;\n    }\n    static createObjectFromURL(url, userClass) {\n        let pi = UIPackage.getItemByURL(url);\n        if (pi)\n            return pi.owner.internalCreateObject(pi, userClass);\n        else\n            return null;\n    }\n    static getItemURL(pkgName, resName) {\n        let pkg = UIPackage.getByName(pkgName);\n        if (!pkg)\n            return null;\n        let pi = pkg.$itemsByName[resName];\n        if (!pi)\n            return null;\n        return `ui://${pkg.id}${pi.id}`;\n    }\n    static getItemByURL(url) {\n        let pos1 = url.indexOf('//');\n        if (pos1 == -1)\n            return null;\n        let pos2 = url.indexOf('/', pos1 + 2);\n        let pkg;\n        if (pos2 == -1) {\n            if (url.length > 13) {\n                let pkgId = url.substr(5, 8);\n                pkg = UIPackage.getById(pkgId);\n                if (pkg != null) {\n                    let srcId = url.substr(13);\n                    return pkg.getItemById(srcId);\n                }\n            }\n        }\n        else {\n            let pkgName = url.substr(pos1 + 2, pos2 - pos1 - 2);\n            pkg = UIPackage.getByName(pkgName);\n            if (pkg != null) {\n                let srcName = url.substr(pos2 + 1);\n                return pkg.getItemByName(srcName);\n            }\n        }\n        return null;\n    }\n    static getBitmapFontByURL(url) {\n        return UIPackage.$bitmapFonts[url];\n    }\n    static setStringsSource(source) {\n        UIPackage.$stringsSource = {};\n        let xmlroot = XmlParser.tryParse(source);\n        xmlroot.children.forEach(cxml => {\n            if (cxml.nodeName == 'string') {\n                let key = cxml.attributes.name;\n                let i = key.indexOf('-');\n                if (i == -1)\n                    return;\n                let text = cxml.children.length > 0 ? cxml.children[0].text : '';\n                let key2 = key.substr(0, i);\n                let key3 = key.substr(i + 1);\n                let col = UIPackage.$stringsSource[key2];\n                if (!col) {\n                    col = {};\n                    UIPackage.$stringsSource[key2] = col;\n                }\n                col[key3] = text;\n            }\n        });\n    }\n    /**\n     * format the URL from old version to new version\n     * @param url url with old version format\n     */\n    static normalizeURL(url) {\n        if (url == null)\n            return null;\n        let pos1 = url.indexOf('//');\n        if (pos1 == -1)\n            return null;\n        let pos2 = url.indexOf('/', pos1 + 2);\n        if (pos2 == -1)\n            return url;\n        let pkgName = url.substr(pos1 + 2, pos2 - pos1 - 2);\n        let srcName = url.substr(pos2 + 1);\n        return UIPackage.getItemURL(pkgName, srcName);\n    }\n    create(resKey) {\n        this.$resKey = resKey;\n        let buf = AssetLoader.resourcesPool[this.$resKey];\n        if (!buf) {\n            buf = AssetLoader.resourcesPool[`${this.$resKey}_fui`];\n        }\n        if (!buf) {\n            throw new Error(`Resource '${this.$resKey}' not found, please make sure that you use \"new fgui.utils.AssetLoader\" to load resources\".`);\n        }\n        if (!buf || !(buf instanceof ArrayBuffer)) {\n            throw new Error(`Resource '${this.$resKey}' is not a proper binary resource, please load it as binary format in manifest file add[{ id, src, type: \"binary\" }]`);\n        }\n        this.loadPackage(buf);\n    }\n    loadPackage(descData) {\n        this.decompressPackage(descData);\n        let str = this.getResDescriptor('sprites.bytes');\n        str &&\n            str.split(UIPackage.sep1).forEach((str, index) => {\n                if (index >= 1 && str && str.length) {\n                    let arr = str.split(UIPackage.sep2);\n                    let texID;\n                    let itemId = arr[0];\n                    let binIndex = parseInt(arr[1]);\n                    if (binIndex >= 0)\n                        texID = `atlas${binIndex}`;\n                    else {\n                        let pos = itemId.indexOf('_');\n                        if (pos == -1)\n                            texID = `atlas_${itemId}`;\n                        else\n                            texID = `atlas_${itemId.substr(0, pos)}`;\n                    }\n                    let cfg = new AtlasConfig(texID);\n                    cfg.frame = new createjs.Rectangle(parseInt(arr[2]), parseInt(arr[3]), parseInt(arr[4]), parseInt(arr[5]));\n                    cfg.rotate = arr[6] == '1' ? 6 : 0;\n                    cfg.orig =\n                        cfg.rotate != 0 ? new createjs.Rectangle(0, 0, cfg.frame.height, cfg.frame.width) : null;\n                    /*\n                          cfg.trim = trimed;  //ignored for now - editor not support\n                          */\n                    this.$atlasConfigs[itemId] = cfg;\n                }\n            });\n        str = this.getResDescriptor('package.xml');\n        let xml = XmlParser.tryParse(str);\n        this.$id = xml.attributes.id;\n        this.$name = xml.attributes.name;\n        let resources = xml.children[0].children;\n        this.$itemsById = {};\n        this.$itemsByName = {};\n        resources.forEach(cxml => {\n            let pi = new PackageItem();\n            pi.type = ParsePackageItemType(cxml.nodeName);\n            pi.id = cxml.attributes.id;\n            pi.name = cxml.attributes.name;\n            pi.file = cxml.attributes.file;\n            str = cxml.attributes.size;\n            if (str) {\n                let arr = str.split(UIPackage.sep0);\n                pi.width = parseInt(arr[0]);\n                pi.height = parseInt(arr[1]);\n            }\n            switch (pi.type) {\n                case 0 /* Image */: {\n                    str = cxml.attributes.scale;\n                    if (str == '9grid') {\n                        str = cxml.attributes.scale9grid;\n                        if (str) {\n                            let arr = str.split(UIPackage.sep0);\n                            let rect = new createjs.Rectangle(parseInt(arr[0]), parseInt(arr[1]), parseInt(arr[2]), parseInt(arr[3]));\n                            pi.scale9Grid = rect;\n                            str = cxml.attributes.gridTile;\n                            if (str)\n                                pi.tiledSlices = parseInt(str);\n                        }\n                    }\n                    else if (str == 'tile')\n                        pi.scaleByTile = true;\n                    break;\n                }\n            }\n            pi.owner = this;\n            this.$items.push(pi);\n            this.$itemsById[pi.id] = pi;\n            if (pi.name != null)\n                this.$itemsByName[pi.name] = pi;\n        }, this);\n        this.$items.forEach(pi => {\n            if (pi.type == 6 /* Font */) {\n                this.loadFont(pi);\n                UIPackage.$bitmapFonts[pi.bitmapFont.id] = pi.bitmapFont;\n            }\n        }, this);\n    }\n    decompressPackage(buf) {\n        this.$resData = {};\n        var mark = new Uint8Array(buf.slice(0, 2));\n        if (mark[0] == 0x50 && mark[1] == 0x4b) {\n            this.decodeUncompressed(buf);\n            return;\n        }\n        let inflater = new RawInflate(buf);\n        let data = inflater.decompress();\n        let source = RawByte.decodeUTF8(data);\n        let curr = 0;\n        let fn;\n        let size;\n        while (true) {\n            let pos = source.indexOf('|', curr);\n            if (pos == -1)\n                break;\n            fn = source.substring(curr, pos);\n            curr = pos + 1;\n            pos = source.indexOf('|', curr);\n            size = parseInt(source.substring(curr, pos));\n            curr = pos + 1;\n            this.$resData[fn] = source.substr(curr, size);\n            curr += size;\n        }\n    }\n    /**\n     * @param buf\n     */\n    decodeUncompressed(buf) {\n        var ba = new ByteArray(buf);\n        ba.endian = Endian.LITTLE_ENDIAN;\n        var pos = ba.length - 22;\n        ba.position = pos + 10;\n        var entryCount = ba.readUnsignedShort();\n        ba.position = pos + 16;\n        pos = ba.readInt();\n        for (var i = 0; i < entryCount; i++) {\n            ba.position = pos + 28;\n            var len = ba.readUnsignedShort();\n            var len2 = ba.readUnsignedShort() + ba.readUnsignedShort();\n            ba.position = pos + 46;\n            var entryName = ba.readUTFBytes(len);\n            if (entryName[entryName.length - 1] != '/' && entryName[entryName.length - 1] != '\\\\') {\n                //not directory\n                ba.position = pos + 20;\n                var size = ba.readInt();\n                ba.position = pos + 42;\n                var offset = ba.readInt() + 30 + len;\n                if (size > 0) {\n                    ba.position = offset;\n                    this.$resData[entryName] = ba.readUTFBytes(size);\n                }\n            }\n            pos += 46 + len + len2;\n        }\n    }\n    dispose() {\n        this.$items.forEach(pi => {\n            let cfg = this.$atlasConfigs[pi.id];\n            if (cfg)\n                AssetLoader.destroyResource(`${this.$resKey}@${cfg.atlasName}`);\n        }, this);\n    }\n    get id() {\n        return this.$id;\n    }\n    get name() {\n        return this.$name;\n    }\n    get customId() {\n        return this.$customId;\n    }\n    set customId(value) {\n        if (this.$customId != null)\n            delete UIPackage.$packageInstById[this.$customId];\n        this.$customId = value;\n        if (this.$customId != null)\n            UIPackage.$packageInstById[this.$customId] = this;\n    }\n    createObject(resName, userClass) {\n        let pi = this.$itemsByName[resName];\n        if (pi)\n            return this.internalCreateObject(pi, userClass);\n        else\n            return null;\n    }\n    internalCreateObject(item, userClass = null) {\n        let g = item.type == 4 /* Component */ && userClass != null\n            ? new userClass()\n            : Decls.UIObjectFactory.newObject(item);\n        if (g == null)\n            return null;\n        UIPackage.$constructingObjects++;\n        g.packageItem = item;\n        g.constructFromResource();\n        UIPackage.$constructingObjects--;\n        return g;\n    }\n    getItemById(itemId) {\n        return this.$itemsById[itemId];\n    }\n    getItemByName(resName) {\n        return this.$itemsByName[resName];\n    }\n    getItemAssetByName(resName) {\n        let pi = this.$itemsByName[resName];\n        if (pi == null)\n            throw new Error(`Resource '${resName}' not found`);\n        return this.getItemAsset(pi);\n    }\n    /**\n     * todo\n     */\n    createSpriteTexture(cfgName, cfg) {\n        let atlasItem = this.$itemsById[cfg.atlasName];\n        if (atlasItem != null) {\n            let atlasTexture = this.getItemAsset(atlasItem);\n            if (!atlasTexture)\n                return null;\n            if (!cfg.texCacheID) {\n                cfg.texCacheID = `${this.$resKey}@${cfg.atlasName}`;\n            }\n            let tex = Utils.TextureCache[cfg.texCacheID];\n            //todo add to cache\n            if (!tex) {\n                tex = {\n                    image: atlasTexture,\n                    rect: cfg.frame\n                };\n            }\n            return tex;\n        }\n        else\n            return null;\n    }\n    getItemAsset(item) {\n        switch (item.type) {\n            case 0 /* Image */:\n                if (!item.decoded) {\n                    item.decoded = true;\n                    let cfg = this.$atlasConfigs[item.id];\n                    if (cfg != null)\n                        item.texture = this.createSpriteTexture(item.id, cfg);\n                }\n                return item.texture;\n            case 7 /* Atlas */:\n                if (!item.decoded) {\n                    item.decoded = true;\n                    let fileName = item.file != null && item.file.length > 0 ? item.file : `${item.id}.png`;\n                    let resName = `${this.$resKey}@${StringUtil.getFileName(fileName)}`;\n                    let texture = AssetLoader.resourcesPool[resName];\n                    if (!texture) {\n                        throw new Error(`${resName} not found in fgui.AssetLoader.resourcesPool, please load assets first!`);\n                    }\n                    item.texture = texture;\n                    if (!item.texture) {\n                        texture = AssetLoader.resourcesPool[`${this.$resKey}@${fileName.replace('.', '_')}`];\n                        item.texture = texture;\n                    }\n                }\n                return item.texture;\n            case 3 /* Sound */:\n                if (!item.decoded) {\n                    item.decoded = true;\n                    this.loadAudio(item);\n                }\n                return item.sound;\n            case 6 /* Font */:\n                if (!item.decoded) {\n                    item.decoded = true;\n                    this.loadFont(item);\n                }\n                return item.bitmapFont;\n            case 2 /* MovieClip */:\n                if (!item.decoded) {\n                    item.decoded = true;\n                    this.loadMovieClip(item);\n                }\n                return item.frames;\n            case 4 /* Component */:\n                if (!item.decoded) {\n                    item.decoded = true;\n                    let str = this.getResDescriptor(`${item.id}.xml`);\n                    let xml = XmlParser.tryParse(str);\n                    item.componentData = xml;\n                    this.loadComponentChildren(item);\n                    this.loadComponentTranslation(item);\n                }\n                return item.componentData;\n            default:\n                return AssetLoader.resourcesPool[`${this.$resKey}@${item.id}`];\n        }\n    }\n    loadComponentChildren(item) {\n        let listNode = XmlParser.getChildNodes(item.componentData, 'displayList');\n        if (listNode != null && listNode.length > 0) {\n            item.displayList = [];\n            listNode[0].children.forEach(cxml => {\n                let tagName = cxml.nodeName;\n                let di;\n                let src = cxml.attributes.src;\n                if (src) {\n                    let pkgId = cxml.attributes.pkg;\n                    let pkg;\n                    if (pkgId && pkgId != item.owner.id)\n                        pkg = UIPackage.getById(pkgId);\n                    else\n                        pkg = item.owner;\n                    let pi = pkg != null ? pkg.getItemById(src) : null;\n                    if (pi != null)\n                        di = new DisplayListItem(pi, null);\n                    else\n                        di = new DisplayListItem(null, tagName);\n                }\n                else {\n                    if (tagName == 'text' && cxml.attributes.input == 'true')\n                        di = new DisplayListItem(null, 'inputtext');\n                    else\n                        di = new DisplayListItem(null, tagName);\n                }\n                di.desc = cxml;\n                item.displayList.push(di);\n            });\n        }\n        else\n            item.displayList = [];\n    }\n    getResDescriptor(fn) {\n        return this.$resData[fn];\n    }\n    loadComponentTranslation(item) {\n        if (UIPackage.$stringsSource == null)\n            return;\n        let strings = UIPackage.$stringsSource[this.id + item.id];\n        if (strings == null)\n            return;\n        let value;\n        let cxml, dxml;\n        let ename;\n        let elementId;\n        let str;\n        item.displayList.forEach(item => {\n            cxml = item.desc;\n            ename = cxml.nodeName;\n            elementId = cxml.attributes.id;\n            str = cxml.attributes.tooltips;\n            if (str) {\n                value = strings[`${elementId}-tips`];\n                if (value != undefined)\n                    cxml.attributes.tooltips = value;\n            }\n            let cs = XmlParser.getChildNodes(cxml, 'gearText');\n            dxml = cs && cs[0];\n            if (dxml) {\n                value = strings[`${elementId}-texts`];\n                if (value != undefined)\n                    dxml.attributes.values = value;\n                value = strings[`${elementId}-texts_def`];\n                if (value != undefined)\n                    dxml.attributes.default = value;\n            }\n            if (ename == 'text' || ename == 'richtext') {\n                value = strings[elementId];\n                if (value != undefined)\n                    cxml.attributes.text = value;\n                value = strings[`${elementId}-prompt`];\n                if (value != undefined)\n                    cxml.attributes.prompt = value;\n            }\n            else if (ename == 'list') {\n                cxml.children.forEach((exml, index) => {\n                    if (exml.nodeName != 'item')\n                        return;\n                    value = strings[`${elementId}-${index}`];\n                    if (value != undefined)\n                        exml.attributes.title = value;\n                });\n            }\n            else if (ename == 'component') {\n                cs = XmlParser.getChildNodes(cxml, 'Button');\n                dxml = cs && cs[0];\n                if (dxml) {\n                    value = strings[elementId];\n                    if (value != undefined)\n                        dxml.attributes.title = value;\n                    value = strings[`${elementId}-0`];\n                    if (value != undefined)\n                        dxml.attributes.selectedTitle = value;\n                    return;\n                }\n                cs = XmlParser.getChildNodes(cxml, 'Label');\n                dxml = cs && cs[0];\n                if (dxml) {\n                    value = strings[elementId];\n                    if (value != undefined)\n                        dxml.attributes.title = value;\n                    return;\n                }\n                cs = XmlParser.getChildNodes(cxml, 'ComboBox');\n                dxml = cs && cs[0];\n                if (dxml) {\n                    value = strings[elementId];\n                    if (value != undefined)\n                        dxml.attributes.title = value;\n                    dxml.children.forEach((exml, index) => {\n                        if (exml.nodeName != 'item')\n                            return;\n                        value = strings[`${elementId}-${index}`];\n                        if (value != undefined)\n                            exml.attributes.title = value;\n                    });\n                    return;\n                }\n            }\n        });\n    }\n    loadMovieClip(item) {\n        let xml = XmlParser.tryParse(this.getResDescriptor(`${item.id}.xml`));\n        let str;\n        str = xml.attributes.interval;\n        if (str != null)\n            item.interval = parseInt(str);\n        str = xml.attributes.swing;\n        if (str != null)\n            item.swing = str == 'true';\n        str = xml.attributes.repeatDelay;\n        if (str != null)\n            item.repeatDelay = parseInt(str);\n        item.frames = [];\n        let frameNodes = xml.children[0].children;\n        frameNodes.forEach((node, index) => {\n            let frame = new Frame();\n            str = node.attributes.rect;\n            let arr = str.split(UIPackage.sep0);\n            let trimRect = new createjs.Rectangle(parseInt(arr[0]), parseInt(arr[1]), parseInt(arr[2]), parseInt(arr[3]));\n            str = node.attributes.addDelay;\n            if (str)\n                frame.addDelay = parseInt(str);\n            item.frames.push(frame);\n            if (trimRect.width <= 0)\n                return;\n            str = node.attributes.sprite;\n            if (str)\n                str = `${item.id}_${str}`;\n            else\n                str = `${item.id}_${index}`;\n            let cfg = this.$atlasConfigs[str];\n            if (cfg != null) {\n                frame.texture = this.createSpriteTexture(str, cfg);\n                frame.texture.trim = trimRect;\n            }\n        });\n    }\n    loadFont(item) {\n        let font = new BitmapFont();\n        font.id = `ui://${this.id}${item.id}`;\n        let str = this.getResDescriptor(`${item.id}.fnt`);\n        let lines = str.split(UIPackage.sep1);\n        let kv = {};\n        let ttf = false;\n        let size = 0;\n        let xadvance = 0;\n        let resizable = false;\n        let colorable = false;\n        let atlasOffsetX = 0, atlasOffsetY = 0;\n        let charImg;\n        let mainTexture;\n        let lineHeight = 0;\n        let maxCharHeight = 0;\n        lines.forEach(line => {\n            if (line && line.length) {\n                str = StringUtil.trim(line);\n                let arr = str.split(UIPackage.sep2);\n                arr.forEach(v => {\n                    let at = v.split(UIPackage.sep3);\n                    kv[at[0]] = at[1];\n                });\n                str = arr[0];\n                if (str == 'char') {\n                    let bg = new BMGlyph();\n                    bg.x = parseInt(kv.x) || 0;\n                    bg.y = parseInt(kv.y) || 0;\n                    bg.offsetX = parseInt(kv.xoffset) || 0;\n                    bg.offsetY = parseInt(kv.yoffset) || 0;\n                    bg.width = parseInt(kv.width) || 0;\n                    bg.height = parseInt(kv.height) || 0;\n                    maxCharHeight = Math.max(bg.height, maxCharHeight);\n                    bg.advance = parseInt(kv.xadvance) || 0;\n                    if (kv.chnl != undefined) {\n                        bg.channel = parseInt(kv.chnl);\n                        if (bg.channel == 15)\n                            bg.channel = 4;\n                        else if (bg.channel == 1)\n                            bg.channel = 3;\n                        else if (bg.channel == 2)\n                            bg.channel = 2;\n                        else\n                            bg.channel = 1;\n                    }\n                    if (!ttf) {\n                        if (kv.img) {\n                            charImg = this.$itemsById[kv.img];\n                            if (charImg != null) {\n                                charImg.load();\n                                bg.width = charImg.width;\n                                bg.height = charImg.height;\n                                bg.texture = charImg.texture;\n                            }\n                        }\n                    }\n                    else if (mainTexture != null) {\n                        if (!bg.texture) {\n                            bg.texture = { image: mainTexture, rect: {} };\n                        }\n                        bg.texture.rect = new createjs.Rectangle(bg.x + atlasOffsetX, bg.y + atlasOffsetY, bg.width, bg.height);\n                    }\n                    if (ttf)\n                        bg.lineHeight = lineHeight;\n                    else {\n                        if (bg.advance == 0) {\n                            if (xadvance == 0)\n                                bg.advance = bg.offsetX + bg.width;\n                            else\n                                bg.advance = xadvance;\n                        }\n                        bg.lineHeight = bg.offsetY < 0 ? bg.height : bg.offsetY + bg.height;\n                        if (size > 0 && bg.lineHeight < size)\n                            bg.lineHeight = size;\n                    }\n                    font.glyphs[String.fromCharCode(+kv.id | 0)] = bg;\n                }\n                else if (str == 'info') {\n                    ttf = kv.face != null;\n                    if (kv.size)\n                        size = parseInt(kv.size);\n                    resizable = kv.resizable == 'true';\n                    colorable = kv.colored == 'true';\n                    if (ttf) {\n                        let cfg = this.$atlasConfigs[item.id];\n                        if (cfg != null) {\n                            atlasOffsetX = cfg.frame.x;\n                            atlasOffsetY = cfg.frame.y;\n                            let atlasItem = this.$itemsById[cfg.atlasName];\n                            if (atlasItem != null)\n                                mainTexture = this.getItemAsset(atlasItem);\n                        }\n                    }\n                }\n                else if (str == 'common') {\n                    if (kv.lineHeight)\n                        lineHeight = parseInt(kv.lineHeight);\n                    if (size == 0)\n                        size = lineHeight;\n                    else if (lineHeight == 0)\n                        lineHeight = size;\n                    if (kv.xadvance)\n                        xadvance = parseInt(kv.xadvance);\n                }\n            }\n        });\n        if (size == 0 && maxCharHeight > 0)\n            size = maxCharHeight;\n        font.ttf = ttf;\n        font.size = size;\n        font.resizable = resizable;\n        font.colorable = colorable;\n        item.bitmapFont = font;\n    }\n    loadAudio(item) {\n        let fileName = item.file != null && item.file.length > 0 ? item.file : `${item.id}.mp3`;\n        let resName = `${this.$resKey}@${StringUtil.getFileName(fileName)}`;\n        let sound = AssetLoader.resourcesPool[resName];\n        if (sound) {\n            item.sound = createjs.Sound.play(resName);\n        }\n        else {\n            console.log(\"Resource '\" + item.file + \"' not found, please loadManifest first!\");\n        }\n    }\n}\n/**@internal */\nUIPackage.$constructingObjects = 0;\nUIPackage.$packageInstById = {};\nUIPackage.$packageInstByName = {};\nUIPackage.$bitmapFonts = {};\nUIPackage.$stringsSource = null;\nUIPackage.sep0 = ',';\nUIPackage.sep1 = '\\n';\nUIPackage.sep2 = ' ';\nUIPackage.sep3 = '=';\nlet Decls = {};\n\nclass GearLook extends GearBase {\n    constructor(owner) {\n        super(owner);\n    }\n    init() {\n        this.$default = new GearLookValue(this.$owner.alpha, this.$owner.rotation, this.$owner.grayed);\n        this.$storage = {};\n    }\n    addStatus(pageId, value) {\n        if (value == '-')\n            return;\n        let arr = value.split(',');\n        let gv;\n        if (pageId == null)\n            gv = this.$default;\n        else {\n            gv = new GearLookValue();\n            this.$storage[pageId] = gv;\n        }\n        gv.alpha = parseFloat(arr[0]);\n        gv.rotation = parseInt(arr[1]);\n        gv.grayed = arr[2] == '1' ? true : false;\n    }\n    apply() {\n        let gv = this.$storage[this.$controller.selectedPageId];\n        if (!gv)\n            gv = this.$default;\n        if (this.$tween && !UIPackage.$constructingObjects && !GearBase.disableAllTweenEffect) {\n            this.$owner.$gearLocked = true;\n            this.$owner.grayed = gv.grayed;\n            this.$owner.$gearLocked = false;\n            if (this.$tweener) {\n                if (this.$tweenTarget.alpha === gv.alpha && this.$tweenTarget.rotation === gv.rotation)\n                    return;\n                this.$tweener.gotoAndStop(this.$tweener.duration); //set to end\n                this.$tweener = null;\n            }\n            let a = gv.alpha != this.$owner.alpha;\n            let b = gv.rotation != this.$owner.rotation;\n            if (a || b) {\n                if (this.$owner.hasGearController(0, this.$controller))\n                    this.$lockToken = this.$owner.lockGearDisplay();\n                this.$tweenTarget = gv;\n                let vars = {\n                    onChange: () => {\n                        this.$owner.$gearLocked = true;\n                        if (a)\n                            this.$owner.alpha = this.$tweenValue.x;\n                        if (b)\n                            this.$owner.rotation = this.$tweenValue.y;\n                        this.$owner.$gearLocked = false;\n                    }\n                };\n                if (this.$tweenValue == null)\n                    this.$tweenValue = new createjs.Point();\n                this.$tweenValue.x = this.$owner.alpha;\n                this.$tweenValue.y = this.$owner.rotation;\n                this.$tweener = createjs.Tween.get(this.$tweenValue, vars)\n                    .wait(this.$tweenDelay * 1000)\n                    .to({ x: gv.alpha, y: gv.rotation }, this.$tweenTime * 1000, this.$easeType)\n                    .call(this.tweenComplete, null, this);\n            }\n        }\n        else {\n            this.$owner.$gearLocked = true;\n            this.$owner.grayed = gv.grayed;\n            this.$owner.alpha = gv.alpha;\n            this.$owner.rotation = gv.rotation;\n            this.$owner.$gearLocked = false;\n        }\n    }\n    tweenComplete() {\n        if (this.$lockToken != 0) {\n            this.$owner.releaseGearDisplay(this.$lockToken);\n            this.$lockToken = 0;\n        }\n        this.$tweener = null;\n        let evt = new createjs.Event(\"__gearStop\" /* GEAR_STOP */, true, false);\n        this.$owner.dispatchEvent(evt, this);\n    }\n    updateState() {\n        if (this.$controller == null || this.$owner.$gearLocked || this.$owner.$inProgressBuilding)\n            return;\n        let gv = this.$storage[this.$controller.selectedPageId];\n        if (!gv) {\n            gv = new GearLookValue();\n            this.$storage[this.$controller.selectedPageId] = gv;\n        }\n        gv.alpha = this.$owner.alpha;\n        gv.rotation = this.$owner.rotation;\n        gv.grayed = this.$owner.grayed;\n    }\n}\nclass GearLookValue {\n    constructor(alpha = 0, rotation = 0, grayed = false) {\n        this.alpha = alpha;\n        this.rotation = rotation;\n        this.grayed = grayed;\n    }\n}\n\nclass GearSize extends GearBase {\n    constructor(owner) {\n        super(owner);\n    }\n    init() {\n        this.$default = new GearSizeValue(this.$owner.width, this.$owner.height, this.$owner.scaleX, this.$owner.scaleY);\n        this.$storage = {};\n    }\n    addStatus(pageId, value) {\n        if (value == '-')\n            return;\n        let arr = value.split(',');\n        let gv;\n        if (pageId == null)\n            gv = this.$default;\n        else {\n            gv = new GearSizeValue();\n            this.$storage[pageId] = gv;\n        }\n        gv.width = parseInt(arr[0]);\n        gv.height = parseInt(arr[1]);\n        if (arr.length > 2) {\n            gv.scaleX = parseFloat(arr[2]);\n            gv.scaleY = parseFloat(arr[3]);\n        }\n    }\n    apply() {\n        let gv = this.$storage[this.$controller.selectedPageId];\n        if (!gv)\n            gv = this.$default;\n        if (this.$tween && !UIPackage.$constructingObjects && !GearBase.disableAllTweenEffect) {\n            if (this.$tweener) {\n                if (this.$tweenTarget.width != gv.width ||\n                    this.$tweenTarget.height != gv.height ||\n                    this.$tweenTarget.scaleX != gv.scaleX ||\n                    this.$tweenTarget.scaleY != gv.scaleY) {\n                    this.$tweener.gotoAndStop(this.$tweener.duration); //set to end\n                    this.$tweener = null;\n                }\n                else\n                    return;\n            }\n            let a = gv.width != this.$owner.width || gv.height != this.$owner.height;\n            let b = gv.scaleX != this.$owner.scaleX || gv.scaleY != this.$owner.scaleY;\n            if (a || b) {\n                if (this.$owner.hasGearController(0, this.$controller))\n                    this.$lockToken = this.$owner.lockGearDisplay();\n                this.$tweenTarget = gv;\n                let vars = {\n                    onChange: () => {\n                        this.$owner.$gearLocked = true;\n                        if (a)\n                            this.$owner.setSize(this.$tweenValue.width, this.$tweenValue.height, this.$owner.gearXY.controller == this.$controller);\n                        if (b)\n                            this.$owner.setScale(this.$tweenValue.scaleX, this.$tweenValue.scaleY);\n                        this.$owner.$gearLocked = false;\n                    }\n                };\n                if (this.$tweenValue == null)\n                    this.$tweenValue = new GearSizeValue();\n                this.$tweenValue.width = this.$owner.width;\n                this.$tweenValue.height = this.$owner.height;\n                this.$tweenValue.scaleX = this.$owner.scaleX;\n                this.$tweenValue.scaleY = this.$owner.scaleY;\n                this.$tweener = createjs.Tween.get(this.$tweenValue, vars)\n                    .wait(this.$tweenDelay * 1000)\n                    .to({ width: gv.width, height: gv.height, scaleX: gv.scaleX, scaleY: gv.scaleY }, this.$tweenTime * 1000, this.$easeType)\n                    .call(this.tweenComplete, null, this);\n            }\n        }\n        else {\n            this.$owner.$gearLocked = true;\n            this.$owner.setSize(gv.width, gv.height, this.$owner.gearXY.controller == this.$controller);\n            this.$owner.setScale(gv.scaleX, gv.scaleY);\n            this.$owner.$gearLocked = false;\n        }\n    }\n    tweenComplete() {\n        if (this.$lockToken != 0) {\n            this.$owner.releaseGearDisplay(this.$lockToken);\n            this.$lockToken = 0;\n        }\n        this.$tweener = null;\n        let evt = new createjs.Event(\"__gearStop\" /* GEAR_STOP */, true, false);\n        this.$owner.dispatchEvent(evt, this);\n    }\n    updateState() {\n        if (this.$controller == null || this.$owner.$gearLocked || this.$owner.$inProgressBuilding)\n            return;\n        let gv = this.$storage[this.$controller.selectedPageId];\n        if (!gv) {\n            gv = new GearSizeValue();\n            this.$storage[this.$controller.selectedPageId] = gv;\n        }\n        gv.width = this.$owner.width;\n        gv.height = this.$owner.height;\n        gv.scaleX = this.$owner.scaleX;\n        gv.scaleY = this.$owner.scaleY;\n    }\n    updateFromRelations(dx, dy) {\n        if (this.$controller == null || this.$storage == null)\n            return;\n        for (let key in this.$storage) {\n            let gv = this.$storage[key];\n            gv.width += dx;\n            gv.height += dy;\n        }\n        this.$default.width += dx;\n        this.$default.height += dy;\n        this.updateState();\n    }\n}\nclass GearSizeValue {\n    constructor(width = 0, height = 0, scaleX = 0, scaleY = 0) {\n        this.width = width;\n        this.height = height;\n        this.scaleX = scaleX;\n        this.scaleY = scaleY;\n    }\n}\n\nclass GearXY extends GearBase {\n    constructor(owner) {\n        super(owner);\n    }\n    init() {\n        this.$default = new createjs.Point(this.$owner.x, this.$owner.y);\n        this.$storage = {};\n    }\n    addStatus(pageId, value) {\n        if (value == '-')\n            return;\n        let arr = value.split(',');\n        let pt;\n        if (pageId == null)\n            pt = this.$default;\n        else {\n            pt = new createjs.Point();\n            this.$storage[pageId] = pt;\n        }\n        pt.x = parseInt(arr[0]);\n        pt.y = parseInt(arr[1]);\n    }\n    apply() {\n        let pt = this.$storage[this.$controller.selectedPageId];\n        if (!pt)\n            pt = this.$default;\n        if (this.$tween && !UIPackage.$constructingObjects && !GearBase.disableAllTweenEffect) {\n            if (this.$tweener) {\n                if (this.$tweenTarget.x === pt.x && this.$tweenTarget.y === pt.y)\n                    return;\n                this.$tweener.gotoAndStop(this.$tweener.duration); //set to end\n                this.$tweener = null;\n            }\n            if (this.$owner.x != pt.x || this.$owner.y != pt.y) {\n                this.$owner.hasGearController(0, this.$controller);\n                this.$lockToken = this.$owner.lockGearDisplay();\n                this.$tweenTarget = pt;\n                let vars = {\n                    onChange: () => {\n                        this.$owner.$gearLocked = true;\n                        this.$owner.setXY(this.$tweenValue.x, this.$tweenValue.y);\n                        this.$owner.$gearLocked = false;\n                    }\n                };\n                if (this.$tweenValue == null)\n                    this.$tweenValue = new createjs.Point();\n                this.$tweenValue.x = this.$owner.x;\n                this.$tweenValue.y = this.$owner.y;\n                this.$tweener = createjs.Tween.get(this.$tweenValue, vars)\n                    .wait(this.$tweenDelay * 1000)\n                    .to({ x: pt.x, y: pt.y }, this.$tweenTime * 1000, this.$easeType)\n                    .call(this.tweenComplete, null, this);\n            }\n        }\n        else {\n            this.$owner.$gearLocked = true;\n            this.$owner.setXY(pt.x, pt.y);\n            this.$owner.$gearLocked = false;\n        }\n    }\n    tweenComplete() {\n        if (this.$lockToken != 0) {\n            this.$owner.releaseGearDisplay(this.$lockToken);\n            this.$lockToken = 0;\n        }\n        this.$tweener = null;\n        let evt = new createjs.Event(\"__gearStop\" /* GEAR_STOP */, true, false);\n        this.$owner.dispatchEvent(evt, this);\n    }\n    updateState() {\n        if (this.$controller == null || this.$owner.$gearLocked || this.$owner.$inProgressBuilding)\n            return;\n        let pt = this.$storage[this.$controller.selectedPageId];\n        if (!pt) {\n            pt = new createjs.Point();\n            this.$storage[this.$controller.selectedPageId] = pt;\n        }\n        pt.x = this.$owner.x;\n        pt.y = this.$owner.y;\n    }\n    updateFromRelations(dx, dy) {\n        if (this.$controller == null || this.$storage == null)\n            return;\n        for (let key in this.$storage) {\n            let pt = this.$storage[key];\n            pt.x += dx;\n            pt.y += dy;\n        }\n        this.$default.x += dx;\n        this.$default.y += dy;\n        this.updateState();\n    }\n}\n\nlet isUIObject = function (obj) {\n    return obj && 'UIOwner' in obj && obj.UIOwner != null;\n};\n\nclass RelationDef {\n    copyFrom(source) {\n        this.percent = source.percent;\n        this.type = source.type;\n    }\n}\nclass RelationItem {\n    constructor(owner) {\n        this.$owner = owner;\n        this.$defs = [];\n    }\n    get owner() {\n        return this.$owner;\n    }\n    set target(value) {\n        if (this.$target != value) {\n            if (this.$target)\n                this.releaseRefTarget(this.$target);\n            this.$target = value;\n            if (this.$target)\n                this.addRefTarget(this.$target);\n        }\n    }\n    get target() {\n        return this.$target;\n    }\n    add(relationType, usePercent) {\n        if (relationType == 24 /* Size */) {\n            this.add(14 /* Width */, usePercent);\n            this.add(15 /* Height */, usePercent);\n            return;\n        }\n        let length = this.$defs.length;\n        for (let i = 0; i < length; i++) {\n            let def = this.$defs[i];\n            if (def.type == relationType)\n                return;\n        }\n        this.internalAdd(relationType, usePercent);\n    }\n    internalAdd(relationType, usePercent) {\n        if (relationType == 24 /* Size */) {\n            this.internalAdd(14 /* Width */, usePercent);\n            this.internalAdd(15 /* Height */, usePercent);\n            return;\n        }\n        let info = new RelationDef();\n        info.percent = usePercent;\n        info.type = relationType;\n        this.$defs.push(info);\n        //CENTER relation will cause float pixel, so enable the auto-pixel-snapping here\n        if (usePercent ||\n            relationType == 1 /* Left_Center */ ||\n            relationType == 3 /* Center_Center */ ||\n            relationType == 5 /* Right_Center */ ||\n            relationType == 8 /* Top_Middle */ ||\n            relationType == 10 /* Middle_Middle */ ||\n            relationType == 12 /* Bottom_Middle */) {\n            this.$owner.pixelSnapping = true;\n        }\n    }\n    remove(relationType = 0) {\n        if (relationType == 24 /* Size */) {\n            this.remove(14 /* Width */);\n            this.remove(15 /* Height */);\n            return;\n        }\n        let dc = this.$defs.length;\n        for (let k = dc - 1; k >= 0; k--) {\n            if (this.$defs[k].type == relationType) {\n                this.$defs.splice(k, 1);\n                break;\n            }\n        }\n    }\n    copyFrom(source) {\n        this.target = source.target;\n        this.$defs.length = 0;\n        source.$defs.forEach(info => {\n            let info2 = new RelationDef();\n            info2.copyFrom(info);\n            this.$defs.push(info2);\n        }, this);\n    }\n    dispose() {\n        if (this.$target != null) {\n            this.releaseRefTarget(this.$target);\n            this.$target = null;\n        }\n    }\n    get isEmpty() {\n        return this.$defs.length == 0;\n    }\n    applyOnSelfResized(dWidth, dHeight) {\n        let ox = this.$owner.x;\n        let oy = this.$owner.y;\n        this.$defs.forEach(info => {\n            switch (info.type) {\n                case 3 /* Center_Center */:\n                case 5 /* Right_Center */:\n                    this.$owner.x -= dWidth / 2;\n                    break;\n                case 4 /* Right_Left */:\n                case 6 /* Right_Right */:\n                    this.$owner.x -= dWidth;\n                    break;\n                case 10 /* Middle_Middle */:\n                case 12 /* Bottom_Middle */:\n                    this.$owner.y -= dHeight / 2;\n                    break;\n                case 11 /* Bottom_Top */:\n                case 13 /* Bottom_Bottom */:\n                    this.$owner.y -= dHeight;\n                    break;\n            }\n        }, this);\n        if (ox != this.$owner.x || oy != this.$owner.y) {\n            ox = this.$owner.x - ox;\n            oy = this.$owner.y - oy;\n            this.$owner.updateGearFromRelations(1 /* XY */, ox, oy);\n            if (this.$owner.parent != null && this.$owner.parent.$transitions.length > 0) {\n                this.$owner.parent.$transitions.forEach(t => {\n                    t.updateFromRelations(this.$owner.id, ox, oy);\n                }, this);\n            }\n        }\n    }\n    applyOnXYChanged(info, dx, dy) {\n        let tmp;\n        switch (info.type) {\n            case 0 /* Left_Left */:\n            case 1 /* Left_Center */:\n            case 2 /* Left_Right */:\n            case 3 /* Center_Center */:\n            case 4 /* Right_Left */:\n            case 5 /* Right_Center */:\n            case 6 /* Right_Right */:\n                this.$owner.x += dx;\n                break;\n            case 7 /* Top_Top */:\n            case 8 /* Top_Middle */:\n            case 9 /* Top_Bottom */:\n            case 10 /* Middle_Middle */:\n            case 11 /* Bottom_Top */:\n            case 12 /* Bottom_Middle */:\n            case 13 /* Bottom_Bottom */:\n                this.$owner.y += dy;\n                break;\n            case 14 /* Width */:\n            case 15 /* Height */:\n                break;\n            case 16 /* LeftExt_Left */:\n            case 17 /* LeftExt_Right */:\n                tmp = this.$owner.x;\n                this.$owner.x += dx;\n                this.$owner.width = this.$owner.$rawWidth - (this.$owner.x - tmp);\n                break;\n            case 18 /* RightExt_Left */:\n            case 19 /* RightExt_Right */:\n                this.$owner.width = this.$owner.$rawWidth + dx;\n                break;\n            case 20 /* TopExt_Top */:\n            case 21 /* TopExt_Bottom */:\n                tmp = this.$owner.y;\n                this.$owner.y += dy;\n                this.$owner.height = this.$owner.$rawHeight - (this.$owner.y - tmp);\n                break;\n            case 22 /* BottomExt_Top */:\n            case 23 /* BottomExt_Bottom */:\n                this.$owner.height = this.$owner.$rawHeight + dy;\n                break;\n        }\n    }\n    applyOnSizeChanged(info) {\n        let targetX, targetY;\n        if (this.$target != this.$owner.parent) {\n            targetX = this.$target.x;\n            targetY = this.$target.y;\n        }\n        else {\n            targetX = 0;\n            targetY = 0;\n        }\n        let v, tmp;\n        switch (info.type) {\n            case 0 /* Left_Left */:\n                break;\n            case 1 /* Left_Center */:\n                v = this.$owner.x - (targetX + this.$targetWidth / 2);\n                if (info.percent)\n                    v = (v / this.$targetWidth) * this.$target.$rawWidth;\n                this.$owner.x = targetX + this.$target.$rawWidth / 2 + v;\n                break;\n            case 2 /* Left_Right */:\n                v = this.$owner.x - (targetX + this.$targetWidth);\n                if (info.percent)\n                    v = (v / this.$targetWidth) * this.$target.$rawWidth;\n                this.$owner.x = targetX + this.$target.$rawWidth + v;\n                break;\n            case 3 /* Center_Center */:\n                v = this.$owner.x + this.$owner.$rawWidth / 2 - (targetX + this.$targetWidth / 2);\n                if (info.percent)\n                    v = (v / this.$targetWidth) * this.$target.$rawWidth;\n                this.$owner.x = targetX + this.$target.$rawWidth / 2 + v - this.$owner.$rawWidth / 2;\n                break;\n            case 4 /* Right_Left */:\n                v = this.$owner.x + this.$owner.$rawWidth - targetX;\n                if (info.percent)\n                    v = (v / this.$targetWidth) * this.$target.$rawWidth;\n                this.$owner.x = targetX + v - this.$owner.$rawWidth;\n                break;\n            case 5 /* Right_Center */:\n                v = this.$owner.x + this.$owner.$rawWidth - (targetX + this.$targetWidth / 2);\n                if (info.percent)\n                    v = (v / this.$targetWidth) * this.$target.$rawWidth;\n                this.$owner.x = targetX + this.$target.$rawWidth / 2 + v - this.$owner.$rawWidth;\n                break;\n            case 6 /* Right_Right */:\n                v = this.$owner.x + this.$owner.$rawWidth - (targetX + this.$targetWidth);\n                if (info.percent)\n                    v = (v / this.$targetWidth) * this.$target.$rawWidth;\n                this.$owner.x = targetX + this.$target.$rawWidth + v - this.$owner.$rawWidth;\n                break;\n            case 7 /* Top_Top */:\n                break;\n            case 8 /* Top_Middle */:\n                v = this.$owner.y - (targetY + this.$targetHeight / 2);\n                if (info.percent)\n                    v = (v / this.$targetHeight) * this.$target.$rawHeight;\n                this.$owner.y = targetY + this.$target.$rawHeight / 2 + v;\n                break;\n            case 9 /* Top_Bottom */:\n                v = this.$owner.y - (targetY + this.$targetHeight);\n                if (info.percent)\n                    v = (v / this.$targetHeight) * this.$target.$rawHeight;\n                this.$owner.y = targetY + this.$target.$rawHeight + v;\n                break;\n            case 10 /* Middle_Middle */:\n                v = this.$owner.y + this.$owner.$rawHeight / 2 - (targetY + this.$targetHeight / 2);\n                if (info.percent)\n                    v = (v / this.$targetHeight) * this.$target.$rawHeight;\n                this.$owner.y = targetY + this.$target.$rawHeight / 2 + v - this.$owner.$rawHeight / 2;\n                break;\n            case 11 /* Bottom_Top */:\n                v = this.$owner.y + this.$owner.$rawHeight - targetY;\n                if (info.percent)\n                    v = (v / this.$targetHeight) * this.$target.$rawHeight;\n                this.$owner.y = targetY + v - this.$owner.$rawHeight;\n                break;\n            case 12 /* Bottom_Middle */:\n                v = this.$owner.y + this.$owner.$rawHeight - (targetY + this.$targetHeight / 2);\n                if (info.percent)\n                    v = (v / this.$targetHeight) * this.$target.$rawHeight;\n                this.$owner.y = targetY + this.$target.$rawHeight / 2 + v - this.$owner.$rawHeight;\n                break;\n            case 13 /* Bottom_Bottom */:\n                v = this.$owner.y + this.$owner.$rawHeight - (targetY + this.$targetHeight);\n                if (info.percent)\n                    v = (v / this.$targetHeight) * this.$target.$rawHeight;\n                this.$owner.y = targetY + this.$target.$rawHeight + v - this.$owner.$rawHeight;\n                break;\n            case 14 /* Width */:\n                if (this.$owner.$inProgressBuilding && this.$owner == this.$target.parent)\n                    v = this.$owner.sourceWidth - this.$target.$initWidth;\n                else\n                    v = this.$owner.$rawWidth - this.$targetWidth;\n                if (info.percent)\n                    v = (v / this.$targetWidth) * this.$target.$rawWidth;\n                if (this.$target == this.$owner.parent)\n                    this.$owner.setSize(this.$target.$rawWidth + v, this.$owner.$rawHeight, true);\n                else\n                    this.$owner.width = this.$target.$rawWidth + v;\n                break;\n            case 15 /* Height */:\n                if (this.$owner.$inProgressBuilding && this.$owner == this.$target.parent)\n                    v = this.$owner.sourceHeight - this.$target.$initHeight;\n                else\n                    v = this.$owner.$rawHeight - this.$targetHeight;\n                if (info.percent)\n                    v = (v / this.$targetHeight) * this.$target.$rawHeight;\n                if (this.$target == this.$owner.parent)\n                    this.$owner.setSize(this.$owner.$rawWidth, this.$target.$rawHeight + v, true);\n                else\n                    this.$owner.height = this.$target.$rawHeight + v;\n                break;\n            case 16 /* LeftExt_Left */:\n                break;\n            case 17 /* LeftExt_Right */:\n                v = this.$owner.x - (targetX + this.$targetWidth);\n                if (info.percent)\n                    v = (v / this.$targetWidth) * this.$target.$rawWidth;\n                tmp = this.$owner.x;\n                this.$owner.x = targetX + this.$target.$rawWidth + v;\n                this.$owner.width = this.$owner.$rawWidth - (this.$owner.x - tmp);\n                break;\n            case 18 /* RightExt_Left */:\n                break;\n            case 19 /* RightExt_Right */:\n                if (this.$owner.$inProgressBuilding && this.$owner == this.$target.parent)\n                    v = this.$owner.sourceWidth - (targetX + this.$target.$initWidth);\n                else\n                    v = this.$owner.width - (targetX + this.$targetWidth);\n                if (this.$owner != this.$target.parent)\n                    v += this.$owner.x;\n                if (info.percent)\n                    v = (v / this.$targetWidth) * this.$target.$rawWidth;\n                if (this.$owner != this.$target.parent)\n                    this.$owner.width = targetX + this.$target.$rawWidth + v - this.$owner.x;\n                else\n                    this.$owner.width = targetX + this.$target.$rawWidth + v;\n                break;\n            case 20 /* TopExt_Top */:\n                break;\n            case 21 /* TopExt_Bottom */:\n                v = this.$owner.y - (targetY + this.$targetHeight);\n                if (info.percent)\n                    v = (v / this.$targetHeight) * this.$target.$rawHeight;\n                tmp = this.$owner.y;\n                this.$owner.y = targetY + this.$target.$rawHeight + v;\n                this.$owner.height = this.$owner.$rawHeight - (this.$owner.y - tmp);\n                break;\n            case 22 /* BottomExt_Top */:\n                break;\n            case 23 /* BottomExt_Bottom */:\n                if (this.$owner.$inProgressBuilding && this.$owner == this.$target.parent)\n                    v = this.$owner.sourceHeight - (targetY + this.$target.$initHeight);\n                else\n                    v = this.$owner.$rawHeight - (targetY + this.$targetHeight);\n                if (this.$owner != this.$target.parent)\n                    v += this.$owner.y;\n                if (info.percent)\n                    v = (v / this.$targetHeight) * this.$target.$rawHeight;\n                if (this.$owner != this.$target.parent)\n                    this.$owner.height = targetY + this.$target.$rawHeight + v - this.$owner.y;\n                else\n                    this.$owner.height = targetY + this.$target.$rawHeight + v;\n                break;\n        }\n    }\n    addRefTarget(target) {\n        if (target != this.$owner.parent)\n            target.on(\"__xyChanged\" /* XY_CHANGED */, this.$targetXYChanged, this);\n        target.on(\"__sizeChanged\" /* SIZE_CHANGED */, this.$targetSizeChanged, this);\n        target.on(\"__sizeDelayChange\" /* SIZE_DELAY_CHANGE */, this.$targetSizeWillChange, this);\n        this.$targetX = this.$target.x;\n        this.$targetY = this.$target.y;\n        this.$targetWidth = this.$target.$rawWidth;\n        this.$targetHeight = this.$target.$rawHeight;\n    }\n    releaseRefTarget(target) {\n        target.off(\"__xyChanged\" /* XY_CHANGED */, this.$targetXYChanged);\n        target.off(\"__sizeChanged\" /* SIZE_CHANGED */, this.$targetSizeChanged);\n        target.off(\"__sizeDelayChange\" /* SIZE_DELAY_CHANGE */, this.$targetSizeWillChange);\n    }\n    $targetXYChanged(evt) {\n        if (this.$owner.relations.$dealing != null ||\n            (this.$owner.group != null && this.$owner.group.$updating)) {\n            this.$targetX = this.$target.x;\n            this.$targetY = this.$target.y;\n            return;\n        }\n        this.$owner.relations.$dealing = this.$target;\n        let ox = this.$owner.x;\n        let oy = this.$owner.y;\n        let dx = this.$target.x - this.$targetX;\n        let dy = this.$target.y - this.$targetY;\n        this.$defs.forEach(info => {\n            this.applyOnXYChanged(info, dx, dy);\n        }, this);\n        this.$targetX = this.$target.x;\n        this.$targetY = this.$target.y;\n        if (ox != this.$owner.x || oy != this.$owner.y) {\n            ox = this.$owner.x - ox;\n            oy = this.$owner.y - oy;\n            this.$owner.updateGearFromRelations(1 /* XY */, ox, oy);\n            if (this.$owner.parent != null && this.$owner.parent.$transitions.length > 0) {\n                this.$owner.parent.$transitions.forEach(t => {\n                    t.updateFromRelations(this.$owner.id, ox, oy);\n                }, this);\n            }\n        }\n        this.$owner.relations.$dealing = null;\n    }\n    $targetSizeChanged(evt) {\n        if (this.$owner.relations.$dealing != null)\n            return;\n        this.$owner.relations.$dealing = this.$target;\n        let ox = this.$owner.x;\n        let oy = this.$owner.y;\n        let ow = this.$owner.$rawWidth;\n        let oh = this.$owner.$rawHeight;\n        this.$defs.forEach(info => {\n            this.applyOnSizeChanged(info);\n        }, this);\n        this.$targetWidth = this.$target.$rawWidth;\n        this.$targetHeight = this.$target.$rawHeight;\n        if (ox != this.$owner.x || oy != this.$owner.y) {\n            ox = this.$owner.x - ox;\n            oy = this.$owner.y - oy;\n            this.$owner.updateGearFromRelations(1 /* XY */, ox, oy);\n            if (this.$owner.parent != null && this.$owner.parent.$transitions.length > 0) {\n                this.$owner.parent.$transitions.forEach(t => {\n                    t.updateFromRelations(this.$owner.id, ox, oy);\n                }, this);\n            }\n        }\n        if (ow != this.$owner.$rawWidth || oh != this.$owner.$rawHeight) {\n            ow = this.$owner.$rawWidth - ow;\n            oh = this.$owner.$rawHeight - oh;\n            this.$owner.updateGearFromRelations(2 /* Size */, ow, oh);\n        }\n        this.$owner.relations.$dealing = null;\n    }\n    $targetSizeWillChange(evt) {\n        this.$owner.relations.sizeDirty = true;\n    }\n}\n\nclass Relations {\n    constructor(owner) {\n        this.sizeDirty = false;\n        this.$owner = owner;\n        this.$items = [];\n    }\n    add(target, relationType, usePercent = false) {\n        let length = this.$items.length;\n        for (let i = 0; i < length; i++) {\n            let item = this.$items[i];\n            if (item.target == target) {\n                item.add(relationType, usePercent);\n                return;\n            }\n        }\n        let newItem = new RelationItem(this.$owner);\n        newItem.target = target;\n        newItem.add(relationType, usePercent);\n        this.$items.push(newItem);\n    }\n    addItems(target, sidePairs) {\n        let arr = sidePairs.split(',');\n        let s;\n        let usePercent;\n        for (let i = 0; i < 2; i++) {\n            s = arr[i];\n            if (!s)\n                continue;\n            if (s.charAt(s.length - 1) == '%') {\n                s = s.substr(0, s.length - 1);\n                usePercent = true;\n            }\n            else\n                usePercent = false;\n            if (s.indexOf('-') == -1)\n                s = `${s}-${s}`;\n            let t = Relations.RELATION_NAMES.indexOf(s);\n            if (t == -1)\n                throw new Error('Invalid relation type');\n            this.add(target, t, usePercent);\n        }\n    }\n    remove(target, relationType = 0) {\n        let cnt = this.$items.length;\n        let i = 0;\n        while (i < cnt) {\n            let item = this.$items[i];\n            if (item.target == target) {\n                item.remove(relationType);\n                if (item.isEmpty) {\n                    item.dispose();\n                    this.$items.splice(i, 1);\n                    cnt--;\n                }\n                else\n                    i++;\n            }\n            else\n                i++;\n        }\n    }\n    contains(target) {\n        let length = this.$items.length;\n        for (let i = 0; i < length; i++) {\n            if (this.$items[i].target == target)\n                return true;\n        }\n        return false;\n    }\n    clearFor(target) {\n        let cnt = this.$items.length;\n        let i = 0;\n        while (i < cnt) {\n            let item = this.$items[i];\n            if (item.target == target) {\n                item.dispose();\n                this.$items.splice(i, 1);\n                cnt--;\n            }\n            else\n                i++;\n        }\n    }\n    clearAll() {\n        this.$items.forEach(item => {\n            item.dispose();\n        }, this);\n        this.$items.length = 0;\n    }\n    copyFrom(source) {\n        this.clearAll();\n        source.$items.forEach(ri => {\n            let item = new RelationItem(this.$owner);\n            item.copyFrom(ri);\n            this.$items.push(item);\n        }, this);\n    }\n    dispose() {\n        this.clearAll();\n    }\n    onOwnerSizeChanged(dWidth, dHeight) {\n        if (this.$items.length <= 0)\n            return;\n        this.$items.forEach(item => {\n            item.applyOnSelfResized(dWidth, dHeight);\n        }, this);\n    }\n    ensureRelationsSizeCorrect() {\n        if (this.$items.length == 0)\n            return;\n        this.sizeDirty = false;\n        this.$items.forEach(item => {\n            item.target.ensureSizeCorrect();\n        }, this);\n    }\n    get empty() {\n        return this.$items.length == 0;\n    }\n    setup(xml) {\n        xml.children.forEach(cxml => {\n            if (cxml.nodeName != 'relation')\n                return;\n            let targetId;\n            let target;\n            targetId = cxml.attributes.target;\n            if (this.$owner.parent) {\n                if (targetId)\n                    target = this.$owner.parent.getChildById(targetId);\n                else\n                    target = this.$owner.parent;\n            }\n            else {\n                //call from the component's constructor\n                target = this.$owner.getChildById(targetId);\n            }\n            if (target)\n                this.addItems(target, cxml.attributes.sidePair);\n        }, this);\n    }\n}\nRelations.RELATION_NAMES = [\n    'left-left',\n    'left-center',\n    'left-right',\n    'center-center',\n    'right-left',\n    'right-center',\n    'right-right',\n    'top-top',\n    'top-middle',\n    'top-bottom',\n    'middle-middle',\n    'bottom-top',\n    'bottom-middle',\n    'bottom-bottom',\n    'width-width',\n    'height-height',\n    'leftext-left',\n    'leftext-right',\n    'rightext-left',\n    'rightext-right',\n    'topext-top',\n    'topext-bottom',\n    'bottomext-top',\n    'bottomext-bottom' //23\n];\n\nlet isColorGear = function (obj) {\n    return obj && \"color\" in obj;\n};\n\nclass GearColor extends GearBase {\n    constructor(owner) {\n        super(owner);\n        this.$default = '#ffffff';\n    }\n    init() {\n        this.$default = this.$owner['color'];\n        this.$storage = {};\n    }\n    addStatus(pageId, value) {\n        if (value == '-')\n            return;\n        let col = value;\n        if (pageId == null)\n            this.$default = col;\n        else\n            this.$storage[pageId] = col;\n    }\n    apply() {\n        this.$owner.$gearLocked = true;\n        let data = this.$storage[this.$controller.selectedPageId];\n        if (data != undefined)\n            this.$owner['color'] = StringUtil.HEX2RGB(data);\n        else\n            this.$owner['color'] = StringUtil.HEX2RGB(this.$default);\n        this.$owner.$gearLocked = false;\n    }\n    updateState() {\n        if (this.$controller == null || this.$owner.$gearLocked || this.$owner.$inProgressBuilding)\n            return;\n        this.$storage[this.$controller.selectedPageId] = this.$owner['color'];\n    }\n}\n\nlet isAnimationGear = function (obj) {\n    return obj && \"playing\" in obj && \"frame\" in obj;\n};\n\nclass GearAnimation extends GearBase {\n    constructor(owner) {\n        super(owner);\n    }\n    init() {\n        this.$default = new GearAnimationValue(this.$owner['playing'], this.$owner['frame']);\n        this.$storage = {};\n    }\n    addStatus(pageId, value) {\n        if (value == '-')\n            return;\n        let gv;\n        if (pageId == null)\n            gv = this.$default;\n        else {\n            gv = new GearAnimationValue();\n            this.$storage[pageId] = gv;\n        }\n        let arr = value.split(',');\n        gv.frame = parseInt(arr[0]);\n        gv.playing = arr[1] == 'p';\n    }\n    apply() {\n        this.$owner.$gearLocked = true;\n        let gv = this.$storage[this.$controller.selectedPageId];\n        if (!gv)\n            gv = this.$default;\n        this.$owner['frame'] = gv.frame;\n        this.$owner['playing'] = gv.playing;\n        this.$owner.$gearLocked = false;\n    }\n    updateState() {\n        if (this.$controller == null || this.$owner.$gearLocked || this.$owner.$inProgressBuilding)\n            return;\n        let gv = this.$storage[this.$controller.selectedPageId];\n        if (!gv) {\n            gv = new GearAnimationValue();\n            this.$storage[this.$controller.selectedPageId] = gv;\n        }\n        gv.frame = this.$owner['frame'];\n        gv.playing = this.$owner['playing'];\n    }\n}\nclass GearAnimationValue {\n    constructor(playing = true, frame = 0) {\n        this.playing = playing;\n        this.frame = frame;\n    }\n}\n\nclass Sprite extends createjs.DisplayObject {\n    constructor() {\n        super();\n        this.$tint = '#fff';\n        this.$isTrim = false;\n    }\n    get tint() {\n        return this.$tint;\n    }\n    set tint(v) {\n        this.$tint = v;\n        let rgb = v.split(',');\n        this.filters = [\n            new createjs.ColorFilter(+rgb[0] / 255, +rgb[1] / 255, +rgb[2] / 255, 1, 0, 0, 0, 1)\n        ];\n    }\n    set sourceRect(rect) {\n        this.$sourceRect = rect;\n    }\n    get sourceRect() {\n        return this.$sourceRect;\n    }\n    set textureRect(rect) {\n        this.$textureRect = rect;\n    }\n    get textureRect() {\n        return this.$textureRect;\n    }\n    isVisible() {\n        var hasContent = this.cacheCanvas ||\n            (this.texture &&\n                (this.texture['naturalWidth'] ||\n                    this.texture['getContext'] ||\n                    this.texture['readyState'] >= 2));\n        return !!(this.visible && this.alpha > 0 && this.scaleX != 0 && this.scaleY != 0 && hasContent);\n    }\n    getBounds() {\n        var rect = super.getBounds();\n        if (rect) {\n            return rect;\n        }\n        var texture = this.texture, o = this.sourceRect || texture;\n        var hasContent = texture && (texture['naturalWidth'] || texture['getContext'] || texture['readyState'] >= 2);\n        return hasContent ? this.sourceRect.setValues(0, 0, o.width, o.height) : null;\n    }\n    destroy() {\n        //todo\n    }\n}\nSprite.$cachedTexturePool = {};\n\nclass GearIcon extends GearBase {\n    constructor(owner) {\n        super(owner);\n    }\n    init() {\n        this.$default = this.$owner.icon;\n        this.$storage = {};\n    }\n    addStatus(pageId, value) {\n        if (pageId == null)\n            this.$default = value;\n        else\n            this.$storage[pageId] = value;\n    }\n    apply() {\n        this.$owner.$gearLocked = true;\n        let data = this.$storage[this.$controller.selectedPageId];\n        if (data != undefined)\n            this.$owner.icon = data;\n        else\n            this.$owner.icon = this.$default;\n        this.$owner.$gearLocked = false;\n    }\n    updateState() {\n        if (this.$controller == null || this.$owner.$gearLocked || this.$owner.$inProgressBuilding)\n            return;\n        this.$storage[this.$controller.selectedPageId] = this.$owner.icon;\n    }\n}\n\nclass GearText extends GearBase {\n    constructor(owner) {\n        super(owner);\n    }\n    init() {\n        this.$default = this.$owner.text;\n        this.$storage = {};\n    }\n    addStatus(pageId, value) {\n        if (pageId == null)\n            this.$default = value;\n        else\n            this.$storage[pageId] = value;\n    }\n    apply() {\n        this.$owner.$gearLocked = true;\n        let data = this.$storage[this.$controller.selectedPageId];\n        if (data != undefined)\n            this.$owner.text = data;\n        else\n            this.$owner.text = this.$default;\n        this.$owner.$gearLocked = false;\n    }\n    updateState() {\n        if (this.$controller == null || this.$owner.$gearLocked || this.$owner.$inProgressBuilding)\n            return;\n        this.$storage[this.$controller.selectedPageId] = this.$owner.text;\n    }\n}\n\nclass GObject extends createjs.EventDispatcher {\n    constructor() {\n        super();\n        this.$x = 0;\n        this.$y = 0;\n        this.$width = 0;\n        this.$height = 0;\n        this.$alpha = 1;\n        this.$rotation = 0;\n        this.$visible = true;\n        this.$touchable = true;\n        this.$grayed = false;\n        this.$draggable = false;\n        this.$scaleX = 1;\n        this.$scaleY = 1;\n        this.$skewX = 0;\n        this.$skewY = 0;\n        this.$pivot = new createjs.Point();\n        this.$pivotAsAnchor = false;\n        this.$pivotOffset = new createjs.Point();\n        this.$sortingOrder = 0;\n        this.$internalVisible = true;\n        this.$focusable = false;\n        this.$pixelSnapping = false;\n        this.$handlingController = false;\n        this.$lastColorComponents = null;\n        this.$displayEventMap = {};\n        /**@internal */\n        this.$rawWidth = 0;\n        /**@internal */\n        this.$rawHeight = 0;\n        /**@internal */\n        this.$initWidth = 0;\n        /**@internal */\n        this.$initHeight = 0;\n        this.$sourceWidth = 0;\n        this.$sourceHeight = 0;\n        this.$id = `${GObject.gInstanceCounter++}`;\n        this.$name = '';\n        this.createDisplayObject();\n        this.$relations = new Relations(this);\n        this.$gears = [];\n        this.$touchable = true;\n    }\n    get id() {\n        return this.$id;\n    }\n    get name() {\n        return this.$name;\n    }\n    set name(value) {\n        this.$name = value;\n    }\n    get x() {\n        return this.$x;\n    }\n    set x(value) {\n        this.setXY(value, this.$y);\n    }\n    get y() {\n        return this.$y;\n    }\n    set y(value) {\n        this.setXY(this.$x, value);\n    }\n    setXY(xv, yv) {\n        if (this.$x != xv || this.$y != yv) {\n            this.$x = xv;\n            this.$y = yv;\n            this.handleXYChanged();\n            this.updateGear(1 /* XY */);\n            if (this.$parent) {\n                this.$parent.setBoundsChangedFlag();\n                let evt = new createjs.Event(\"__xyChanged\" /* XY_CHANGED */, true, false);\n                this.$displayObject.dispatchEvent(evt, this);\n            }\n            if (GObject.draggingObject == this && !GObject.sUpdatingWhileDragging)\n                this.localToGlobalRect(0, 0, this.width, this.height, GObject.sGlobalRect);\n        }\n    }\n    get pixelSnapping() {\n        return this.$pixelSnapping;\n    }\n    set pixelSnapping(value) {\n        if (this.$pixelSnapping != value) {\n            this.$pixelSnapping = value;\n            this.handleXYChanged();\n        }\n    }\n    center(restraint = false) {\n        let r;\n        if (this.$parent != null)\n            r = this.parent;\n        else\n            r = Decls$1.GRoot.inst;\n        this.setXY((r.width - this.width) / 2, (r.height - this.height) / 2);\n        if (restraint) {\n            this.addRelation(r, 3 /* Center_Center */);\n            this.addRelation(r, 10 /* Middle_Middle */);\n        }\n    }\n    get width() {\n        this.ensureSizeCorrect();\n        if (this.$relations.sizeDirty)\n            this.$relations.ensureRelationsSizeCorrect();\n        return this.$width;\n    }\n    set width(value) {\n        this.setSize(value, this.$rawHeight);\n    }\n    get height() {\n        this.ensureSizeCorrect();\n        if (this.$relations.sizeDirty)\n            this.$relations.ensureRelationsSizeCorrect();\n        return this.$height;\n    }\n    set height(value) {\n        this.setSize(this.$rawWidth, value);\n    }\n    setSize(wv, hv, ignorePivot = false) {\n        if (this.$rawWidth != wv || this.$rawHeight != hv) {\n            this.$rawWidth = wv;\n            this.$rawHeight = hv;\n            wv = Math.max(0, wv);\n            hv = Math.max(0, hv);\n            let diffw = wv - this.mapPivotWidth(1);\n            let diffh = hv - this.mapPivotHeight(1);\n            this.$width = wv;\n            this.$height = hv;\n            this.handleSizeChanged();\n            if (this.$pivot.x != 0 || this.$pivot.y != 0) {\n                if (!this.$pivotAsAnchor) {\n                    if (!ignorePivot)\n                        this.setXY(this.x - this.$pivot.x * diffw, this.y - this.$pivot.y * diffh);\n                    this.updatePivotOffset();\n                }\n                else {\n                    this.applyPivot();\n                }\n            }\n            this.updateGear(2 /* Size */);\n            if (this.$parent) {\n                this.$relations.onOwnerSizeChanged(diffw, diffh);\n                this.$parent.setBoundsChangedFlag();\n            }\n            let evt = new createjs.Event(\"__sizeChanged\" /* SIZE_CHANGED */, true, false);\n            this.$displayObject.dispatchEvent(evt, this);\n        }\n    }\n    ensureSizeCorrect() { }\n    get sourceHeight() {\n        return this.$sourceHeight;\n    }\n    get sourceWidth() {\n        return this.$sourceWidth;\n    }\n    get initHeight() {\n        return this.$initHeight;\n    }\n    get initWidth() {\n        return this.$initWidth;\n    }\n    get actualWidth() {\n        return this.width * Math.abs(this.$scaleX);\n    }\n    get actualHeight() {\n        return this.height * Math.abs(this.$scaleY);\n    }\n    get scaleX() {\n        return this.$scaleX;\n    }\n    set scaleX(value) {\n        this.setScale(value, this.$scaleY);\n    }\n    get scaleY() {\n        return this.$scaleY;\n    }\n    set scaleY(value) {\n        this.setScale(this.$scaleX, value);\n    }\n    setScale(sx, sy) {\n        if (this.$scaleX != sx || this.$scaleY != sy) {\n            this.$scaleX = sx;\n            this.$scaleY = sy;\n            this.handleScaleChanged();\n            this.applyPivot();\n            this.updateGear(2 /* Size */);\n        }\n    }\n    get skewX() {\n        return this.$skewX;\n    }\n    set skewX(value) {\n        this.setSkew(value, this.$skewY);\n    }\n    get skewY() {\n        return this.$skewY;\n    }\n    set skewY(value) {\n        this.setSkew(this.$skewX, value);\n    }\n    setSkew(xv, yv) {\n        if (this.$skewX != xv || this.$skewY != yv) {\n            this.$skewX = xv;\n            this.$skewY = yv;\n            this.$displayObject.skewX = xv;\n            this.$displayObject.skewY = yv;\n            this.applyPivot();\n        }\n    }\n    mapPivotWidth(scale) {\n        return scale * this.$width;\n    }\n    mapPivotHeight(scale) {\n        return scale * this.$height;\n    }\n    get pivotX() {\n        return this.$pivot.x;\n    }\n    get pivotY() {\n        return this.$pivot.y;\n    }\n    set pivotX(value) {\n        this.setPivot(value, this.pivotY);\n    }\n    set pivotY(value) {\n        this.setPivot(this.pivotX, value);\n    }\n    setPivot(xv, yv, asAnchor = false) {\n        if (this.$pivot.x != xv || this.$pivot.y != yv || this.$pivotAsAnchor != asAnchor) {\n            this.$pivot.setValues(xv, yv);\n            this.$pivotAsAnchor = asAnchor;\n            this.updatePivotOffset();\n            this.handleXYChanged();\n        }\n    }\n    internalSetPivot(xv, yv, asAnchor) {\n        this.$pivot.setValues(xv, yv);\n        this.$pivotAsAnchor = asAnchor;\n        if (asAnchor)\n            this.handleXYChanged();\n    }\n    updatePivotOffset() {\n        let transform = this.$displayObject.getMatrix();\n        if (this.$pivot.x != 0 || (this.$pivot.y != 0 && transform)) {\n            let vx = this.mapPivotWidth(this.$pivot.x), vy = this.mapPivotHeight(this.$pivot.y);\n            GObject.sHelperPoint.setValues(vx, vy);\n            let p = transform.transformPoint(GObject.sHelperPoint.x, GObject.sHelperPoint.y);\n            (p.x -= transform.tx), (p.y -= transform.ty);\n            let offsetX = this.$pivot.x * this.$width - p.x;\n            let offsetY = this.$pivot.y * this.$height - p.y;\n            this.$pivotOffset.setValues(offsetX, offsetY);\n        }\n        else\n            this.$pivotOffset.setValues(0, 0);\n    }\n    applyPivot() {\n        if (this.$pivot.x != 0 || this.$pivot.y != 0) {\n            this.updatePivotOffset();\n            this.handleXYChanged();\n        }\n    }\n    get touchable() {\n        return this.$touchable;\n    }\n    set touchable(value) {\n        this.$touchable = value;\n        if (this.$touchable) {\n            this.$displayObject.mouseEnabled = true;\n        }\n        else {\n            this.$displayObject.mouseEnabled = false;\n        }\n    }\n    get grayed() {\n        return this.$grayed;\n    }\n    set grayed(value) {\n        if (this.$grayed != value) {\n            this.$grayed = value;\n            this.handleGrayedChanged();\n            this.updateGear(3 /* Look */);\n        }\n    }\n    get enabled() {\n        return !this.$grayed && this.$touchable;\n    }\n    set enabled(value) {\n        this.grayed = !value;\n        this.touchable = value;\n    }\n    get rotation() {\n        return this.$rotation;\n    }\n    set rotation(value) {\n        if (this.$rotation != value) {\n            this.$rotation = value;\n            if (this.$displayObject)\n                this.$displayObject.rotation = value;\n            this.applyPivot();\n            this.updateGear(3 /* Look */);\n        }\n    }\n    get normalizeRotation() {\n        let rot = this.$rotation % 360;\n        if (rot > 180)\n            rot -= 360;\n        else if (rot < -180)\n            rot += 360;\n        return rot;\n    }\n    get alpha() {\n        return this.$alpha;\n    }\n    set alpha(value) {\n        if (this.$alpha != value) {\n            this.$alpha = value;\n            this.updateAlpha();\n        }\n    }\n    updateAlpha() {\n        if (this.$displayObject)\n            this.$displayObject.alpha = this.$alpha;\n        this.updateGear(3 /* Look */);\n    }\n    get visible() {\n        return this.$visible;\n    }\n    set visible(value) {\n        if (this.$visible != value) {\n            this.$visible = value;\n            if (this.$displayObject)\n                this.$displayObject.visible = this.$visible;\n            if (this.$parent) {\n                this.$parent.childStateChanged(this);\n                this.$parent.setBoundsChangedFlag();\n            }\n            let event = new createjs.Event(\"__visibleChanged\" /* VISIBLE_CHANGED */, true, false);\n            event.data = { visible: this.$visible };\n            this.dispatchEvent(event, this);\n        }\n    }\n    /**@internal */\n    set internalVisible(value) {\n        if (value != this.$internalVisible) {\n            this.$internalVisible = value;\n            if (this.$parent)\n                this.$parent.childStateChanged(this);\n        }\n    }\n    /**@internal */\n    get internalVisible() {\n        return this.$internalVisible;\n    }\n    get finalVisible() {\n        return this.$visible && this.$internalVisible && (!this.$group || this.$group.finalVisible);\n    }\n    get sortingOrder() {\n        return this.$sortingOrder;\n    }\n    set sortingOrder(value) {\n        if (value < 0)\n            value = 0;\n        if (this.$sortingOrder != value) {\n            let old = this.$sortingOrder;\n            this.$sortingOrder = value;\n            if (this.$parent != null)\n                this.$parent.childSortingOrderChanged(this, old, this.$sortingOrder);\n        }\n    }\n    get focusable() {\n        return this.$focusable;\n    }\n    set focusable(value) {\n        this.$focusable = value;\n    }\n    get focused() {\n        return Decls$1.GRoot.inst.focus == this;\n    }\n    requestFocus() {\n        let p = this;\n        while (p && !p.$focusable)\n            p = p.parent;\n        if (p != null)\n            Decls$1.GRoot.inst.focus = p;\n    }\n    get tooltips() {\n        return this.$tooltips;\n    }\n    set tooltips(value) {\n        this.$tooltips = value;\n    }\n    get blendMode() {\n        if (this.$displayObject && this.$displayObject instanceof Sprite)\n            return BlendModeMap[this.$displayObject.compositeOperation] || 'None';\n        return BlendModeMap[0]; //Normal\n    }\n    set blendMode(value) {\n        if (!value || !value.length || !this.$displayObject || !(this.$displayObject instanceof Sprite))\n            return;\n        for (let i = 0; i < BlendModeMap.length; i++) {\n            if (BlendModeMap[i].toLowerCase() === value.toLowerCase()) {\n                this.$displayObject.compositeOperation = BlendModeMap[i];\n                return;\n            }\n        }\n    }\n    get filters() {\n        return this.$displayObject.filters;\n    }\n    set filters(value) {\n        this.$displayObject.filters = value;\n    }\n    get inContainer() {\n        return this.$displayObject.parent != null;\n    }\n    static isDisplayObjectOnStage(display) {\n        if (!display || !display.parent)\n            return false;\n        let p = display;\n        while (p != null) {\n            if (p == Decls$1.GRoot.inst.nativeStage)\n                return true;\n            p = p.parent;\n        }\n        return false;\n    }\n    get onStage() {\n        return GObject.isDisplayObjectOnStage(this.$displayObject);\n    }\n    get resourceURL() {\n        if (this.packageItem != null)\n            return `ui://${this.packageItem.owner.id}${this.packageItem.id}`;\n        else\n            return null;\n    }\n    set group(value) {\n        this.$group = value;\n    }\n    get group() {\n        return this.$group;\n    }\n    getGear(index) {\n        let gear = this.$gears[index];\n        if (gear == null) {\n            switch (index) {\n                case 0 /* Display */:\n                    gear = new GearDisplay(this);\n                    break;\n                case 1 /* XY */:\n                    gear = new GearXY(this);\n                    break;\n                case 2 /* Size */:\n                    gear = new GearSize(this);\n                    break;\n                case 3 /* Look */:\n                    gear = new GearLook(this);\n                    break;\n                case 4 /* Color */:\n                    if (isColorGear(this))\n                        gear = new GearColor(this);\n                    else\n                        throw new Error(`Invalid component type to add GearColor feature, please check the component named ${this.$name} in the Editor.`);\n                    break;\n                case 5 /* Animation */:\n                    if (isAnimationGear(this))\n                        gear = new GearAnimation(this);\n                    else\n                        throw new Error(`Invalid component type to add GearAnimation feature, please check the component named ${this.$name} in the Editor.`);\n                    break;\n                case 6 /* Text */:\n                    gear = new GearText(this);\n                    break;\n                case 7 /* Icon */:\n                    gear = new GearIcon(this);\n                    break;\n                default:\n                    throw new Error('FGUI: invalid gear type');\n            }\n            this.$gears[index] = gear;\n        }\n        return gear;\n    }\n    updateGear(index) {\n        if (this.$gears[index] != null)\n            this.$gears[index].updateState();\n    }\n    updateGearFromRelations(index, dx, dy) {\n        if (this.$gears[index] != null)\n            this.$gears[index].updateFromRelations(dx, dy);\n    }\n    hasGearController(index, c) {\n        return this.$gears[index] && this.$gears[index].controller == c;\n    }\n    /**@internal */\n    lockGearDisplay() {\n        let g = this.$gears[0];\n        if (g && g.controller) {\n            let ret = g.lock();\n            this.checkGearVisible();\n            return ret;\n        }\n        else\n            return 0;\n    }\n    /**@internal */\n    releaseGearDisplay(token) {\n        let g = this.$gears[0];\n        if (g && g.controller) {\n            g.release(token);\n            this.checkGearVisible();\n        }\n    }\n    checkGearVisible() {\n        if (this.$handlingController)\n            return;\n        let g = this.$gears[0];\n        let v = !g || g.connected;\n        if (v != this.$internalVisible) {\n            this.$internalVisible = v;\n            if (this.$parent)\n                this.$parent.childStateChanged(this);\n        }\n    }\n    get gearXY() {\n        return this.getGear(1 /* XY */);\n    }\n    get gearSize() {\n        return this.getGear(2 /* Size */);\n    }\n    get gearLook() {\n        return this.getGear(3 /* Look */);\n    }\n    get relations() {\n        return this.$relations;\n    }\n    addRelation(target, relationType, usePercent = false) {\n        this.$relations.add(target, relationType, usePercent);\n    }\n    removeRelation(target, relationType = 0) {\n        this.$relations.remove(target, relationType);\n    }\n    get displayObject() {\n        return this.$displayObject;\n    }\n    createDisplayObject() { }\n    setDisplayObject(value) {\n        this.$displayObject = value;\n    }\n    get parent() {\n        return this.$parent;\n    }\n    set parent(val) {\n        this.$parent = val;\n    }\n    removeFromParent() {\n        if (this.$parent)\n            this.$parent.removeChild(this);\n    }\n    /** @virtual */\n    get text() {\n        return null;\n    }\n    /** @virtual */\n    set text(value) { }\n    /** @virtual */\n    get icon() {\n        return null;\n    }\n    /** @virtual */\n    set icon(value) { }\n    dispose() {\n        this.removeFromParent();\n        this.$relations.dispose();\n        this.removeAllListeners();\n        this.$mouseMoveEvent = Decls$1.GRoot.inst.nativeStage.off(InteractiveEvents.Move, this.$moving);\n        this.$mouseUpEvent = Decls$1.GRoot.inst.nativeStage.off(InteractiveEvents.Up, this.$end);\n        this.$mouseMove2Event = Decls$1.GRoot.inst.nativeStage.off(InteractiveEvents.Move, this.$moving2);\n        this.$mouseUp2Event = Decls$1.GRoot.inst.nativeStage.off(InteractiveEvents.Up, this.$end2);\n        // this.$displayObject.destroy();  //cjs not the destroy API\n    }\n    click(listener, thisObj) {\n        this.on(InteractiveEvents.Click, listener, thisObj);\n    }\n    removeClick(listener) {\n        this.off(InteractiveEvents.Click, listener);\n    }\n    hasClick(fn) {\n        return this.hasListener(InteractiveEvents.Click);\n    }\n    on(type, listener, thisObject, once = false) {\n        if (type == null)\n            return this;\n        let fn = this.$displayObject.on(type, listener, thisObject, once);\n        this.$displayEventMap[type] = fn;\n        return this;\n    }\n    off(type, listener) {\n        if (this.$displayObject.hasEventListener(type)) {\n            this.$displayObject.off(type, this.$displayEventMap[type]);\n        }\n    }\n    once(type, listener, thisObject) {\n        if (type == null)\n            return this;\n        this.on(type, listener, thisObject, true);\n    }\n    hasListener(event) {\n        //do we need to also check the context?\n        // super.hasEventListener(event)\n        return this.$displayObject.hasEventListener(event);\n    }\n    dispatchEvent(event, ...args) {\n        // super.dispatchEvent(event, args)\n        if (!args || args.length <= 0)\n            args = [event];\n        else\n            args.unshift(event);\n        return this.$displayObject.dispatchEvent(event, this.$displayObject);\n    }\n    removeAllListeners(type) {\n        this.removeAllEventListeners(type);\n    }\n    get draggable() {\n        return this.$draggable;\n    }\n    set draggable(value) {\n        if (this.$draggable != value) {\n            this.$draggable = value;\n            this.initDrag();\n        }\n    }\n    get dragBounds() {\n        return this.$dragBounds;\n    }\n    set dragBounds(value) {\n        this.$dragBounds = value;\n    }\n    startDrag(touchPointID = -1) {\n        if (!this.onStage)\n            return;\n        this.dragBegin();\n    }\n    stopDrag() {\n        this.dragEnd();\n    }\n    get dragging() {\n        return GObject.draggingObject == this;\n    }\n    localToGlobal(ax = 0, ay = 0, resultPoint) {\n        if (this.$pivotAsAnchor) {\n            ax += this.$pivot.x * this.$width;\n            ay += this.$pivot.y * this.$height;\n        }\n        if (!resultPoint)\n            resultPoint = GObject.sHelperPoint;\n        resultPoint.x = ax;\n        resultPoint.y = ay;\n        return this.$displayObject.localToGlobal(resultPoint.x, resultPoint.y);\n    }\n    globalToLocal(ax = 0, ay = 0, resultPoint) {\n        if (!resultPoint)\n            resultPoint = GObject.sHelperPoint;\n        resultPoint.setValues(ax, ay);\n        resultPoint = this.$displayObject.globalToLocal(resultPoint.x, resultPoint.y);\n        if (this.$pivotAsAnchor) {\n            resultPoint.x -= this.$pivot.x * this.$width;\n            resultPoint.y -= this.$pivot.y * this.$height;\n        }\n        return resultPoint;\n    }\n    localToRoot(ax = 0, ay = 0, resultPoint) {\n        let pt = this.localToGlobal(ax, ay, resultPoint);\n        pt.x /= Decls$1.GRoot.inst.contentScaleFactor;\n        pt.y /= Decls$1.GRoot.inst.contentScaleFactor;\n        return pt;\n    }\n    rootToLocal(ax = 0, ay = 0, resultPoint) {\n        ax *= Decls$1.GRoot.inst.contentScaleFactor;\n        ay *= Decls$1.GRoot.inst.contentScaleFactor;\n        return this.globalToLocal(ax, ay, resultPoint);\n    }\n    localToGlobalRect(ax = 0, ay = 0, aWidth = 0, aHeight = 0, resultRect) {\n        if (resultRect == null)\n            resultRect = GObject.sDragHelperRect;\n        let pt = this.localToGlobal(ax, ay);\n        resultRect.x = pt.x;\n        resultRect.y = pt.y;\n        resultRect.width = aWidth;\n        resultRect.height = aHeight;\n        return resultRect;\n    }\n    globalToLocalRect(ax = 0, ay = 0, aWidth = 0, aHeight = 0, resultRect) {\n        if (resultRect == null)\n            resultRect = GObject.sDragHelperRect;\n        let pt = this.globalToLocal(ax, ay);\n        resultRect.x = pt.x;\n        resultRect.y = pt.y;\n        resultRect.width = aWidth;\n        resultRect.height = aHeight;\n        return resultRect;\n    }\n    handleControllerChanged(c) {\n        this.$handlingController = true;\n        for (let i = 0; i < 8 /* Count */; i++) {\n            let gear = this.$gears[i];\n            if (gear != null && gear.controller == c)\n                gear.apply();\n        }\n        this.$handlingController = false;\n        this.checkGearVisible();\n    }\n    switchDisplayObject(newObj) {\n        if (newObj == this.$displayObject)\n            return;\n        let old = this.$displayObject;\n        if (this.inContainer) {\n            let i = this.$displayObject.parent.getChildIndex(this.$displayObject);\n            this.$displayObject.parent.addChildAt(newObj, i);\n            this.$displayObject.parent.removeChild(this.$displayObject);\n        }\n        this.$displayObject = newObj;\n        this.$displayObject.x = old.x;\n        this.$displayObject.y = old.y;\n        this.$displayObject.rotation = old.rotation;\n        this.$displayObject.alpha = old.alpha;\n        this.$displayObject.visible = old.visible;\n        this.$displayObject.scaleX = old.scaleX;\n        this.$displayObject.scaleY = old.scaleY;\n        this.$displayObject.mouseEnabled = old.mouseEnabled;\n    }\n    handleXYChanged() {\n        if (this.$displayObject) {\n            let xv = this.$x;\n            let yv = this.$y;\n            if (this.$pivotAsAnchor) {\n                xv -= this.$pivot.x * this.$width;\n                yv -= this.$pivot.y * this.$height;\n            }\n            if (this.$pixelSnapping) {\n                xv = Math.round(xv);\n                yv = Math.round(yv);\n            }\n            this.$displayObject.x = xv + this.$pivotOffset.x;\n            this.$displayObject.y = yv + this.$pivotOffset.y;\n        }\n    }\n    handleSizeChanged() { }\n    handleScaleChanged() {\n        if (this.$displayObject)\n            this.$displayObject.scaleX = this.$scaleX;\n        this.$displayObject.scaleY = this.$scaleY;\n    }\n    get colorFilter() {\n        if (this.$colorFilter)\n            return this.$colorFilter;\n        /**\n         * todo\n         */\n        var matrix = new createjs.ColorMatrix();\n        this.$colorFilter = new createjs.ColorMatrixFilter(matrix);\n        if (this.$displayObject) {\n            let a = this.$displayObject.filters || [];\n            a.push(this.$colorFilter);\n            this.$displayObject.filters = a;\n        }\n        return this.$colorFilter;\n    }\n    /**\n     * update color appearance\n     * @param brightness value of the brigthness (-1 - 1, where -1 is black)\n     * @param contrast value of the contrast (-1 - 1)\n     * @param saturate The saturation amount (-1 - 1)\n     * @param hue The hue property of the color in degress (-1 - 1, where 1 is 360deg)\n     */\n    updateColorComponents(brightness, contrast, saturate, hue) {\n        var matrix = new createjs.ColorMatrix()\n            .adjustBrightness(brightness)\n            .adjustContrast(contrast * 100)\n            .adjustHue(hue * 180)\n            .adjustSaturation(saturate * 100);\n        this.$displayObject.filters = [new createjs.ColorMatrixFilter(matrix)];\n        this.$displayObject.cache(0, 0, this.$width, this.$height);\n        if (!this.$lastColorComponents)\n            this.$lastColorComponents = [];\n        this.$lastColorComponents.length = 0;\n        this.$lastColorComponents.push(brightness, contrast, saturate, hue);\n    }\n    handleGrayedChanged() {\n        if (this.$displayObject) {\n            if (this.$grayed) {\n                var Grayscale = new createjs.ColorMatrixFilter([\n                    0.3, 0.3, 0.3, 0, 0,\n                    0.3, 0.3, 0.3, 0, 0,\n                    0.3, 0.3, 0.3, 0, 0,\n                    0, 0, 0, 1, 0 // alpha\n                ]);\n                this.$displayObject.filters = [Grayscale];\n                this.$displayObject.cache(0, 0, this.$width, this.$height);\n            }\n            else {\n                if (this.$lastColorComponents && this.$lastColorComponents.length >= 4)\n                    this.updateColorComponents(this.$lastColorComponents[0], this.$lastColorComponents[1], this.$lastColorComponents[2], this.$lastColorComponents[3]);\n                else\n                    this.$displayObject.filters = [];\n            }\n        }\n    }\n    /**@internal */\n    constructFromResource() {\n    }\n    setupBeforeAdd(xml) {\n        let str;\n        let arr;\n        this.$id = xml.attributes.id;\n        this.$name = xml.attributes.name;\n        str = xml.attributes.xy;\n        arr = str.split(',');\n        this.setXY(parseInt(arr[0]), parseInt(arr[1]));\n        str = xml.attributes.size;\n        if (str) {\n            arr = str.split(',');\n            this.$initWidth = parseInt(arr[0]);\n            this.$initHeight = parseInt(arr[1]);\n            this.setSize(this.$initWidth, this.$initHeight, true);\n        }\n        str = xml.attributes.scale;\n        if (str) {\n            arr = str.split(',');\n            this.setScale(parseFloat(arr[0]), parseFloat(arr[1]));\n        }\n        str = xml.attributes.rotation;\n        if (str)\n            this.rotation = parseInt(str);\n        str = xml.attributes.skew;\n        if (str) {\n            arr = str.split(',');\n            this.setSkew(parseFloat(arr[0]), parseFloat(arr[1]));\n        }\n        str = xml.attributes.pivot;\n        if (str) {\n            arr = str.split(',');\n            let n1 = parseFloat(arr[0]), n2 = parseFloat(arr[1]);\n            str = xml.attributes.anchor;\n            this.setPivot(n1, n2, str == 'true');\n        }\n        str = xml.attributes.alpha;\n        if (str)\n            this.alpha = parseFloat(str);\n        if (xml.attributes.touchable == 'false')\n            this.touchable = false;\n        if (xml.attributes.visible == 'false')\n            this.visible = false;\n        if (xml.attributes.grayed == 'true')\n            this.grayed = true;\n        this.tooltips = xml.attributes.tooltips;\n        str = xml.attributes.blend;\n        if (str)\n            this.blendMode = str;\n        str = xml.attributes.filter;\n        if (str) {\n            switch (str) {\n                case 'color':\n                    str = xml.attributes.filterData;\n                    arr = str.split(',');\n                    this.updateColorComponents(parseFloat(arr[0]), parseFloat(arr[1]), parseFloat(arr[2]), parseFloat(arr[3]));\n                    break;\n            }\n        }\n    }\n    setupAfterAdd(xml) {\n        let str = xml.attributes.group;\n        if (str)\n            this.$group = this.$parent.getChildById(str);\n        let col = xml.children;\n        col.forEach(cxml => {\n            let index = GearXMLNodeNameMap[cxml.nodeName];\n            if (index != void 0)\n                this.getGear(index).setup(cxml);\n        }, this);\n    }\n    static castFromNativeObject(disp) {\n        if (isUIObject(disp))\n            return disp.UIOwner;\n        return null;\n    }\n    initDrag() {\n        if (this.$draggable)\n            this.on(InteractiveEvents.Down, this.$touchBegin, this);\n        else\n            this.off(InteractiveEvents.Down, this.$touchBegin);\n    }\n    dragBegin() {\n        if (GObject.draggingObject != null)\n            GObject.draggingObject.stopDrag();\n        GObject.sGlobalDragStart.x = Decls$1.GRoot.globalMouseStatus.mouseX;\n        GObject.sGlobalDragStart.y = Decls$1.GRoot.globalMouseStatus.mouseY;\n        this.localToGlobalRect(0, 0, this.width, this.height, GObject.sGlobalRect);\n        GObject.draggingObject = this;\n        this.$mouseMove2Event = Decls$1.GRoot.inst.nativeStage.on(InteractiveEvents.Move, this.$moving2, this);\n        this.$mouseUp2Event = Decls$1.GRoot.inst.nativeStage.on(InteractiveEvents.Up, this.$end2, this);\n    }\n    dragEnd() {\n        if (GObject.draggingObject == this) {\n            Decls$1.GRoot.inst.nativeStage.off(InteractiveEvents.Move, this.$mouseMove2Event);\n            Decls$1.GRoot.inst.nativeStage.off(InteractiveEvents.Up, this.$mouseUp2Event);\n            GObject.draggingObject = null;\n        }\n        GObject.$dragBeginCancelled = true;\n    }\n    reset() {\n        Decls$1.GRoot.inst.nativeStage.off(InteractiveEvents.Move, this.$mouseMoveEvent);\n        Decls$1.GRoot.inst.nativeStage.off(InteractiveEvents.Up, this.$mouseUpEvent);\n    }\n    $touchBegin(evt) {\n        if (this.$touchDownPoint == null)\n            this.$touchDownPoint = new createjs.Point();\n        this.$touchDownPoint.x = evt.stageX;\n        this.$touchDownPoint.y = evt.stageY;\n        this.$mouseMoveEvent = Decls$1.GRoot.inst.nativeStage.on(InteractiveEvents.Move, this.$moving, this);\n        this.$mouseUpEvent = Decls$1.GRoot.inst.nativeStage.on(InteractiveEvents.Up, this.$end, this);\n    }\n    $end(evt) {\n        this.reset();\n    }\n    $moving(evt) {\n        // console.log(\"moving\");\n        let sensitivity = UIConfig.touchDragSensitivity;\n        if (this.$touchDownPoint != null &&\n            Math.abs(this.$touchDownPoint.x - evt.stageX) < sensitivity &&\n            Math.abs(this.$touchDownPoint.y - evt.stageY) < sensitivity)\n            return;\n        this.reset();\n        GObject.$dragBeginCancelled = false;\n        let event = new createjs.Event(\"__dragStart\" /* START */, true, false);\n        event.data = { currentTarget: this.$displayObject };\n        this.$displayObject.dispatchEvent(event, this);\n        if (!GObject.$dragBeginCancelled)\n            //user may call obj.stopDrag in the DragStart event handler\n            this.dragBegin();\n    }\n    $moving2(evt) {\n        let xx = evt.stageX - GObject.sGlobalDragStart.x + GObject.sGlobalRect.x;\n        let yy = evt.stageY - GObject.sGlobalDragStart.y + GObject.sGlobalRect.y;\n        if (this.$dragBounds != null) {\n            let rect = Decls$1.GRoot.inst.localToGlobalRect(this.$dragBounds.x, this.$dragBounds.y, this.$dragBounds.width, this.$dragBounds.height, GObject.sDragHelperRect);\n            if (xx < rect.x)\n                xx = rect.x;\n            else if (xx + GObject.sGlobalRect.width > rect.x + rect.width) {\n                xx = rect.x + rect.width - GObject.sGlobalRect.width;\n                if (xx < rect.x)\n                    xx = rect.x;\n            }\n            if (yy < rect.y)\n                yy = rect.y;\n            else if (yy + GObject.sGlobalRect.height > rect.y + rect.height) {\n                yy = rect.y + rect.height - GObject.sGlobalRect.height;\n                if (yy < rect.y)\n                    yy = rect.y;\n            }\n        }\n        GObject.sUpdatingWhileDragging = true;\n        GObject.sHelperPoint.x = xx;\n        GObject.sHelperPoint.y = yy;\n        let pt = this.parent.globalToLocal(xx, yy, GObject.sHelperPoint);\n        this.setXY(Math.round(pt.x), Math.round(pt.y));\n        GObject.sUpdatingWhileDragging = false;\n        let currentTarget = this.$displayObject;\n        let event = new createjs.Event(\"__dragMoving\" /* MOVING */, true, false);\n        event.data = { currentTarget };\n        this.$displayObject.dispatchEvent(event, this);\n    }\n    $end2(evt) {\n        if (GObject.draggingObject == this) {\n            this.stopDrag();\n            let currentTarget = this.$displayObject;\n            let event = new createjs.Event(\"__dragEnd\" /* END */, true, false);\n            event.data = { currentTarget };\n            this.$displayObject.dispatchEvent(event, this);\n        }\n    }\n}\nGObject.gInstanceCounter = 0;\n//dragging\n//-------------------------------------------------------------------\nGObject.sGlobalDragStart = new createjs.Point();\nGObject.sGlobalRect = new createjs.Rectangle();\nGObject.sHelperPoint = new createjs.Point();\nGObject.sDragHelperRect = new createjs.Rectangle();\nlet Decls$1 = {};\n\nclass GGroup extends GObject {\n    createDisplayObject() {\n        let c = new UIContainer(this);\n        /**\n         * todo\n         */\n        // c.interactive = false;\n        c.mouseEnabled = false;\n        this.setDisplayObject(c);\n    }\n    updateBounds() {\n        if (this.$updating || !this.parent)\n            return;\n        let cnt = this.$parent.numChildren;\n        let i = 0;\n        let ax = Number.POSITIVE_INFINITY, ay = Number.POSITIVE_INFINITY;\n        let ar = Number.NEGATIVE_INFINITY, ab = Number.NEGATIVE_INFINITY;\n        this.$empty = true;\n        let child;\n        let tmp = 0;\n        for (i = 0; i < cnt; i++) {\n            child = this.$parent.getChildAt(i);\n            if (child.group == this) {\n                tmp = child.x;\n                if (tmp < ax)\n                    ax = tmp;\n                tmp = child.y;\n                if (tmp < ay)\n                    ay = tmp;\n                tmp = child.x + child.width;\n                if (tmp > ar)\n                    ar = tmp;\n                tmp = child.y + child.height;\n                if (tmp > ab)\n                    ab = tmp;\n                this.$empty = false;\n            }\n        }\n        this.$updating = true;\n        if (!this.$empty) {\n            this.setXY(ax, ay);\n            this.setSize(ar - ax, ab - ay);\n        }\n        else\n            this.setSize(0, 0);\n        this.$updating = false;\n    }\n    setXY(xv, yv) {\n        if (this.$x != xv || this.$y != yv) {\n            let dx = xv - this.$x;\n            let dy = yv - this.$y;\n            super.setXY(xv, yv);\n            this.moveChildren(dx, dy);\n        }\n    }\n    moveChildren(dx, dy) {\n        if (this.$updating || !this.$parent)\n            return;\n        this.$updating = true;\n        let cnt = this.$parent.numChildren;\n        let i = 0;\n        let child;\n        for (i = 0; i < cnt; i++) {\n            child = this.$parent.getChildAt(i);\n            if (child.group == this) {\n                child.setXY(child.x + dx, child.y + dy);\n            }\n        }\n        this.$updating = false;\n    }\n    updateAlpha() {\n        super.updateAlpha();\n        if (this.$inProgressBuilding)\n            return;\n        let cnt = this.$parent.numChildren;\n        let i;\n        let child;\n        for (i = 0; i < cnt; i++) {\n            child = this.$parent.getChildAt(i);\n            if (child.group == this)\n                child.alpha = this.alpha;\n        }\n    }\n}\n\nclass UISprite extends createjs.Shape {\n    constructor(owner) {\n        super();\n        this.UIOwner = owner;\n        this.mouseEnabled = false;\n        // this.interactive = false;\n        // this.interactiveChildren = false;\n    }\n}\n\nclass GGraph extends GObject {\n    constructor() {\n        super();\n        this.$type = 0;\n        this.$lineSize = 1;\n        this.$sides = 0;\n        this.$startAngle = 0;\n        this.$points = [];\n        this.$lineSize = 1;\n        this.$lineColor = '#000000';\n        this.$fillColor = '#FFFFFF';\n    }\n    drawRect(lineSize, lineColor, fillColor) {\n        this.$type = 1;\n        this.$lineSize = lineSize;\n        this.$lineColor = lineColor;\n        this.$fillColor = fillColor;\n        this.drawGraph();\n    }\n    drawEllipse(lineSize, lineColor, fillColor) {\n        this.$type = 2;\n        this.$lineSize = lineSize;\n        this.$lineColor = lineColor;\n        this.$fillColor = fillColor;\n        this.drawGraph();\n    }\n    get color() {\n        return this.$fillColor;\n    }\n    set color(value) {\n        this.$fillColor = value;\n        if (this.$type != 0)\n            this.drawGraph();\n    }\n    drawGraph() {\n        let shape = this.$displayObject;\n        let g = shape.graphics;\n        g.clear();\n        let w = this.width;\n        let h = this.height;\n        if (w == 0 || h == 0)\n            return;\n        g.beginStroke(this.$lineColor);\n        if (this.$lineSize == 0) {\n            g.setStrokeStyle(0.1); // see https://github.com/CreateJS/EaselJS/issues/734\n        }\n        else {\n            g.setStrokeStyle(this.$lineSize);\n            w -= this.$lineSize;\n            h -= this.$lineSize;\n        }\n        g.beginFill(this.$fillColor);\n        if (this.$type == 1) {\n            if (this.$corner && this.$corner.length >= 1) {\n                if (this.$corner.length == 1) {\n                    g.drawRoundRect(this.$lineSize / 2, this.$lineSize / 2, w, h, this.$corner[0]);\n                }\n                else {\n                    g.drawRoundRectComplex(this.$lineSize / 2, this.$lineSize / 2, w, h, this.$corner[0], this.$corner[1], this.$corner[3], this.$corner[2]);\n                }\n            }\n            else {\n                g.drawRect(this.$lineSize / 2, this.$lineSize / 2, w, h);\n            }\n        }\n        else if (this.$type == 2) {\n            let halfW = w * 0.5;\n            if (w == h)\n                g.drawCircle(halfW + this.$lineSize / 2, halfW + this.$lineSize / 2, halfW);\n            else {\n                w = w - this.$lineSize;\n                h = h - this.$lineSize;\n                g.drawEllipse(this.$lineSize / 2, this.$lineSize / 2, w, h);\n            }\n        }\n        else if (this.$type == 3) {\n            let radius = w > h ? w / 2 : h / 2;\n            g.drawPolyStar(0 + radius, 0 + radius, radius, this.$sides, 0, this.$startAngle);\n        }\n        else if (this.$type == 4) {\n            Utils.fillPath(g, this.$points, 0, 0);\n        }\n        g.endFill();\n        shape.cache(0, 0, this.$width, this.$height);\n    }\n    replaceMe(target) {\n        if (!this.$parent)\n            throw new Error('parent not set');\n        target.name = this.name;\n        target.alpha = this.alpha;\n        target.rotation = this.rotation;\n        target.visible = this.visible;\n        target.touchable = this.touchable;\n        target.grayed = this.grayed;\n        target.setXY(this.x, this.y);\n        target.setSize(this.width, this.height);\n        let index = this.$parent.getChildIndex(this);\n        this.$parent.addChildAt(target, index);\n        target.relations.copyFrom(this.relations);\n        this.$parent.removeChild(this, true);\n    }\n    addBeforeMe(target) {\n        if (this.$parent == null)\n            throw new Error('parent not set');\n        let index = this.$parent.getChildIndex(this);\n        this.$parent.addChildAt(target, index);\n    }\n    addAfterMe(target) {\n        if (this.$parent == null)\n            throw new Error('parent not set');\n        let index = this.$parent.getChildIndex(this);\n        index++;\n        this.$parent.addChildAt(target, index);\n    }\n    createDisplayObject() {\n        this.$displayObject = new UISprite(this);\n        this.$displayObject.mouseEnabled = true;\n    }\n    handleSizeChanged() {\n        if (this.$type != 0)\n            this.drawGraph();\n    }\n    setupBeforeAdd(xml) {\n        super.setupBeforeAdd(xml);\n        let type = xml.attributes.type;\n        if (type && type != 'empty') {\n            let str;\n            str = xml.attributes.lineSize;\n            if (str)\n                this.$lineSize = parseInt(str);\n            let c;\n            str = xml.attributes.lineColor;\n            if (str) {\n                c = StringUtil.convertToRGBA(str);\n                this.$lineColor = c;\n            }\n            str = xml.attributes.fillColor;\n            if (str) {\n                c = StringUtil.convertToRGBA(str);\n                this.$fillColor = c;\n            }\n            let arr;\n            str = xml.attributes.corner;\n            if (str) {\n                arr = str.split(',');\n                if (arr.length > 1)\n                    this.$corner = [parseInt(arr[0]), parseInt(arr[1]), parseInt(arr[2]), parseInt(arr[3])];\n                else\n                    this.$corner = [parseInt(arr[0])];\n            }\n            if (type == 'rect') {\n                this.$type = 1;\n            }\n            else if (type == 'eclipse') {\n                this.$type = 2;\n            }\n            else if (type == 'regular_polygon') {\n                this.$type = 3;\n                str = xml.attributes.sides;\n                if (str) {\n                    this.$sides = parseInt(str);\n                }\n                str = xml.attributes.startAngle;\n                if (str) {\n                    this.$startAngle = parseInt(str);\n                }\n            }\n            else if (type == 'polygon') {\n                this.$type = 4;\n                str = xml.attributes.points;\n                if (str) {\n                    arr = str.split(',');\n                    this.$points = arr.map(point => {\n                        return parseInt(point);\n                    });\n                }\n            }\n            this.drawGraph();\n        }\n    }\n}\n\nclass Bitmap extends Sprite {\n    constructor(item) {\n        super();\n        if (item) {\n            let { width, height, texture, id } = item;\n            this.$frameId = id;\n            if (typeof texture == 'string') {\n                this.texture = document.createElement('img');\n                this.texture.src = texture;\n            }\n            else {\n                this.texture = texture.image;\n            }\n            this.sourceRect = new createjs.Rectangle(0, 0, width, height);\n            this.textureRect = texture.rect;\n        }\n    }\n    draw(ctx, ignoreCache) {\n        let flag = super.draw(ctx, ignoreCache);\n        if (flag) {\n            return flag;\n        }\n        if (this.sourceRect && this.textureRect) {\n            let { x, y, width, height } = this.sourceRect;\n            x = this.$isTrim ? x : 0;\n            y = this.$isTrim ? y : 0;\n            ctx.drawImage(this.texture, this.textureRect.x, this.textureRect.y, this.textureRect.width, this.textureRect.height, x, y, width, height); //GObject来控制位置坐标\n        }\n        else {\n            ctx.drawImage(this.texture, 0, 0);\n        }\n        return true;\n    }\n    getBounds() {\n        var rect = super.getBounds();\n        if (rect) {\n            return rect;\n        }\n        var texture = this.texture, o = this.sourceRect || texture;\n        var hasContent = texture && (texture['naturalWidth'] || texture['getContext'] || texture['readyState'] >= 2);\n        return hasContent ? this.sourceRect.setValues(0, 0, o.width, o.height) : null;\n    }\n}\n\nclass ScaleBitmap extends Sprite {\n    constructor(item, scale9Grid) {\n        super();\n        if (item) {\n            let { width, height, texture, id } = item;\n            this.$frameId = id;\n            if (typeof texture == 'string') {\n                this.texture = document.createElement('img');\n                this.texture.src = texture;\n            }\n            else {\n                this.texture = texture.image;\n            }\n            this.sourceRect = new createjs.Rectangle(0, 0, width, height);\n            this.textureRect = texture.rect;\n        }\n        this.scale9Grid = scale9Grid;\n        this.snapToPixel = true;\n    }\n    draw(ctx, ignoreCache) {\n        let flag = super.draw(ctx, ignoreCache);\n        if (flag) {\n            return true;\n        }\n        var centerX = this.scale9Grid.width;\n        var centerY = this.scale9Grid.height;\n        var scaledCenterX;\n        var scaledCenterY;\n        var imageHeight = this.sourceRect.height;\n        var imageWidth = this.sourceRect.width;\n        if (centerX == 0) {\n            //vertical\n            if (centerY == 0) {\n                throw 'One of scale9Grid width or height must be greater than zero.';\n            }\n            var scale3Region2 = this.textureRect.y + this.scale9Grid.y;\n            var scale3Region3 = this.textureRect.y + this.scale9Grid.y + this.scale9Grid.height;\n            var scaledFirstRegion = this.scale9Grid.y;\n            var scaledSecondRegion = this.scale9Grid.height;\n            var scaledThirdRegion = this.textureRect.height - scaledFirstRegion - scaledSecondRegion;\n            scaledCenterY = imageHeight - scaledFirstRegion - scaledThirdRegion;\n            ctx.drawImage(this.texture, this.textureRect.x, this.textureRect.y, this.textureRect.width, scaledFirstRegion, 0, 0, imageWidth, scaledFirstRegion);\n            ctx.drawImage(this.texture, this.textureRect.x, scale3Region2, this.textureRect.width, scaledSecondRegion, 0, scaledFirstRegion, imageWidth, scaledCenterY);\n            ctx.drawImage(this.texture, this.textureRect.x, scale3Region3, this.textureRect.width, scaledThirdRegion, 0, scaledCenterY + scaledFirstRegion, imageWidth, scaledThirdRegion);\n        }\n        else if (centerY == 0) {\n            //horizontal\n            var scale3Region2 = this.textureRect.x + this.scale9Grid.x;\n            var scale3Region3 = this.textureRect.x + this.scale9Grid.x + this.scale9Grid.width;\n            var scaledFirstRegion = this.scale9Grid.x;\n            var scaledSecondRegion = this.scale9Grid.width;\n            var scaledThirdRegion = this.textureRect.width - scaledFirstRegion - scaledSecondRegion;\n            scaledCenterX = imageWidth - scaledFirstRegion - scaledThirdRegion;\n            ctx.drawImage(this.texture, this.textureRect.x, this.textureRect.y, scaledFirstRegion, this.textureRect.height, 0, 0, scaledFirstRegion, imageHeight);\n            ctx.drawImage(this.texture, scale3Region2, this.textureRect.y, scaledSecondRegion, this.textureRect.height, scaledFirstRegion, 0, scaledCenterX, imageHeight);\n            ctx.drawImage(this.texture, scale3Region3, this.textureRect.y, scaledThirdRegion, this.textureRect.height, scaledFirstRegion + scaledCenterX, 0, scaledThirdRegion, imageHeight);\n        }\n        else {\n            var left = this.scale9Grid.x;\n            var top = this.scale9Grid.y;\n            var right = this.textureRect.width - centerX - left;\n            var bottom = this.textureRect.height - centerY - top;\n            scaledCenterX = imageWidth - left - right;\n            scaledCenterY = imageHeight - top - bottom;\n            ctx.drawImage(this.texture, this.textureRect.x, this.textureRect.y, left, top, 0, 0, left, top);\n            ctx.drawImage(this.texture, this.textureRect.x + left, this.textureRect.y, centerX, top, left, 0, scaledCenterX, top);\n            ctx.drawImage(this.texture, this.textureRect.x + left + centerX, this.textureRect.y, right, top, left + scaledCenterX, 0, right, top);\n            ctx.drawImage(this.texture, this.textureRect.x, this.textureRect.y + top, left, centerY, 0, top, left, scaledCenterY);\n            ctx.drawImage(this.texture, this.textureRect.x + left, this.textureRect.y + top, centerX, centerY, left, top, scaledCenterX, scaledCenterY);\n            ctx.drawImage(this.texture, this.textureRect.x + left + centerX, this.textureRect.y + top, right, centerY, left + scaledCenterX, top, right, scaledCenterY);\n            ctx.drawImage(this.texture, this.textureRect.x, this.textureRect.y + top + centerY, left, bottom, 0, top + scaledCenterY, left, bottom);\n            ctx.drawImage(this.texture, this.textureRect.x + left, this.textureRect.y + top + centerY, centerX, bottom, left, top + scaledCenterY, scaledCenterX, bottom);\n            ctx.drawImage(this.texture, this.textureRect.x + left + centerX, this.textureRect.y + top + centerY, right, bottom, left + scaledCenterX, top + scaledCenterY, right, bottom);\n        }\n        return true;\n    }\n}\n\nclass TilingBitmap extends Sprite {\n    constructor(item) {\n        super();\n        if (item) {\n            let { width, height, texture, id } = item;\n            this.$frameId = id;\n            if (typeof texture == 'string') {\n                this.texture = document.createElement('img');\n                this.texture.src = texture;\n            }\n            else {\n                this.texture = texture.image;\n            }\n            this.sourceRect = new createjs.Rectangle(0, 0, width, height);\n            this.textureRect = texture.rect;\n            let offsetCanvas = document.createElement('canvas');\n            let offsetCanvasContext = offsetCanvas.getContext('2d');\n            offsetCanvas.width = this.textureRect.width;\n            offsetCanvas.height = this.textureRect.height;\n            offsetCanvasContext.drawImage(this.texture, this.textureRect.x, this.textureRect.y, this.textureRect.width, this.textureRect.height, 0, 0, this.textureRect.width, this.textureRect.height);\n            this._pattern = offsetCanvasContext.createPattern(offsetCanvas, 'repeat');\n        }\n    }\n    draw(ctx, ignoreCache) {\n        let flag = super.draw(ctx, ignoreCache);\n        if (flag) {\n            return flag;\n        }\n        // ctx.save();\n        let { width, height } = this.sourceRect;\n        ctx.fillStyle = this._pattern;\n        ctx.fillRect(0, 0, width, height);\n        // ctx.restore();\n        return true;\n    }\n}\n\nclass UIImage extends createjs.Container {\n    constructor(owner) {\n        super();\n        this.UIOwner = owner;\n        // this.mouseEnabled = this.mouseChildren = false;\n    }\n    set sourceRect(rect) {\n        this.$disp.sourceRect = rect;\n    }\n    setCache(x, y, width, height) {\n        this.$disp.cache(x, y, width, height);\n    }\n    /**@internal */\n    $initDisp(item) {\n        if (this.$disp)\n            return;\n        if (item) {\n            item.load();\n            if (item.scaleByTile) {\n                this.$disp = new TilingBitmap(item);\n            }\n            else if (item.scale9Grid) {\n                let rect = new createjs.Rectangle(item.scale9Grid.x, item.scale9Grid.y, Math.max(0, item.scale9Grid.width), Math.max(0, item.scale9Grid.height));\n                this.$disp = new ScaleBitmap(item, rect);\n            }\n            else {\n                this.$disp = new Bitmap(item);\n            }\n        }\n        else {\n            this.$disp = new Bitmap();\n        }\n        this.addChild(this.$disp);\n    }\n    get tint() {\n        return this.$disp.tint;\n    }\n    set tint(value) {\n        this.$disp.tint = value;\n    }\n    get height() {\n        return this.$disp.sourceRect.height;\n    }\n    set height(v) {\n        this.$disp.sourceRect.height = v;\n    }\n    get width() {\n        return this.$disp.sourceRect.width;\n    }\n    set width(v) {\n        this.$disp.sourceRect.width = v;\n    }\n    get texture() {\n        return this.$disp.texture;\n    }\n    set texture(v) {\n        this.$disp.texture = v;\n    }\n    /**\n     * rect = x,y,w,h = l,t,r,b\n     */\n    get scale9Grid() {\n        if (this.$disp instanceof ScaleBitmap) {\n            return this.$disp.scale9Grid;\n        }\n        return null;\n    }\n    /**\n     * rect = x,y,w,h = l,t,r,b\n     */\n    set scale9Grid(rect) {\n        if (this.$disp instanceof ScaleBitmap) {\n            this.$disp.scale9Grid = rect;\n        }\n    }\n    /**\n     * todo\n     */\n    destroy() {\n        //     if(this.$disp) {\n        //         this.$disp.destroy(options);\n        //         this.$disp = null;\n        //     }\n        //     super.destroy(options);\n    }\n}\n\nclass GImage extends GObject {\n    constructor() {\n        super();\n    }\n    get touchable() {\n        return false;\n    }\n    set touchable(value) {\n        this.$touchable = false; //GImage has no interaction\n    }\n    get color() {\n        return this.$content.tint;\n    }\n    set color(value) {\n        if (this.color != value) {\n            this.updateGear(4 /* Color */);\n            this.$content.tint = value;\n            this.$content.setCache(0, 0, this.$width, this.$height);\n        }\n    }\n    get flip() {\n        return this.$flip;\n    }\n    set flip(value) {\n        if (this.$flip != value) {\n            this.$flip = value;\n            this.$content.scaleX = this.$content.scaleY = 1;\n            if (this.$flip == 1 /* Horizontal */ || this.$flip == 3 /* Both */) {\n                this.$content.scaleX = -1;\n            }\n            if (this.$flip == 2 /* Vertical */ || this.$flip == 3 /* Both */) {\n                this.$content.scaleY = -1;\n            }\n            this.handleXYChanged();\n        }\n    }\n    get texture() {\n        return this.$content.texture;\n    }\n    set texture(value) {\n        if (value != null) {\n            this.$sourceWidth = value.width;\n            this.$sourceHeight = value.height;\n        }\n        else\n            this.$sourceWidth = this.$sourceHeight = 0;\n        this.$initWidth = this.$sourceWidth;\n        this.$initHeight = this.$sourceHeight;\n        this.$content.texture = value;\n    }\n    createDisplayObject() {\n        this.$content = new UIImage(this);\n        this.setDisplayObject(this.$content);\n    }\n    dispose() {\n        this.$content.destroy();\n        super.dispose();\n    }\n    constructFromResource() {\n        this.$sourceWidth = this.packageItem.width;\n        this.$sourceHeight = this.packageItem.height;\n        this.$initWidth = this.$sourceWidth;\n        this.$initHeight = this.$sourceHeight;\n        this.$content.$initDisp(this.packageItem);\n        this.setSize(this.$sourceWidth, this.$sourceHeight);\n    }\n    handleXYChanged() {\n        super.handleXYChanged();\n        if (this.$flip != 0 /* None */) {\n            if (this.$content.scaleX == -1)\n                this.$content.x += this.width;\n            if (this.$content.scaleY == -1)\n                this.$content.y += this.height;\n        }\n    }\n    handleSizeChanged() {\n        this.$content.width = this.width;\n        this.$content.height = this.height;\n        let rect = new createjs.Rectangle(this.x, this.y, this.width, this.height);\n        this.$content.sourceRect = rect;\n    }\n    setupBeforeAdd(xml) {\n        super.setupBeforeAdd(xml);\n        let str;\n        str = xml.attributes.color;\n        if (str) {\n            this.color = StringUtil.HEX2RGB(str);\n        }\n        str = xml.attributes.flip;\n        if (str)\n            this.flip = ParseFlipType(str);\n    }\n}\n\nclass GTimer {\n    constructor() {\n        this.$enumIdx = 0;\n        this.$enumCount = 0;\n        this.$curTime = Date.now();\n        this.$items = [];\n        this.$itemPool = [];\n        // this.$lastTime = createjs.Ticker.getTime();\n        // GTimer.time = this.$lastTime;\n        createjs.Ticker.on('tick', this.advance, this);\n    }\n    getItem() {\n        if (this.$itemPool.length)\n            return this.$itemPool.pop();\n        else\n            return new TimerItem();\n    }\n    findItem(callback, thisObj) {\n        let len = this.$items.length;\n        for (let i = 0; i < len; i++) {\n            let item = this.$items[i];\n            if (item.callback == callback && item.thisObj == thisObj)\n                return item;\n        }\n        return null;\n    }\n    //repeat <= 0 means loop\n    add(delayInMs, repeat, callback, thisObj, callbackParam) {\n        let item = this.findItem(callback, thisObj);\n        if (!item) {\n            item = this.getItem();\n            item.callback = callback;\n            item.thisObj = thisObj;\n            this.$items.push(item);\n        }\n        item.delay = delayInMs;\n        item.counter = 0;\n        item.repeat = repeat;\n        item.param = callbackParam;\n        item.end = false;\n    }\n    addLoop(delayInMs, callback, thisObj, callbackParam) {\n        this.add(delayInMs, 0, callback, thisObj, callbackParam);\n    }\n    callLater(callback, thisObj, callbackParam) {\n        this.add(1, 1, callback, thisObj, callbackParam);\n    }\n    callDelay(delayInMs, callback, thisObj, callbackParam) {\n        this.add(delayInMs, 1, callback, thisObj, callbackParam);\n    }\n    exists(callback, thisObj) {\n        let item = this.findItem(callback, thisObj);\n        return item != null;\n    }\n    remove(callback, thisObj) {\n        let item = this.findItem(callback, thisObj);\n        if (item) {\n            let i = this.$items.indexOf(item);\n            this.$items.splice(i, 1);\n            if (i < this.$enumIdx)\n                this.$enumIdx--;\n            this.$enumCount--;\n            item.callback = null;\n            item.param = null;\n            this.$itemPool.push(item);\n        }\n    }\n    get ticker() {\n        return this.$ticker;\n    }\n    get curTime() {\n        return this.$curTime;\n    }\n    advance() {\n        this.$enumIdx = 0;\n        this.$enumCount = this.$items.length;\n        while (this.$enumIdx < this.$enumCount) {\n            let item = this.$items[this.$enumIdx];\n            this.$enumIdx++;\n            let ms = createjs.Ticker.interval;\n            this.$curTime += ms;\n            if (item.advance(ms)) {\n                if (item.end) {\n                    this.$enumIdx--;\n                    this.$enumCount--;\n                    this.$items.splice(this.$enumIdx, 1);\n                    this.$itemPool.push(item);\n                }\n                if (item.callback) {\n                    let args = [ms];\n                    if (item.param && item.param instanceof Array)\n                        args = item.param.concat(args);\n                    else if (item.param !== void 0)\n                        args.unshift(item.param);\n                    item.callback.apply(item.thisObj, args);\n                }\n                if (item.end)\n                    item.callback = item.thisObj = item.param = null;\n            }\n        }\n    }\n}\nGTimer.inst = new GTimer();\nclass TimerItem {\n    constructor() {\n        this.delay = 0;\n        this.counter = 0;\n        this.repeat = 0;\n    }\n    advance(delta = 0) {\n        this.counter += delta;\n        if (this.counter >= this.delay) {\n            this.counter -= this.delay;\n            if (this.counter > this.delay)\n                this.counter = this.delay;\n            if (this.repeat > 0) {\n                this.repeat--;\n                if (this.repeat == 0)\n                    this.end = true;\n            }\n            return true;\n        }\n        else\n            return false;\n    }\n}\n\nclass MathUtil {\n    static clamp(value, min, max) {\n        if (value < min)\n            value = min;\n        else if (value > max)\n            value = max;\n        return value;\n    }\n    static clamp01(value) {\n        if (value > 1)\n            value = 1;\n        else if (value < 0)\n            value = 0;\n        return value;\n    }\n    static isNumber(n) {\n        if (typeof (n) != \"number\")\n            return false;\n        if (isNaN(n))\n            return false;\n        return true;\n    }\n    static sign(x) {\n        x = Number(x);\n        if (x === 0 || isNaN(x))\n            return x;\n        return x > 0 ? 1 : -1;\n    }\n    static angleToRadian(n) {\n        return n * MathUtil.RADIAN;\n    }\n    static lerp(s, e, p) {\n        return s + p * (e - s);\n    }\n}\nMathUtil.RADIAN = Math.PI / 180;\n\nclass MovieClipData {\n    constructor() {\n        this.repeatedCount = 0;\n        this.$curFrame = 0;\n        this.$lastTime = 0;\n        this.$curFrameDelay = 0;\n        this.$lastTime = Date.now();\n    }\n    update(mc) {\n        let t = Date.now();\n        let elapsed = t - this.$lastTime;\n        this.$lastTime = t;\n        let cur = this.$curFrame;\n        if (cur >= mc.frameCount)\n            cur = mc.frameCount - 1;\n        this.reachesEnd = false;\n        this.$curFrameDelay += elapsed;\n        let interval = mc.interval + mc.frames[cur].addDelay\n            + ((cur == 0 && this.repeatedCount > 0) ? mc.repeatDelay : 0);\n        if (this.$curFrameDelay < interval)\n            return;\n        this.$curFrameDelay -= interval;\n        if (this.$curFrameDelay > mc.interval)\n            this.$curFrameDelay = mc.interval;\n        if (mc.swing) {\n            if (this.reversed) {\n                this.$curFrame--;\n                if (this.$curFrame < 0) {\n                    this.$curFrame = Math.min(1, mc.frameCount - 1);\n                    this.repeatedCount++;\n                    this.reversed = !this.reversed;\n                }\n            }\n            else {\n                this.$curFrame++;\n                if (this.$curFrame > mc.frameCount - 1) {\n                    this.$curFrame = Math.max(0, mc.frameCount - 2);\n                    this.repeatedCount++;\n                    this.reachesEnd = true;\n                    this.reversed = !this.reversed;\n                }\n            }\n        }\n        else {\n            this.$curFrame++;\n            if (this.$curFrame > mc.frameCount - 1) {\n                this.$curFrame = 0;\n                this.repeatedCount++;\n                this.reachesEnd = true;\n            }\n        }\n    }\n    get currentFrame() {\n        return this.$curFrame;\n    }\n    set currentFrame(value) {\n        this.$curFrame = value;\n        this.$curFrameDelay = 0;\n    }\n    rewind() {\n        this.$curFrame = 0;\n        this.$curFrameDelay = 0;\n        this.reversed = false;\n        this.reachesEnd = false;\n    }\n    reset() {\n        this.$curFrame = 0;\n        this.$curFrameDelay = 0;\n        this.repeatedCount = 0;\n        this.reachesEnd = false;\n        this.reversed = false;\n    }\n    copy(src) {\n        this.$curFrame = src.$curFrame;\n        this.$curFrameDelay = src.$curFrameDelay;\n        this.repeatedCount = src.repeatedCount;\n        this.reachesEnd = src.reachesEnd;\n        this.reversed = src.reversed;\n    }\n}\n\nclass DefaultMovieClipSettings {\n    constructor() {\n        /**the first frame number to start to play */\n        this.startFrame = 0;\n        /**the end frame the playing will end at, -1 means to the tail */\n        this.endFrame = -1;\n        /**play count, 0 means endeless */\n        this.repeatCount = 0;\n        /**once the repeated playing completes, the playing will end at, -1 means to the tail */\n        this.loopEndAt = -1;\n        /**complete callback handler */\n        this.endCallback = null;\n        /**context object for the callback function */\n        this.endCallbackContext = null;\n    }\n    /**modify the current settings without whole parameters provided */\n    mix(other) {\n        let ret = this;\n        for (let key in other) {\n            if (key == \"mix\")\n                continue;\n            ret[key] = other[key];\n        }\n        return this;\n    }\n}\n\nclass MovieClip extends Bitmap {\n    constructor(owner) {\n        super();\n        this.interval = 0;\n        this.repeatDelay = 0;\n        this.$frameCount = 0;\n        this.$currentFrame = 0;\n        this.$status = 0 /* NORMAL */;\n        this.UIOwner = owner;\n        this.data = new MovieClipData();\n        this.$playing = true;\n        this.mouseEnabled = false;\n        this.$settings = new DefaultMovieClipSettings();\n        this.$isTrim = true;\n        this.on('added', this.added, this);\n        this.on('removed', this.removed, this);\n    }\n    // draw(ctx: CanvasRenderingContext2D, ignoreCache: boolean): boolean {\n    //     // let flag = super.draw(ctx, ignoreCache);\n    //     // if (flag) {\n    //     //     return flag;\n    //     // }\n    //     if (this.sourceRect && this.textureRect) {\n    //         let { x, y, width, height } = this.textureRect;\n    //         ctx.drawImage(this.texture, x, y, width, height, this.sourceRect.x, this.sourceRect.y, this.sourceRect.width, this.sourceRect.height);//GObject来控制位置坐标\n    //     } else {\n    //         ctx.drawImage(this.texture, 0, 0);\n    //     }\n    //     return true;\n    // }\n    get frames() {\n        return this.$frames;\n    }\n    set frames(value) {\n        this.$frames = value;\n        if (this.$frames != null)\n            this.$frameCount = this.$frames.length;\n        else\n            this.$frameCount = 0;\n        if (this.$settings.endFrame == -1 || this.$settings.endFrame > this.$frameCount - 1)\n            this.$settings.endFrame = this.$frameCount - 1;\n        if (this.$settings.loopEndAt == -1 || this.$settings.loopEndAt > this.$frameCount - 1)\n            this.$settings.loopEndAt = this.$frameCount - 1;\n        if (this.$currentFrame < 0 || this.$currentFrame > this.$frameCount - 1)\n            this.$currentFrame = this.$frameCount - 1;\n        if (this.$frameCount > 0) {\n            this.setFrame(this.$frames[this.$currentFrame]);\n        }\n        else {\n            this.setFrame(null);\n        }\n        this.data.rewind();\n    }\n    get frameCount() {\n        return this.$frameCount;\n    }\n    // public get boundsRect(): createjs.Rectangle {\n    //     return this.getBounds();\n    //     // return this._boundsRect;\n    // }\n    set boundsRect(value) {\n        // this._boundsRect = value;\n        // this.sourceRect = value;\n    }\n    get currentFrame() {\n        return this.$currentFrame;\n    }\n    set currentFrame(value) {\n        if (this.$currentFrame != value) {\n            this.$currentFrame = value;\n            this.data.currentFrame = value;\n            this.setFrame(this.$currentFrame < this.$frameCount ? this.$frames[this.$currentFrame] : null);\n        }\n    }\n    get playing() {\n        return this.$playing;\n    }\n    set playing(value) {\n        this.$playing = value;\n        if (value && GObject.isDisplayObjectOnStage(this))\n            GTimer.inst.add(0, 0, this.update, this);\n        else\n            GTimer.inst.remove(this.update, this);\n    }\n    /**\n       * Modify the playing settings for the current MovieClip object, there are two ways to call this method:\n       * 1) pass whole parameters:\n              startFrame: number;\n              endFrame: number;\n              repeatCount: number;\n              loopEndAt: number;\n              endCallback: (target?: MovieClip) => void;\n              endCallbackContext: any;\n       * 2) just pass 1 object which implements MovieClipSettings (recommended)\n       */\n    setPlaySettings(...args) {\n        if (args.length == 1 && typeof args[0] == 'object')\n            this.$settings.mix(args[0]);\n        else {\n            let s = args[0], e = args[1], r = args[2], l = args[3], ec = args[4], ecc = args[5];\n            let o = {};\n            if (MathUtil.isNumber(s))\n                o.startFrame = s;\n            if (MathUtil.isNumber(e))\n                o.endFrame = e;\n            if (MathUtil.isNumber(r))\n                o.repeatCount = r;\n            if (MathUtil.isNumber(l))\n                o.loopEndAt = l;\n            if (ec && typeof ec == 'function')\n                o.endCallback = ec;\n            if (ecc)\n                o.endCallbackContext = ecc;\n            this.$settings.mix(o);\n        }\n        if (this.$settings.endFrame == -1 || this.$settings.endFrame > this.$frameCount - 1)\n            this.$settings.endFrame = this.$frameCount - 1;\n        if (this.$settings.loopEndAt == -1)\n            this.$settings.loopEndAt = this.$settings.endFrame;\n        this.$status = 0 /* NORMAL */;\n        this.currentFrame = this.$settings.startFrame;\n    }\n    update() {\n        if (this.UIOwner.$inProgressBuilding)\n            return;\n        if (this.$playing && this.$frameCount != 0 && this.$status != 3 /* ENDED */) {\n            this.data.update(this);\n            if (this.$currentFrame != this.data.currentFrame) {\n                if (this.$status == 1 /* LOOPING */) {\n                    this.$currentFrame = this.$settings.startFrame;\n                    this.data.currentFrame = this.$currentFrame;\n                    this.$status = 0 /* NORMAL */;\n                }\n                else if (this.$status == 2 /* STOPPING */) {\n                    this.$currentFrame = this.$settings.loopEndAt;\n                    this.data.currentFrame = this.$currentFrame;\n                    this.$status = 3 /* ENDED */;\n                    //play end\n                    if (this.$settings.endCallback != null)\n                        GTimer.inst.callLater(this.$playEnd, this);\n                }\n                else {\n                    this.$currentFrame = this.data.currentFrame;\n                    if (this.$currentFrame == this.$settings.endFrame) {\n                        if (this.$settings.repeatCount > 0) {\n                            this.$settings.repeatCount--;\n                            if (this.$settings.repeatCount == 0)\n                                this.$status = 2 /* STOPPING */;\n                            else\n                                this.$status = 1 /* LOOPING */;\n                        }\n                    }\n                }\n                this.setFrame(this.$frames[this.$currentFrame]);\n            }\n        }\n    }\n    $playEnd() {\n        if (this.$settings.endCallback != null) {\n            let f = this.$settings.endCallback;\n            let fObj = this.$settings.endCallbackContext;\n            this.$settings.endCallback = this.$settings.endCallbackContext = null;\n            this.$settings.endCallbackContext = null;\n            if (f)\n                f.call(fObj, this);\n        }\n    }\n    setFrame(frame) {\n        this.texture = frame == null ? null : frame.texture.image;\n        this.textureRect = frame.texture.rect;\n        this.sourceRect = frame.texture.trim;\n        let { x, y, width, height } = this.sourceRect;\n        this.cache(x, y, width, height);\n        // this._textureID = -1;\n    }\n    added(disp) {\n        if (this.$playing)\n            GTimer.inst.add(0, 0, this.update, this);\n    }\n    removed(disp) {\n        if (this.$playing)\n            GTimer.inst.remove(this.update, this);\n    }\n    destroy() {\n        GTimer.inst.remove(this.update, this);\n        this.off('added', this.added);\n        this.off('removed', this.removed);\n        super.destroy();\n    }\n}\n\nclass GMovieClip extends GObject {\n    constructor() {\n        super();\n    }\n    mapPivotWidth(scale) {\n        return scale * this.$sourceWidth;\n    }\n    mapPivotHeight(scale) {\n        return scale * this.$sourceHeight;\n    }\n    handleSizeChanged() {\n        if (this.$displayObject != null && this.$sourceWidth != 0 && this.$sourceHeight != 0)\n            this.$displayObject.set({\n                scaleX: (this.$width / this.$sourceWidth) * this.$scaleX,\n                scaleY: (this.$height / this.$sourceHeight) * this.$scaleY\n            });\n    }\n    handleScaleChanged() {\n        if (this.$displayObject != null) {\n            this.$displayObject.set({\n                scaleX: (this.$width / this.$sourceWidth) * this.$scaleX,\n                scaleY: (this.$height / this.$sourceHeight) * this.$scaleY\n            });\n        }\n    }\n    get touchable() {\n        return false;\n    }\n    set touchable(value) {\n        this.$touchable = false; //GMovieClip has no interaction\n    }\n    get color() {\n        return this.$movieClip.tint;\n    }\n    set color(value) {\n        this.$movieClip.tint = value;\n    }\n    createDisplayObject() {\n        this.$movieClip = new MovieClip(this);\n        this.setDisplayObject(this.$movieClip);\n    }\n    get playing() {\n        return this.$movieClip.playing;\n    }\n    set playing(value) {\n        if (this.$movieClip.playing != value) {\n            this.$movieClip.playing = value;\n            this.updateGear(5 /* Animation */);\n        }\n    }\n    get frame() {\n        return this.$movieClip.currentFrame;\n    }\n    set frame(value) {\n        if (this.$movieClip.currentFrame != value) {\n            this.$movieClip.currentFrame = value;\n            this.updateGear(5 /* Animation */);\n        }\n    }\n    /**\n       * Modify the playing settings for the current MovieClip object, there are two ways to call this method:\n       * 1) pass whole parameters:\n              startFrame: number;\n              endFrame: number;\n              repeatCount: number;\n              loopEndAt: number;\n              endCallback: (target?: MovieClip) => void;\n              endCallbackContext: any;\n       * 2) just pass 1 object which implements MovieClipSettings (recommended)\n       */\n    setPlaySettings(...args) {\n        this.$movieClip.setPlaySettings.apply(this.$movieClip, args);\n    }\n    constructFromResource() {\n        this.$sourceWidth = this.packageItem.width;\n        this.$sourceHeight = this.packageItem.height;\n        this.$initWidth = this.$sourceWidth;\n        this.$initHeight = this.$sourceHeight;\n        this.setSize(this.$sourceWidth, this.$sourceHeight);\n        this.packageItem.load();\n        this.$movieClip.interval = this.packageItem.interval;\n        this.$movieClip.swing = this.packageItem.swing;\n        this.$movieClip.repeatDelay = this.packageItem.repeatDelay;\n        this.$movieClip.frames = this.packageItem.frames;\n        this.$movieClip.boundsRect = new createjs.Rectangle(0, 0, this.$sourceWidth, this.$sourceHeight);\n    }\n    setupBeforeAdd(xml) {\n        super.setupBeforeAdd(xml);\n        let str;\n        str = xml.attributes.frame;\n        if (str)\n            this.$movieClip.currentFrame = parseInt(str);\n        str = xml.attributes.playing;\n        this.$movieClip.playing = str != 'false';\n        str = xml.attributes.color;\n        if (str) {\n            this.color = StringUtil.HEX2RGB(str);\n        }\n    }\n}\n\nclass DOMEventManager extends createjs.EventDispatcher {\n    constructor() {\n        super();\n        this.retEvent = {};\n        this.nullLowestDeltaTimeout = NaN;\n        /*******************keys*******************/\n        this.$pressedKeys = {};\n        this.$releasedKeys = {};\n        this.$downKeys = [];\n        //resize\n        window.addEventListener('resize', e => this.notifyResizeEvents(e), false);\n        //modifer keys\n        window.addEventListener('keydown', e => this.onWindowKeyDown(e), false);\n        window.addEventListener('keyup', e => this.onWindowKeyUp(e), false);\n        //mouse wheel\n        const toBind = 'onwheel' in document || document['documentMode'] >= 9\n            ? ['wheel']\n            : ['mousewheel', 'DomMouseScroll', 'MozMousePixelScroll'];\n        for (let i = toBind.length; i;) {\n            window.addEventListener(toBind[--i], e => this.onMouseWheel(e), false);\n        }\n    }\n    //resize\n    notifyResizeEvents(e) {\n        this.dispatchEvent('resize');\n    }\n    onMouseWheel(event) {\n        let orgEvent = event || window.event, delta = 0, deltaX = 0, deltaY = 0, absDelta = 0;\n        if ('detail' in orgEvent) {\n            deltaY = orgEvent.detail * -1;\n        }\n        if ('wheelDelta' in orgEvent) {\n            deltaY = orgEvent.wheelDelta;\n        }\n        if ('wheelDeltaY' in orgEvent) {\n            deltaY = orgEvent.wheelDeltaY;\n        }\n        if ('wheelDeltaX' in orgEvent) {\n            deltaX = orgEvent.wheelDeltaX * -1;\n        }\n        //FF DOMMouseScroll\n        if ('axis' in orgEvent && orgEvent.axis === orgEvent.HORIZONTAL_AXIS) {\n            deltaX = deltaY * -1;\n            deltaY = 0;\n        }\n        delta = deltaY === 0 ? deltaX : deltaY;\n        if ('deltaY' in orgEvent) {\n            deltaY = orgEvent.deltaY * -1;\n            delta = deltaY;\n        }\n        if ('deltaX' in orgEvent) {\n            deltaX = orgEvent.deltaX;\n            if (deltaY === 0) {\n                delta = deltaX * -1;\n            }\n        }\n        if (deltaY === 0 && deltaX === 0) {\n            return;\n        }\n        // Delta modes:\n        //   * deltaMode 0 is by pixels, nothing to do\n        //   * deltaMode 1 is by lines\n        //   * deltaMode 2 is by pages\n        if (orgEvent.deltaMode === 1) {\n            const lineHeight = 16; //fontSize - line-height;\n            delta *= lineHeight;\n            deltaY *= lineHeight;\n            deltaX *= lineHeight;\n        }\n        else if (orgEvent.deltaMode === 2) {\n            const pageHeight = 16; //dom.clientHeight = page-height\n            delta *= pageHeight;\n            deltaY *= pageHeight;\n            deltaX *= pageHeight;\n        }\n        absDelta = Math.max(Math.abs(deltaY), Math.abs(deltaX));\n        if (!this.lowestDelta || absDelta < this.lowestDelta) {\n            this.lowestDelta = absDelta;\n            if (orgEvent.type === 'mousewheel' && absDelta % 120 === 0)\n                this.lowestDelta /= 40;\n        }\n        if (orgEvent.type === 'mousewheel' && absDelta % 120 === 0) {\n            delta /= 40;\n            deltaX /= 40;\n            deltaY /= 40;\n        }\n        delta = Math[delta >= 1 ? 'floor' : 'ceil'](delta / this.lowestDelta);\n        deltaX = Math[deltaX >= 1 ? 'floor' : 'ceil'](deltaX / this.lowestDelta);\n        deltaY = Math[deltaY >= 1 ? 'floor' : 'ceil'](deltaY / this.lowestDelta);\n        this.retEvent.delta = delta;\n        this.retEvent.deltaX = deltaX;\n        this.retEvent.deltaY = deltaY;\n        this.retEvent.deltaFactor = this.lowestDelta;\n        this.retEvent.deltaMode = 0;\n        if (this.nullLowestDeltaTimeout) {\n            clearTimeout(this.nullLowestDeltaTimeout);\n        }\n        this.nullLowestDeltaTimeout = window.setTimeout(() => this.nullLowestDelta(), 200);\n        let evt = new createjs.Event(\"__mouseWheel\" /* MOUSE_WHEEL */, true, false);\n        evt.data = { event: this.retEvent };\n        this.dispatchEvent(evt, this);\n    }\n    nullLowestDelta() {\n        this.lowestDelta = null;\n    }\n    isKeyDown(key) {\n        return this.$downKeys.indexOf(key) >= 0;\n    }\n    isKeyPressed(key) {\n        return !!this.$pressedKeys[key];\n    }\n    isKeyReleased(key) {\n        return !!this.$releasedKeys[key];\n    }\n    onWindowKeyDown(evt) {\n        let key = evt.which || evt.keyCode;\n        if (!this.isKeyDown(key)) {\n            this.$downKeys.push(key);\n            this.$pressedKeys[key] = true;\n            this.dispatchEvent('keyPressed', key);\n        }\n    }\n    onWindowKeyUp(evt) {\n        let key = evt.which || evt.keyCode;\n        if (this.isKeyDown(key)) {\n            this.$pressedKeys[key] = false;\n            this.$releasedKeys[key] = true;\n            let index = this.$downKeys.indexOf(key);\n            if (index >= 0)\n                this.$downKeys.splice(index, 1);\n            this.dispatchEvent('keyReleased', key);\n        }\n    }\n}\nDOMEventManager.inst = new DOMEventManager();\n\nclass HTMLInput {\n    constructor() {\n        /**@internal */\n        this.$requestToShow = false;\n        /**@internal */\n        this.$scaleX = 1;\n        /**@internal */\n        this.$scaleY = 1;\n    }\n    static get inst() {\n        if (!HTMLInput.$instance)\n            HTMLInput.$instance = new HTMLInput();\n        return HTMLInput.$instance;\n    }\n    initialize(container, view) {\n        this.$canvas = view;\n        let div;\n        if (!this.$delegateDiv) {\n            div = document.createElement('div');\n            this.$delegateDiv = div;\n            div.id = '__delegateDiv';\n            container.appendChild(div);\n            this.initDomPos(div);\n            this.$wrapper = document.createElement('div');\n            this.initDomPos(this.$wrapper);\n            this.$wrapper.style.width = '0px';\n            this.$wrapper.style.height = '0px';\n            this.$wrapper.style.left = '0px';\n            this.$wrapper.style.top = '-100px';\n            this.setTransform(this.$wrapper, '0% 0% 0px');\n            div.appendChild(this.$wrapper);\n            Decls$1.GRoot.inst.on(InteractiveEvents.Click, this.canvasClickHandler, this);\n            this.initInputElement(true); //input\n            this.initInputElement(false); //textarea\n        }\n    }\n    isInputOn() {\n        return this.$input != null;\n    }\n    canvasClickHandler(e) {\n        if (this.$requestToShow) {\n            this.$requestToShow = false;\n            this.$input.onClickHandler(e);\n            this.show();\n        }\n        else {\n            if (this.$curEle) {\n                this.clearInputElement();\n                this.$curEle.blur();\n                this.$curEle = null;\n            }\n        }\n    }\n    isInputShown() {\n        return this.$input != null;\n    }\n    isCurrentInput(input) {\n        return this.$input == input;\n    }\n    initDomPos(dom) {\n        dom.style.position = 'absolute';\n        dom.style.left = '0px';\n        dom.style.top = '0px';\n        dom.style.border = 'none';\n        dom.style.padding = '0';\n    }\n    setTransform(el, origin, transform) {\n        let style = el.style;\n        style.transformOrigin = style.webkitTransformOrigin = style.msTransformOrigin = style.mozTransformOrigin = style.oTransformOrigin = origin;\n        if (transform && transform.length > 0)\n            style.transform = style.webkitTransform = style.msTransform = style.mozTransform = style.oTransform = transform;\n    }\n    /**@internal */\n    updateSize(sx, sy) {\n        if (!this.$canvas)\n            return;\n        this.$scaleX = sx;\n        this.$scaleY = sy;\n        this.$delegateDiv.style.left = this.$canvas.style.left;\n        this.$delegateDiv.style.top = this.$canvas.style.top;\n        let cvsStyle = this.$canvas.style;\n        this.setTransform(this.$delegateDiv, '0% 0% 0px', cvsStyle.transform ||\n            cvsStyle.webkitTransform ||\n            cvsStyle.msTransform ||\n            cvsStyle.mozTransform ||\n            cvsStyle.oTransform);\n    }\n    initInputElement(multiline) {\n        let inputElement;\n        if (multiline) {\n            inputElement = document.createElement('textarea');\n            inputElement.style.resize = 'none';\n            this.$multiLine = inputElement;\n            inputElement.id = 'stageTextAreaEle';\n        }\n        else {\n            inputElement = document.createElement('input');\n            this.$singleLine = inputElement;\n            inputElement.type = 'text';\n            inputElement.id = 'stageInputEle';\n        }\n        this.$wrapper.appendChild(inputElement);\n        inputElement.setAttribute('tabindex', '-1');\n        inputElement.style.width = '1px';\n        inputElement.style.height = '12px';\n        this.initDomPos(inputElement);\n        let style = inputElement.style;\n        style.outline = 'thin';\n        style.background = 'none';\n        style.overflow = 'hidden';\n        style.wordBreak = 'break-all';\n        style.opacity = 0;\n        inputElement.oninput = e => {\n            if (this.$input)\n                this.$input.onInputHandler();\n        };\n    }\n    show() {\n        GTimer.inst.callLater(() => {\n            this.$curEle.style.opacity = '1';\n        }, this);\n    }\n    disconnect(ele) {\n        if (this.$input == null || this.$input == ele) {\n            this.clearInputElement();\n            if (this.$curEle)\n                this.$curEle.blur();\n        }\n    }\n    clearAttributes(obj) {\n        if (this.$curEle) {\n            for (let key in obj) {\n                this.$curEle.removeAttribute(key);\n            }\n        }\n    }\n    clearInputElement() {\n        if (this.$curEle) {\n            this.$curEle.value = '';\n            this.$curEle.onblur = null;\n            let style = this.$curEle.style;\n            style.width = '1px';\n            style.height = '12px';\n            style.left = '0px';\n            style.top = '0px';\n            style.opacity = '0';\n            let el2;\n            if (this.$singleLine == this.$curEle)\n                el2 = this.$multiLine;\n            else\n                el2 = this.$singleLine;\n            el2.style.display = 'block';\n            this.$wrapper.style.left = '0px';\n            this.$wrapper.style.top = '-100px';\n            this.$wrapper.style.height = '0px';\n            this.$wrapper.style.width = '0px';\n        }\n        if (this.$input) {\n            this.$input.onDisconnect();\n            this.$input = null;\n            HTMLInput.isTyping = false;\n        }\n    }\n    requestInput(ele) {\n        this.clearInputElement();\n        this.$input = ele;\n        HTMLInput.isTyping = true;\n        let el2;\n        if (this.$input.textField.multipleLine) {\n            this.$curEle = this.$multiLine;\n            el2 = this.$singleLine;\n        }\n        else {\n            this.$curEle = this.$singleLine;\n            el2 = this.$multiLine;\n        }\n        el2.style.display = 'none';\n        return this.$curEle;\n    }\n}\nHTMLInput.isTyping = false;\n\nclass DefaultUIStageOptions {\n    constructor() {\n        this.scaleMode = \"showAll\" /* SHOW_ALL */;\n        this.orientation = \"auto\" /* AUTO */;\n        this.resolution = 1;\n        this.designWidth = 800;\n        this.designHeight = 600;\n        this.alignV = 4 /* MIDDLE */;\n        this.alignH = 1 /* CENTER */;\n        this.fallbackWidth = 0;\n        this.fallbackHeight = 0;\n    }\n}\nclass DefaultBoudingRectCalculator {\n    getRect(view, fallbackWidth, fallbackHeight) {\n        let p = view.parentElement;\n        if (!p)\n            //this should be impossible situation unless the user forget to append the view into the DOM.\n            throw new Error(\"Your view of PIXI are still in memory but not appended to DOM yet? it's necessary that there is a parent element to wrap your view up.\");\n        let rect = p.getBoundingClientRect();\n        let ret = {\n            x: 0,\n            y: 0,\n            width: 0,\n            height: 0\n        };\n        if (!rect || rect.width <= 0 || rect.height <= 0) {\n            console.warn('It seems that you did not set a explicit size for the parent element of your view, now fall back to window size instead.');\n            ret.width = window.innerWidth;\n            ret.height = window.innerHeight;\n            ret.x = 0;\n            ret.y = 0;\n        }\n        else {\n            ret.x = rect.left;\n            ret.y = rect.top;\n            ret.width = rect.width;\n            ret.height = rect.height;\n        }\n        //consider the worst situation: window does not have size!!\n        if (ret.width <= 0 || ret.height <= 0) {\n            console.warn('fetch container size to initialize PIXI in all ways have failed, now use default size (fallbackWidth / fallbackHeight) specified in the options instead.');\n            ret.width = fallbackWidth;\n            ret.height = fallbackHeight;\n        }\n        return ret;\n    }\n}\nclass UIStage extends createjs.EventDispatcher {\n    constructor(app, stageOptions) {\n        super();\n        this.$width = 0;\n        this.$height = 0;\n        this.$scaleX = 1;\n        this.$scaleY = 1;\n        this.$canvasMatrix = new createjs.Matrix2D();\n        this.offsetX = 0;\n        this.offsetY = 0;\n        this.$sizeCalcer = new DefaultBoudingRectCalculator();\n        UIStageInst.push(this);\n        this.$appContext = app;\n        let opt;\n        if (stageOptions instanceof DefaultUIStageOptions)\n            opt = stageOptions;\n        else {\n            opt = new DefaultUIStageOptions();\n            if (stageOptions != null) {\n                for (let i in stageOptions) {\n                    opt[i] = stageOptions[i];\n                }\n            }\n        }\n        if (!opt.designWidth || !opt.designHeight)\n            throw new Error(\"Invalid designWidth / designHeight in the parameter 'stageOptions'.\");\n        this.$options = opt;\n        this.$appContext.canvas.style.position = 'absolute';\n        let container = this.$appContext.canvas.parentElement;\n        let style = container.style;\n        //if parent is not a DIV box, make one\n        if (container.tagName != 'DIV') {\n            container = document.createElement('DIV');\n            style.position = 'relative';\n            style.left = style.top = '0px';\n            style.width = style.height = '100%'; //and set default full-screen\n            style.overflow = 'hidden';\n            // this.$appContext.view.parentElement.appendChild(container); //todo\n            // container.appendChild(this.$appContext.view); //todo\n        }\n        let containerPosition;\n        if (document.defaultView && document.defaultView.getComputedStyle)\n            containerPosition = document.defaultView.getComputedStyle(container).position;\n        else\n            containerPosition = style.position;\n        if (containerPosition == '' || containerPosition == 'static') {\n            containerPosition = 'relative';\n            container.style.position = containerPosition;\n        }\n        HTMLInput.inst.initialize(container, this.$appContext.canvas);\n        this.updateScreenSize();\n    }\n    get orientation() {\n        return this.$options.orientation;\n    }\n    get stageWidth() {\n        return this.$width;\n    }\n    get stageHeight() {\n        return this.$height;\n    }\n    get applicationContext() {\n        return this.$appContext;\n    }\n    get nativeStage() {\n        return this.$appContext;\n    }\n    get resolution() {\n        return this.$options.resolution;\n    }\n    set resolution(v) {\n        this.$options.resolution = v;\n        this.updateScreenSize();\n    }\n    get scaleX() {\n        return this.$scaleX;\n    }\n    get scaleY() {\n        return this.$scaleY;\n    }\n    get designWidth() {\n        return this.$options.designWidth;\n    }\n    get designHeight() {\n        return this.$options.designHeight;\n    }\n    setDesignSize(width, height) {\n        let option = this.$options;\n        option.designWidth = width;\n        option.designHeight = height;\n        this.updateScreenSize();\n    }\n    calculateStageSize(scaleMode, screenWidth, screenHeight, contentWidth, contentHeight) {\n        let displayWidth = screenWidth;\n        let displayHeight = screenHeight;\n        let stageWidth = contentWidth;\n        let stageHeight = contentHeight;\n        let scaleX = screenWidth / stageWidth || 0;\n        let scaleY = screenHeight / stageHeight || 0;\n        switch (scaleMode) {\n            case \"exactFit\" /* EXACT_FIT */:\n                break;\n            case \"fixedHeight\" /* FIXED_HEIGHT */:\n                stageWidth = Math.round(screenWidth / scaleY);\n                break;\n            case \"fixedWidth\" /* FIXED_WIDTH */:\n                stageHeight = Math.round(screenHeight / scaleX);\n                break;\n            case \"noBorder\" /* NO_BORDER */:\n                if (scaleX > scaleY)\n                    displayHeight = Math.round(stageHeight * scaleX);\n                else\n                    displayWidth = Math.round(stageWidth * scaleY);\n                break;\n            case \"showAll\" /* SHOW_ALL */:\n                if (scaleX > scaleY)\n                    displayWidth = Math.round(stageWidth * scaleY);\n                else\n                    displayHeight = Math.round(stageHeight * scaleX);\n                break;\n            case \"fixedAuto\" /* FIXED_AUTO */:\n                if (displayWidth / displayHeight < stageWidth / stageHeight) {\n                    scaleY = scaleX;\n                    stageHeight = Math.round(screenHeight / scaleX);\n                }\n                else {\n                    scaleX = scaleY;\n                    stageWidth = Math.round(screenWidth / scaleY);\n                }\n                break;\n            default:\n                stageWidth = screenWidth;\n                stageHeight = screenHeight;\n                break;\n        }\n        return {\n            stageWidth: stageWidth,\n            stageHeight: stageHeight,\n            displayWidth: displayWidth,\n            displayHeight: displayHeight\n        };\n    }\n    /**@internal */\n    updateScreenSize() {\n        if (HTMLInput.isTyping)\n            return; //todo\n        let canvas = this.$appContext.canvas;\n        let canvasStyle = canvas.style;\n        // todo\n        let rect = this.$sizeCalcer.getRect(canvas, this.$options.fallbackWidth, this.$options.fallbackHeight);\n        let shouldRotate = false;\n        let orientation = this.$options.orientation;\n        if (orientation != \"auto\" /* AUTO */) {\n            shouldRotate =\n                (orientation != \"portrait\" /* PORTRAIT */ && rect.height > rect.width) ||\n                    (orientation == \"portrait\" /* PORTRAIT */ && rect.width > rect.height);\n        }\n        let screenWidth = shouldRotate ? rect.height : rect.width;\n        let screenHeight = shouldRotate ? rect.width : rect.height;\n        let stageSize = this.calculateStageSize(this.$options.scaleMode, screenWidth, screenHeight, this.$options.designWidth, this.$options.designHeight);\n        let stageWidth = stageSize.stageWidth;\n        let stageHeight = stageSize.stageHeight;\n        let displayWidth = stageSize.displayWidth;\n        let displayHeight = stageSize.displayHeight;\n        if (canvas.width !== stageWidth)\n            canvas.width = stageWidth;\n        if (canvas.height !== stageHeight)\n            canvas.height = stageHeight;\n        canvasStyle.transformOrigin = canvasStyle.webkitTransformOrigin = canvasStyle.msTransformOrigin = canvasStyle.mozTransformOrigin = canvasStyle.oTransformOrigin =\n            '0px 0px 0px';\n        canvasStyle.width = displayWidth + 'px';\n        canvasStyle.height = displayHeight + 'px';\n        let mat = this.$canvasMatrix.identity();\n        let dispWidth = shouldRotate ? displayHeight : displayWidth;\n        let dispHeight = shouldRotate ? displayWidth : displayHeight;\n        let offx, offy;\n        if (this.$options.alignH == 0 /* LEFT */)\n            offx = 0;\n        else if (this.$options.alignH == 2 /* RIGHT */)\n            offx = rect.width - dispWidth;\n        else\n            offx = (rect.width - dispWidth) * 0.5;\n        if (this.$options.alignV == 3 /* TOP */)\n            offy = 0;\n        else if (this.$options.alignV == 5 /* BOTTOM */)\n            offy = rect.height - dispHeight;\n        else\n            offy = (rect.height - dispHeight) * 0.5;\n        if (shouldRotate) {\n            if (this.$options.orientation == \"landscape\" /* LANDSCAPE */) {\n                mat.rotate(Math.PI / 2);\n                mat.translate(screenHeight - offx, offy);\n            }\n            else {\n                mat.rotate(-Math.PI / 2);\n                mat.translate(offx, screenWidth - offy);\n            }\n        }\n        else\n            mat.translate(offx, offy);\n        if (shouldRotate) {\n            mat.tx += this.offsetY;\n            mat.ty += this.offsetX;\n        }\n        else {\n            mat.tx += this.offsetX;\n            mat.ty += this.offsetY;\n        }\n        (mat.a = this.formatData(mat.a)),\n            (mat.d = this.formatData(mat.d)),\n            (mat.tx = this.formatData(mat.tx)),\n            (mat.ty = this.formatData(mat.ty));\n        canvasStyle.transformOrigin = canvasStyle.webkitTransformOrigin = canvasStyle.msTransformOrigin = canvasStyle.mozTransformOrigin = canvasStyle.oTransformOrigin =\n            '0px 0px 0px';\n        canvasStyle.transform = canvasStyle.webkitTransform = canvasStyle.msTransform = canvasStyle.mozTransform = canvasStyle.oTransform = `matrix(${mat.a},${mat.b},${mat.c},${mat.d},${mat.tx},${mat.ty})`;\n        this.$width = stageWidth;\n        this.$height = stageHeight;\n        this.$scaleX = stageWidth / displayWidth;\n        this.$scaleY = stageHeight / displayHeight;\n        this.$appContext.set({ width: stageWidth, height: stageHeight });\n        HTMLInput.inst.updateSize(displayWidth / stageWidth, displayHeight / stageHeight);\n        let evt = new createjs.Event(\"__sizeChanged\" /* SIZE_CHANGED */, true, false);\n        this.dispatchEvent(evt, this);\n    }\n    formatData(value) {\n        if (Math.abs(value) < 0.000001)\n            return 0;\n        if (Math.abs(1 - value) < 0.001)\n            return value > 0 ? 1 : -1;\n        return value;\n    }\n    dispose() {\n        let i = UIStageInst.length;\n        while (i-- >= 0) {\n            if (UIStageInst[i] === this)\n                UIStageInst.splice(i, 1);\n        }\n    }\n}\nlet UIStageInst = [];\nlet resizeCheckTimer = NaN;\nfunction resizeHandler() {\n    UIStageInst.forEach(stage => {\n        stage.updateScreenSize();\n    });\n}\nDOMEventManager.inst.on('resize', function () {\n    clearTimeout(resizeCheckTimer);\n    resizeCheckTimer = window.setTimeout(resizeHandler, 300);\n});\n\nclass Action {\n    execute(controller, prevPage, curPage) {\n        if ((!this.fromPage || this.fromPage.length == 0 || this.fromPage.indexOf(prevPage) != -1)\n            && (!this.toPage || this.toPage.length == 0 || this.toPage.indexOf(curPage) != -1))\n            this.enter(controller);\n        else\n            this.leave(controller);\n    }\n    enter(controller) {\n    }\n    leave(controller) {\n    }\n    setup(xml) {\n        let str;\n        str = xml.attributes.fromPage;\n        if (str)\n            this.fromPage = str.split(\",\");\n        str = xml.attributes.toPage;\n        if (str)\n            this.toPage = str.split(\",\");\n    }\n}\n\nclass ChangePageAction extends Action {\n    enter(controller) {\n        if (!this.controllerName)\n            return;\n        let gcom;\n        if (this.objectId)\n            gcom = controller.parent.getChildById(this.objectId);\n        else\n            gcom = controller.parent;\n        if (gcom) {\n            let cc = gcom.getController(this.controllerName);\n            if (cc && cc != controller && !cc.$updating)\n                cc.selectedPageId = this.targetPage;\n        }\n    }\n    setup(xml) {\n        super.setup(xml);\n        this.objectId = xml.attributes.objectId;\n        this.controllerName = xml.attributes.controller;\n        this.targetPage = xml.attributes.targetPage;\n    }\n}\n\nclass PlayTransitionAction extends Action {\n    constructor() {\n        super(...arguments);\n        this.repeat = 1;\n        this.delay = 0;\n        this.stopOnExit = false;\n    }\n    enter(controller) {\n        let trans = controller.parent.getTransition(this.transitionName);\n        if (trans) {\n            if (this.$currentTransition && this.$currentTransition.playing)\n                trans.changeRepeat(this.repeat);\n            else\n                trans.play({\n                    times: this.repeat,\n                    delay: this.delay\n                });\n            this.$currentTransition = trans;\n        }\n    }\n    leave() {\n        if (this.stopOnExit && this.$currentTransition) {\n            this.$currentTransition.stop();\n            this.$currentTransition = null;\n        }\n    }\n    /**@internal */\n    setup(xml) {\n        super.setup(xml);\n        this.transitionName = xml.attributes.transition;\n        let str;\n        str = xml.attributes.repeat;\n        if (str)\n            this.repeat = parseInt(str);\n        str = xml.attributes.delay;\n        if (str)\n            this.delay = parseFloat(str);\n        this.stopOnExit = xml.attributes.stopOnExit == \"true\";\n    }\n}\n\nclass Controller extends createjs.EventDispatcher {\n    constructor() {\n        super();\n        this.$selectedIndex = 0;\n        this.$previousIndex = 0;\n        this.$pageIds = [];\n        this.$pageNames = [];\n        this.$selectedIndex = -1;\n        this.$previousIndex = -1;\n    }\n    get name() {\n        return this.$name;\n    }\n    set name(value) {\n        this.$name = value;\n    }\n    get parent() {\n        return this.$parent;\n    }\n    get selectedIndex() {\n        return this.$selectedIndex;\n    }\n    set selectedIndex(value) {\n        if (this.$selectedIndex != value) {\n            if (value > this.$pageIds.length - 1)\n                throw new Error(`index out of range: ${value}`);\n            this.$updating = true;\n            this.$previousIndex = this.$selectedIndex;\n            this.$selectedIndex = value;\n            this.$parent.applyController(this);\n            let event = new createjs.Event(\"__stateChanged\" /* CHANGED */, true, false);\n            this.dispatchEvent(event, this);\n            this.$updating = false;\n        }\n    }\n    //same effect as selectedIndex but without event emitted\n    setSelectedIndex(value = 0) {\n        if (this.$selectedIndex != value) {\n            if (value > this.$pageIds.length - 1)\n                throw new Error(`index out of range: ${value}`);\n            this.$updating = true;\n            this.$previousIndex = this.$selectedIndex;\n            this.$selectedIndex = value;\n            this.$parent.applyController(this);\n            this.$updating = false;\n        }\n    }\n    get previsousIndex() {\n        return this.$previousIndex;\n    }\n    get selectedPage() {\n        if (this.$selectedIndex == -1)\n            return null;\n        else\n            return this.$pageNames[this.$selectedIndex];\n    }\n    set selectedPage(val) {\n        this.selectedIndex = Math.max(0, this.$pageNames.indexOf(val));\n    }\n    setSelectedPage(value) {\n        this.setSelectedIndex(Math.max(0, this.$pageNames.indexOf(value)));\n    }\n    get previousPage() {\n        if (this.$previousIndex == -1)\n            return null;\n        else\n            return this.$pageNames[this.$previousIndex];\n    }\n    get pageCount() {\n        return this.$pageIds.length;\n    }\n    getPageName(index = 0) {\n        return this.$pageNames[index];\n    }\n    addPage(name = '') {\n        this.addPageAt(name, this.$pageIds.length);\n    }\n    addPageAt(name, index = 0) {\n        let nid = `${Controller.$nextPageId++}`;\n        if (index == this.$pageIds.length) {\n            this.$pageIds.push(nid);\n            this.$pageNames.push(name);\n        }\n        else {\n            this.$pageIds.splice(index, 0, nid);\n            this.$pageNames.splice(index, 0, name);\n        }\n    }\n    removePage(name) {\n        let i = this.$pageNames.indexOf(name);\n        if (i != -1) {\n            this.$pageIds.splice(i, 1);\n            this.$pageNames.splice(i, 1);\n            if (this.$selectedIndex >= this.$pageIds.length)\n                this.selectedIndex = this.$selectedIndex - 1;\n            else\n                this.$parent.applyController(this);\n        }\n    }\n    removePageAt(index = 0) {\n        this.$pageIds.splice(index, 1);\n        this.$pageNames.splice(index, 1);\n        if (this.$selectedIndex >= this.$pageIds.length)\n            this.selectedIndex = this.$selectedIndex - 1;\n        else\n            this.$parent.applyController(this);\n    }\n    clearPages() {\n        this.$pageIds.length = 0;\n        this.$pageNames.length = 0;\n        if (this.$selectedIndex != -1)\n            this.selectedIndex = -1;\n        else\n            this.$parent.applyController(this);\n    }\n    hasPage(aName) {\n        return this.$pageNames.indexOf(aName) >= 0;\n    }\n    getPageIndexById(aId) {\n        return this.$pageIds.indexOf(aId);\n    }\n    getPageIdByName(aName) {\n        let i = this.$pageNames.indexOf(aName);\n        if (i != -1)\n            return this.$pageIds[i];\n        else\n            return null;\n    }\n    getPageNameById(aId) {\n        let i = this.$pageIds.indexOf(aId);\n        if (i != -1)\n            return this.$pageNames[i];\n        else\n            return null;\n    }\n    getPageId(index = 0) {\n        return this.$pageIds[index];\n    }\n    get selectedPageId() {\n        if (this.$selectedIndex == -1)\n            return null;\n        else\n            return this.$pageIds[this.$selectedIndex];\n    }\n    set selectedPageId(val) {\n        this.selectedIndex = this.$pageIds.indexOf(val);\n    }\n    set oppositePageId(val) {\n        let i = this.$pageIds.indexOf(val);\n        if (i > 0)\n            this.selectedIndex = 0;\n        else if (this.$pageIds.length > 1)\n            this.selectedIndex = 1;\n    }\n    get previousPageId() {\n        if (this.$previousIndex == -1)\n            return null;\n        else\n            return this.$pageIds[this.$previousIndex];\n    }\n    executeActions() {\n        if (this.$actions && this.$actions.length > 0) {\n            this.$actions.forEach(a => {\n                a.execute(this, this.previousPageId, this.selectedPageId);\n            });\n        }\n    }\n    createAction(type) {\n        switch (type) {\n            case 'play_transition':\n                return new PlayTransitionAction();\n            case 'change_page':\n                return new ChangePageAction();\n        }\n        return null;\n    }\n    setup(xml) {\n        this.$name = xml.attributes.name;\n        this.$autoRadioGroupDepth = xml.attributes.autoRadioGroupDepth == 'true';\n        let str = xml.attributes.pages;\n        if (str) {\n            let arr = str.split(',');\n            let cnt = arr.length;\n            for (let i = 0; i < cnt; i += 2) {\n                this.$pageIds.push(arr[i]);\n                this.$pageNames.push(arr[i + 1]);\n            }\n        }\n        let col = xml.children;\n        if (col.length > 0) {\n            this.$actions = this.$actions || [];\n            col.forEach(cxml => {\n                let action = this.createAction(cxml.attributes.type);\n                action.setup(cxml);\n                this.$actions.push(action);\n            });\n        }\n        str = xml.attributes.transitions;\n        if (str) {\n            this.$actions = this.$actions || [];\n            let k, e;\n            str.split(',').forEach(str => {\n                if (str && str.length) {\n                    let pt = new PlayTransitionAction();\n                    k = str.indexOf('=');\n                    pt.transitionName = str.substr(k + 1);\n                    str = str.substring(0, k);\n                    k = str.indexOf('-');\n                    e = parseInt(str.substring(k + 1));\n                    if (e < this.$pageIds.length)\n                        pt.toPage = [this.$pageIds[e]];\n                    str = str.substring(0, k);\n                    if (str != '*') {\n                        e = parseInt(str);\n                        if (e < this.$pageIds.length)\n                            pt.fromPage = [this.$pageIds[e]];\n                    }\n                    pt.stopOnExit = true;\n                    this.$actions.push(pt);\n                }\n            });\n        }\n        if (this.$parent && this.$pageIds.length > 0)\n            this.$selectedIndex = 0;\n        else\n            this.$selectedIndex = -1;\n    }\n}\nController.$nextPageId = 0;\n\nclass NumberUtil {\n    static clamp(value, min, max) {\n        if (value < min)\n            value = min;\n        else if (value > max)\n            value = max;\n        return value;\n    }\n    static clamp01(value) {\n        if (value > 1)\n            value = 1;\n        else if (value < 0)\n            value = 0;\n        return value;\n    }\n    static isNumber(n) {\n        if (typeof n != 'number')\n            return false;\n        if (isNaN(n))\n            return false;\n        return true;\n    }\n    static sign(x) {\n        x = Number(x);\n        if (x === 0 || isNaN(x))\n            return x;\n        return x > 0 ? 1 : -1;\n    }\n    static angleToRadian(n) {\n        return n * NumberUtil.RADIAN;\n    }\n    static lerp(s, e, p) {\n        return s + p * (e - s);\n    }\n}\nNumberUtil.RADIAN = Math.PI / 180;\n\nconst fairygui_module_isMobile = isMobile(window.navigator);\n\nclass ScrollPane extends createjs.EventDispatcher {\n    constructor(owner, scrollType, scrollBarMargin, scrollBarDisplay, flags, vtScrollBarRes, hzScrollBarRes, headerRes, footerRes) {\n        super();\n        this.$isDragging = false;\n        this.$owner = owner;\n        this.$maskContainer = new UIContainer(null);\n        this.$owner.$rootContainer.addChild(this.$maskContainer);\n        this.$container = this.$owner.$container;\n        this.$container.x = 0;\n        this.$container.y = 0;\n        this.$maskContainer.addChild(this.$container);\n        this.$scrollBarMargin = scrollBarMargin;\n        this.$scrollType = scrollType;\n        this.$scrollSpeed = UIConfig.defaultScrollSpeed;\n        this.$mouseWheelSpeed = this.$scrollSpeed * 2;\n        this.$decelerationRate = UIConfig.defaultScrollDecelerationRate;\n        this.$displayOnLeft = (flags & 1 /* DisplayOnLeft */) != 0;\n        this.$snapToItem = (flags & 2 /* SnapToItem */) != 0;\n        this.$displayOnDemand = (flags & 4 /* DisplayOnDemand */) != 0;\n        this.$pageMode = (flags & 8 /* PageMode */) != 0;\n        if (flags & 16 /* TouchEffect */)\n            this.$touchEffect = true;\n        else if (flags & 32 /* DisableTouchEffect */)\n            this.$touchEffect = false;\n        else\n            this.$touchEffect = UIConfig.defaultScrollTouchEffect;\n        if (flags & 64 /* BounceEffect */)\n            this.$bouncebackEffect = true;\n        else if (flags & 128 /* DisableBounceEffect */)\n            this.$bouncebackEffect = false;\n        else\n            this.$bouncebackEffect = UIConfig.defaultScrollBounceEffect;\n        this.$inertiaDisabled = (flags & 256 /* DisableInertia */) != 0;\n        if ((flags & 512 /* DisableScissorRect */) == 0)\n            this.$maskContainer.scrollRect = new createjs.Rectangle();\n        this.$scrollBarVisible = true;\n        this.$mouseWheelEnabled = true;\n        this.$xPos = 0;\n        this.$yPos = 0;\n        this.$aniFlag = 0;\n        this.$footerLockedSize = 0;\n        this.$headerLockedSize = 0;\n        if (scrollBarDisplay == 0 /* Default */)\n            scrollBarDisplay = UIConfig.defaultScrollBarDisplay;\n        this.$viewSize = new createjs.Point();\n        this.$contentSize = new createjs.Point();\n        this.$pageSize = new createjs.Point(1, 1);\n        this.$overlapSize = new createjs.Point();\n        this.$tweening = 0;\n        this.$tweenTime = new createjs.Point();\n        this.$tweenStart = new createjs.Point();\n        this.$tweenDuration = new createjs.Point();\n        this.$tweenChange = new createjs.Point();\n        this.$velocity = new createjs.Point();\n        this.$containerPos = new createjs.Point();\n        this.$beginTouchPos = new createjs.Point();\n        this.$lastTouchPos = new createjs.Point();\n        this.$lastTouchGlobalPos = new createjs.Point();\n        let res;\n        if (scrollBarDisplay != 3 /* Hidden */) {\n            if (this.$scrollType == 2 /* Both */ || this.$scrollType == 1 /* Vertical */) {\n                const res = vtScrollBarRes ? vtScrollBarRes : UIConfig.verticalScrollBar;\n                if (res) {\n                    this.$vtScrollBar = UIPackage.createObjectFromURL(res);\n                    if (!this.$vtScrollBar)\n                        throw new Error(`Cannot create scrollbar from ${res}`);\n                    this.$vtScrollBar.setScrollPane(this, true);\n                    this.$owner.$rootContainer.addChild(this.$vtScrollBar.displayObject);\n                }\n            }\n            if (this.$scrollType == 2 /* Both */ || this.$scrollType == 0 /* Horizontal */) {\n                res = hzScrollBarRes ? hzScrollBarRes : UIConfig.horizontalScrollBar;\n                if (res) {\n                    this.$hzScrollBar = UIPackage.createObjectFromURL(res);\n                    if (!this.$hzScrollBar)\n                        throw new Error(`Cannot create scrollbar from ${res}`);\n                    this.$hzScrollBar.setScrollPane(this, false);\n                    this.$owner.$rootContainer.addChild(this.$hzScrollBar.displayObject);\n                }\n            }\n            this.$scrollBarDisplayAuto = scrollBarDisplay == 2 /* Auto */;\n            if (this.$scrollBarDisplayAuto) {\n                this.$scrollBarVisible = false;\n                if (this.$vtScrollBar)\n                    this.$vtScrollBar.displayObject.visible = false;\n                if (this.$hzScrollBar)\n                    this.$hzScrollBar.displayObject.visible = false;\n            }\n        }\n        else\n            this.$mouseWheelEnabled = false;\n        if (headerRes) {\n            this.$header = UIPackage.createObjectFromURL(headerRes);\n            if (this.$header == null)\n                throw new Error(`Cannot create scrollPane.header from ${res}`);\n        }\n        if (footerRes) {\n            this.$footer = UIPackage.createObjectFromURL(footerRes);\n            if (this.$footer == null)\n                throw new Error(`Cannot create scrollPane.footer from ${res}`);\n        }\n        if (this.$header != null || this.$footer != null)\n            this.$refreshBarAxis =\n                this.$scrollType == 2 /* Both */ || this.$scrollType == 1 /* Vertical */ ? 'y' : 'x';\n        this.setSize(owner.width, owner.height);\n        this.$owner.on(InteractiveEvents.Over, this.$rollOver, this);\n        this.$owner.on(InteractiveEvents.Out, this.$rollOut, this);\n        this.$owner.on(InteractiveEvents.Down, this.$mouseDown, this);\n        this.$owner.on(\"__mouseWheel\" /* MOUSE_WHEEL */, this.$mouseWheel, this);\n    }\n    get owner() {\n        return this.$owner;\n    }\n    dispose() {\n        if (this.$tweening != 0)\n            GTimer.inst.remove(this.tweenUpdate, this);\n        this.$pageController = null;\n        if (this.$hzScrollBar != null)\n            this.$hzScrollBar.dispose();\n        if (this.$vtScrollBar != null)\n            this.$vtScrollBar.dispose();\n        if (this.$header != null)\n            this.$header.dispose();\n        if (this.$footer != null)\n            this.$footer.dispose();\n        Decls$1.GRoot.inst.nativeStage.off(InteractiveEvents.Move, this.$mouseMoveEvent);\n        Decls$1.GRoot.inst.nativeStage.off(InteractiveEvents.Up, this.$mouseUpEvent);\n        Decls$1.GRoot.inst.nativeStage.off(InteractiveEvents.Click, this.$clickEvent);\n        this.$owner.off(InteractiveEvents.Over, this.$rollOver);\n        this.$owner.off(InteractiveEvents.Out, this.$rollOut);\n        this.$owner.off(InteractiveEvents.Down, this.$mouseDown);\n        this.$owner.off(\"__mouseWheel\" /* MOUSE_WHEEL */, this.$mouseWheel);\n    }\n    get horzScrollBar() {\n        return this.$hzScrollBar;\n    }\n    get vertScrollBar() {\n        return this.$vtScrollBar;\n    }\n    get header() {\n        return this.$header;\n    }\n    get footer() {\n        return this.$footer;\n    }\n    get bouncebackEffect() {\n        return this.$bouncebackEffect;\n    }\n    set bouncebackEffect(sc) {\n        this.$bouncebackEffect = sc;\n    }\n    get touchEffect() {\n        return this.$touchEffect;\n    }\n    set touchEffect(sc) {\n        this.$touchEffect = sc;\n    }\n    set scrollSpeed(val) {\n        this.$scrollSpeed = val;\n        if (this.$scrollSpeed == 0)\n            this.$scrollSpeed = UIConfig.defaultScrollSpeed;\n        this.$mouseWheelSpeed = this.$scrollSpeed * 2;\n    }\n    get scrollSpeed() {\n        return this.$scrollSpeed;\n    }\n    get snapToItem() {\n        return this.$snapToItem;\n    }\n    set snapToItem(value) {\n        this.$snapToItem = value;\n    }\n    get mouseWheelEnabled() {\n        return this.$mouseWheelEnabled;\n    }\n    set mouseWheelEnabled(value) {\n        this.$mouseWheelEnabled = value;\n    }\n    get decelerationRate() {\n        return this.$decelerationRate;\n    }\n    set decelerationRate(value) {\n        this.$decelerationRate = value;\n    }\n    get percX() {\n        return this.$overlapSize.x == 0 ? 0 : this.$xPos / this.$overlapSize.x;\n    }\n    set percX(value) {\n        this.setPercX(value, false);\n    }\n    setPercX(value, ani = false) {\n        this.$owner.ensureBoundsCorrect();\n        this.setPosX(this.$overlapSize.x * NumberUtil.clamp01(value), ani);\n    }\n    get percY() {\n        return this.$overlapSize.y == 0 ? 0 : this.$yPos / this.$overlapSize.y;\n    }\n    set percY(value) {\n        this.setPercY(value, false);\n    }\n    setPercY(value, ani = false) {\n        this.$owner.ensureBoundsCorrect();\n        this.setPosY(this.$overlapSize.y * NumberUtil.clamp01(value), ani);\n    }\n    get posX() {\n        return this.$xPos;\n    }\n    set posX(value) {\n        this.setPosX(value, false);\n    }\n    setPosX(value, ani = false) {\n        this.$owner.ensureBoundsCorrect();\n        if (this.$loop == 1)\n            value = this.loopCheckingNewPos(value, 'x');\n        value = NumberUtil.clamp(value, 0, this.$overlapSize.x);\n        if (value != this.$xPos) {\n            this.$xPos = value;\n            this.posChanged(ani);\n        }\n    }\n    get posY() {\n        return this.$yPos;\n    }\n    set posY(value) {\n        this.setPosY(value, false);\n    }\n    setPosY(value, ani = false) {\n        this.$owner.ensureBoundsCorrect();\n        if (this.$loop == 1)\n            value = this.loopCheckingNewPos(value, 'y');\n        value = NumberUtil.clamp(value, 0, this.$overlapSize.y);\n        if (value != this.$yPos) {\n            this.$yPos = value;\n            this.posChanged(ani);\n        }\n    }\n    get contentWidth() {\n        return this.$contentSize.x;\n    }\n    get contentHeight() {\n        return this.$contentSize.y;\n    }\n    get viewWidth() {\n        return this.$viewSize.x;\n    }\n    set viewWidth(value) {\n        value = value + this.$owner.margin.left + this.$owner.margin.right;\n        if (this.$vtScrollBar != null)\n            value += this.$vtScrollBar.width;\n        this.$owner.width = value;\n    }\n    get viewHeight() {\n        return this.$viewSize.y;\n    }\n    set viewHeight(value) {\n        value = value + this.$owner.margin.top + this.$owner.margin.bottom;\n        if (this.$hzScrollBar != null)\n            value += this.$hzScrollBar.height;\n        this.$owner.height = value;\n    }\n    get currentPageX() {\n        if (!this.$pageMode)\n            return 0;\n        var page = Math.floor(this.$xPos / this.$pageSize.x);\n        if (this.$xPos - page * this.$pageSize.x > this.$pageSize.x * 0.5)\n            page++;\n        return page;\n    }\n    set currentPageX(value) {\n        if (this.$pageMode && this.$overlapSize.x > 0)\n            this.setPosX(value * this.$pageSize.x, false);\n    }\n    get currentPageY() {\n        if (!this.$pageMode)\n            return 0;\n        let page = Math.floor(this.$yPos / this.$pageSize.y);\n        if (this.$yPos - page * this.$pageSize.y > this.$pageSize.y * 0.5)\n            page++;\n        return page;\n    }\n    set currentPageY(value) {\n        if (this.$pageMode && this.$overlapSize.y > 0)\n            this.setPosY(value * this.$pageSize.y, false);\n    }\n    get isBottomMost() {\n        return this.$yPos == this.$overlapSize.y || this.$overlapSize.y == 0;\n    }\n    get isRightMost() {\n        return this.$xPos == this.$overlapSize.x || this.$overlapSize.x == 0;\n    }\n    get pageController() {\n        return this.$pageController;\n    }\n    set pageController(value) {\n        this.$pageController = value;\n    }\n    get scrollingPosX() {\n        return NumberUtil.clamp(-this.$container.x, 0, this.$overlapSize.x);\n    }\n    get scrollingPosY() {\n        return NumberUtil.clamp(-this.$container.y, 0, this.$overlapSize.y);\n    }\n    scrollTop(ani = false) {\n        this.setPercY(0, ani);\n    }\n    scrollBottom(ani = false) {\n        this.setPercY(1, ani);\n    }\n    scrollUp(ratio = 1, ani = false) {\n        if (this.$pageMode)\n            this.setPosY(this.$yPos - this.$pageSize.y * ratio, ani);\n        else\n            this.setPosY(this.$yPos - this.$scrollSpeed * ratio, ani);\n    }\n    scrollDown(ratio = 1, ani = false) {\n        if (this.$pageMode)\n            this.setPosY(this.$yPos + this.$pageSize.y * ratio, ani);\n        else\n            this.setPosY(this.$yPos + this.$scrollSpeed * ratio, ani);\n    }\n    scrollLeft(ratio = 1, ani = false) {\n        if (this.$pageMode)\n            this.setPosX(this.$xPos - this.$pageSize.x * ratio, ani);\n        else\n            this.setPosX(this.$xPos - this.$scrollSpeed * ratio, ani);\n    }\n    scrollRight(ratio = 1, ani = false) {\n        if (this.$pageMode)\n            this.setPosX(this.$xPos + this.$pageSize.x * ratio, ani);\n        else\n            this.setPosX(this.$xPos + this.$scrollSpeed * ratio, ani);\n    }\n    scrollToView(target, ani = false, snapToFirst = false) {\n        this.$owner.ensureBoundsCorrect();\n        if (this.$needRefresh)\n            this.refresh();\n        let rect;\n        if (target instanceof GObject) {\n            if (target.parent != this.$owner) {\n                target.parent.localToGlobalRect(target.x, target.y, target.width, target.height, ScrollPane.sHelperRect);\n                rect = this.$owner.globalToLocalRect(ScrollPane.sHelperRect.x, ScrollPane.sHelperRect.y, ScrollPane.sHelperRect.width, ScrollPane.sHelperRect.height, ScrollPane.sHelperRect);\n            }\n            else {\n                rect = ScrollPane.sHelperRect;\n                rect.x = target.x;\n                rect.y = target.y;\n                rect.width = target.width;\n                rect.height = target.height;\n            }\n        }\n        else\n            rect = target;\n        if (this.$overlapSize.y > 0) {\n            const bottom = this.$yPos + this.$viewSize.y;\n            if (snapToFirst || rect.y <= this.$yPos || rect.height >= this.$viewSize.y) {\n                if (this.$pageMode)\n                    this.setPosY(Math.floor(rect.y / this.$pageSize.y) * this.$pageSize.y, ani);\n                else\n                    this.setPosY(rect.y, ani);\n            }\n            else if (rect.y + rect.height > bottom) {\n                if (this.$pageMode)\n                    this.setPosY(Math.floor(rect.y / this.$pageSize.y) * this.$pageSize.y, ani);\n                else if (rect.height <= this.$viewSize.y / 2)\n                    this.setPosY(rect.y + rect.height * 2 - this.$viewSize.y, ani);\n                else\n                    this.setPosY(rect.y + rect.height - this.$viewSize.y, ani);\n            }\n        }\n        if (this.$overlapSize.x > 0) {\n            let right = this.$xPos + this.$viewSize.x;\n            if (snapToFirst || rect.x <= this.$xPos || rect.width >= this.$viewSize.x) {\n                if (this.$pageMode)\n                    this.setPosX(Math.floor(rect.x / this.$pageSize.x) * this.$pageSize.x, ani);\n                else\n                    this.setPosX(rect.x, ani);\n            }\n            else if (rect.x + rect.width > right) {\n                if (this.$pageMode)\n                    this.setPosX(Math.floor(rect.x / this.$pageSize.x) * this.$pageSize.x, ani);\n                else if (rect.width <= this.$viewSize.x / 2)\n                    this.setPosX(rect.x + rect.width * 2 - this.$viewSize.x, ani);\n                else\n                    this.setPosX(rect.x + rect.width - this.$viewSize.x, ani);\n            }\n        }\n        if (!ani && this.$needRefresh)\n            this.refresh();\n    }\n    isChildInView(obj) {\n        if (this.$overlapSize.y > 0) {\n            var dist = obj.y + this.$container.y;\n            if (dist < -obj.height || dist > this.$viewSize.y)\n                return false;\n        }\n        if (this.$overlapSize.x > 0) {\n            dist = obj.x + this.$container.x;\n            if (dist < -obj.width || dist > this.$viewSize.x)\n                return false;\n        }\n        return true;\n    }\n    cancelDragging() {\n        Decls$1.GRoot.inst.nativeStage.off(InteractiveEvents.Move, this.$mouseMoveEvent);\n        Decls$1.GRoot.inst.nativeStage.off(InteractiveEvents.Up, this.$mouseUpEvent);\n        Decls$1.GRoot.inst.nativeStage.off(InteractiveEvents.Click, this.$clickEvent);\n        if (ScrollPane.draggingPane == this)\n            ScrollPane.draggingPane = null;\n        ScrollPane.$gestureFlag = 0;\n        this.$isDragging = false;\n        this.$maskContainer.mouseEnabled = true;\n    }\n    get isDragging() {\n        return this.$isDragging;\n    }\n    lockHeader(size) {\n        if (this.$headerLockedSize == size)\n            return;\n        this.$headerLockedSize = size;\n        if (!this.$refreshEventDispatching &&\n            this.$container[this.$refreshBarAxis] >= 0) {\n            this.$tweenStart.setValues(this.$container.x, this.$container.y);\n            this.$tweenChange.setValues(0, 0);\n            this.$tweenChange[this.$refreshBarAxis] =\n                this.$headerLockedSize - this.$tweenStart[this.$refreshBarAxis];\n            this.$tweenDuration.setValues(ScrollPane.TWEEN_DEFAULT_DURATION, ScrollPane.TWEEN_DEFAULT_DURATION);\n            this.$tweenTime.setValues(0, 0);\n            this.$tweening = 2;\n            GTimer.inst.addLoop(1, this.tweenUpdate, this);\n        }\n    }\n    lockFooter(size) {\n        if (this.$footerLockedSize == size)\n            return;\n        this.$footerLockedSize = size;\n        if (!this.$refreshEventDispatching &&\n            this.$container[this.$refreshBarAxis] <=\n                -this.$overlapSize[this.$refreshBarAxis]) {\n            this.$tweenStart.setValues(this.$container.x, this.$container.y);\n            this.$tweenChange.setValues(0, 0);\n            let max = this.$overlapSize[this.$refreshBarAxis];\n            if (max == 0)\n                max = Math.max(this.$contentSize[this.$refreshBarAxis] +\n                    this.$footerLockedSize -\n                    this.$viewSize[this.$refreshBarAxis], 0);\n            else\n                max += this.$footerLockedSize;\n            this.$tweenChange[this.$refreshBarAxis] =\n                -max - this.$tweenStart[this.$refreshBarAxis];\n            this.$tweenDuration.setValues(ScrollPane.TWEEN_DEFAULT_DURATION, ScrollPane.TWEEN_DEFAULT_DURATION);\n            this.$tweenTime.setValues(0, 0);\n            this.$tweening = 2;\n            GTimer.inst.addLoop(1, this.tweenUpdate, this);\n        }\n    }\n    /**\n     * @internal\n     */\n    onOwnerSizeChanged() {\n        this.setSize(this.$owner.width, this.$owner.height);\n        this.posChanged(false);\n    }\n    /**\n     * @internal\n     */\n    handleControllerChanged(c) {\n        if (this.$pageController == c) {\n            if (this.$scrollType == 0 /* Horizontal */)\n                this.currentPageX = c.selectedIndex;\n            else\n                this.currentPageY = c.selectedIndex;\n        }\n    }\n    updatePageController() {\n        if (this.$pageController != null && !this.$pageController.$updating) {\n            let index;\n            if (this.$scrollType == 0 /* Horizontal */)\n                index = this.currentPageX;\n            else\n                index = this.currentPageY;\n            if (index < this.$pageController.pageCount) {\n                const c = this.$pageController;\n                this.$pageController = null; //prevent from handleControllerChanged calling\n                c.selectedIndex = index;\n                this.$pageController = c;\n            }\n        }\n    }\n    /**\n     * @internal\n     */\n    adjustMaskContainer() {\n        let x, y;\n        if (this.$displayOnLeft && this.$vtScrollBar != null)\n            x = Math.floor(this.$owner.margin.left + this.$vtScrollBar.width);\n        else\n            x = Math.floor(this.$owner.margin.left);\n        y = Math.floor(this.$owner.margin.top);\n        this.$maskContainer.set({ x, y });\n        if (this.$owner.$alignOffset.x != 0 || this.$owner.$alignOffset.y != 0) {\n            if (this.$alignContainer == null) {\n                this.$alignContainer = new createjs.Container();\n                this.$maskContainer.addChild(this.$alignContainer);\n                this.$alignContainer.addChild(this.$container);\n            }\n            this.$alignContainer.set({ x: this.$owner.$alignOffset.x, y: this.$owner.$alignOffset.y });\n        }\n        else if (this.$alignContainer)\n            this.$alignContainer.set({ x: 0, y: 0 });\n    }\n    setSize(width, height) {\n        this.adjustMaskContainer();\n        if (this.$hzScrollBar) {\n            this.$hzScrollBar.y = height - this.$hzScrollBar.height;\n            if (this.$vtScrollBar && !this.$vScrollNone) {\n                this.$hzScrollBar.width =\n                    width - this.$vtScrollBar.width - this.$scrollBarMargin.left - this.$scrollBarMargin.right;\n                if (this.$displayOnLeft)\n                    this.$hzScrollBar.x = this.$scrollBarMargin.left + this.$vtScrollBar.width;\n                else\n                    this.$hzScrollBar.x = this.$scrollBarMargin.left;\n            }\n            else {\n                this.$hzScrollBar.width = width - this.$scrollBarMargin.left - this.$scrollBarMargin.right;\n                this.$hzScrollBar.x = this.$scrollBarMargin.left;\n            }\n        }\n        if (this.$vtScrollBar) {\n            if (!this.$displayOnLeft)\n                this.$vtScrollBar.x = width - this.$vtScrollBar.width;\n            if (this.$hzScrollBar)\n                this.$vtScrollBar.height =\n                    height -\n                        this.$hzScrollBar.height -\n                        this.$scrollBarMargin.top -\n                        this.$scrollBarMargin.bottom;\n            else\n                this.$vtScrollBar.height = height - this.$scrollBarMargin.top - this.$scrollBarMargin.bottom;\n            this.$vtScrollBar.y = this.$scrollBarMargin.top;\n        }\n        this.$viewSize.x = width;\n        this.$viewSize.y = height;\n        if (this.$hzScrollBar && !this.$hScrollNone)\n            this.$viewSize.y -= this.$hzScrollBar.height;\n        if (this.$vtScrollBar && !this.$vScrollNone)\n            this.$viewSize.x -= this.$vtScrollBar.width;\n        this.$viewSize.x -= this.$owner.margin.left + this.$owner.margin.right;\n        this.$viewSize.y -= this.$owner.margin.top + this.$owner.margin.bottom;\n        this.$viewSize.x = Math.max(1, this.$viewSize.x);\n        this.$viewSize.y = Math.max(1, this.$viewSize.y);\n        this.$pageSize.x = this.$viewSize.x;\n        this.$pageSize.y = this.$viewSize.y;\n        this.handleSizeChanged();\n    }\n    setContentSize(w, h) {\n        if (this.$contentSize.x == w && this.$contentSize.y == h)\n            return;\n        this.$contentSize.x = w;\n        this.$contentSize.y = h;\n        this.handleSizeChanged();\n    }\n    /**\n     * @internal\n     */\n    changeContentSizeOnScrolling(deltaWidth, deltaHeight, deltaPosX, deltaPosY) {\n        const isRightmost = this.$xPos == this.$overlapSize.x;\n        const isBottom = this.$yPos == this.$overlapSize.y;\n        this.$contentSize.x += deltaWidth;\n        this.$contentSize.y += deltaHeight;\n        this.handleSizeChanged();\n        if (this.$tweening == 1) {\n            //if the last scroll is CLINGING-SIDE, then just continue to cling\n            if (deltaWidth != 0 && isRightmost && this.$tweenChange.x < 0) {\n                this.$xPos = this.$overlapSize.x;\n                this.$tweenChange.x = -this.$xPos - this.$tweenStart.x;\n            }\n            if (deltaHeight != 0 && isBottom && this.$tweenChange.y < 0) {\n                this.$yPos = this.$overlapSize.y;\n                this.$tweenChange.y = -this.$yPos - this.$tweenStart.y;\n            }\n        }\n        else if (this.$tweening == 2) {\n            //re-pos to ensure the scrolling will go on smooth\n            if (deltaPosX != 0) {\n                this.$container.x -= deltaPosX;\n                this.$tweenStart.x -= deltaPosX;\n                this.$xPos = -this.$container.x;\n            }\n            if (deltaPosY != 0) {\n                this.$container.y -= deltaPosY;\n                this.$tweenStart.y -= deltaPosY;\n                this.$yPos = -this.$container.y;\n            }\n        }\n        else if (this.$isDragging) {\n            if (deltaPosX != 0) {\n                this.$container.x -= deltaPosX;\n                this.$containerPos.x -= deltaPosX;\n                this.$xPos = -this.$container.x;\n            }\n            if (deltaPosY != 0) {\n                this.$container.y -= deltaPosY;\n                this.$containerPos.y -= deltaPosY;\n                this.$yPos = -this.$container.y;\n            }\n        }\n        else {\n            //if the last scroll is CLINGING-SIDE, then just continue to cling\n            if (deltaWidth != 0 && isRightmost) {\n                this.$xPos = this.$overlapSize.x;\n                this.$container.x = -this.$xPos;\n            }\n            if (deltaHeight != 0 && isBottom) {\n                this.$yPos = this.$overlapSize.y;\n                this.$container.y = -this.$yPos;\n            }\n        }\n        if (this.$pageMode)\n            this.updatePageController();\n    }\n    handleSizeChanged(onScrolling = false) {\n        if (this.$displayOnDemand) {\n            if (this.$vtScrollBar) {\n                if (this.$contentSize.y <= this.$viewSize.y) {\n                    if (!this.$vScrollNone) {\n                        this.$vScrollNone = true;\n                        this.$viewSize.x += this.$vtScrollBar.width;\n                    }\n                }\n                else {\n                    if (this.$vScrollNone) {\n                        this.$vScrollNone = false;\n                        this.$viewSize.x -= this.$vtScrollBar.width;\n                    }\n                }\n            }\n            if (this.$hzScrollBar) {\n                if (this.$contentSize.x <= this.$viewSize.x) {\n                    if (!this.$hScrollNone) {\n                        this.$hScrollNone = true;\n                        this.$viewSize.y += this.$hzScrollBar.height;\n                    }\n                }\n                else {\n                    if (this.$hScrollNone) {\n                        this.$hScrollNone = false;\n                        this.$viewSize.y -= this.$hzScrollBar.height;\n                    }\n                }\n            }\n        }\n        if (this.$vtScrollBar) {\n            if (this.$viewSize.y < this.$vtScrollBar.minSize)\n                //use this.$vtScrollBar.displayObject.visible instead of this.$vtScrollBar.visible... ScrollBar actually is not in its owner's display tree, so vtScrollBar.visible will not work\n                this.$vtScrollBar.displayObject.visible = false;\n            else {\n                this.$vtScrollBar.displayObject.visible = this.$scrollBarVisible && !this.$vScrollNone;\n                if (this.$contentSize.y == 0)\n                    this.$vtScrollBar.displayPerc = 0;\n                else\n                    this.$vtScrollBar.displayPerc = Math.min(1, this.$viewSize.y / this.$contentSize.y);\n            }\n        }\n        if (this.$hzScrollBar) {\n            if (this.$viewSize.x < this.$hzScrollBar.minSize)\n                this.$hzScrollBar.displayObject.visible = false;\n            else {\n                this.$hzScrollBar.displayObject.visible = this.$scrollBarVisible && !this.$hScrollNone;\n                if (this.$contentSize.x == 0)\n                    this.$hzScrollBar.displayPerc = 0;\n                else\n                    this.$hzScrollBar.displayPerc = Math.min(1, this.$viewSize.x / this.$contentSize.x);\n            }\n        }\n        const rect = this.$maskContainer.scrollRect;\n        if (rect) {\n            rect.width = this.$viewSize.x;\n            rect.height = this.$viewSize.y;\n            this.$maskContainer.scrollRect = rect;\n        }\n        if (this.$scrollType == 0 /* Horizontal */ || this.$scrollType == 2 /* Both */)\n            this.$overlapSize.x = Math.ceil(Math.max(0, this.$contentSize.x - this.$viewSize.x));\n        else\n            this.$overlapSize.x = 0;\n        if (this.$scrollType == 1 /* Vertical */ || this.$scrollType == 2 /* Both */)\n            this.$overlapSize.y = Math.ceil(Math.max(0, this.$contentSize.y - this.$viewSize.y));\n        else\n            this.$overlapSize.y = 0;\n        //bounds checking\n        this.$xPos = NumberUtil.clamp(this.$xPos, 0, this.$overlapSize.x);\n        this.$yPos = NumberUtil.clamp(this.$yPos, 0, this.$overlapSize.y);\n        if (this.$refreshBarAxis != null) {\n            var max = this.$overlapSize[this.$refreshBarAxis];\n            if (max == 0)\n                max = Math.max(this.$contentSize[this.$refreshBarAxis] +\n                    this.$footerLockedSize -\n                    this.$viewSize[this.$refreshBarAxis], 0);\n            else\n                max += this.$footerLockedSize;\n            if (this.$refreshBarAxis == 'x') {\n                this.$container.set({\n                    x: NumberUtil.clamp(this.$container.x, -max, this.$headerLockedSize),\n                    y: NumberUtil.clamp(this.$container.y, -this.$overlapSize.y, 0)\n                });\n            }\n            else {\n                this.$container.set({\n                    x: NumberUtil.clamp(this.$container.x, -this.$overlapSize.x, 0),\n                    y: NumberUtil.clamp(this.$container.y, -max, this.$headerLockedSize)\n                });\n            }\n            if (this.$header != null) {\n                if (this.$refreshBarAxis == 'x')\n                    this.$header.height = this.$viewSize.y;\n                else\n                    this.$header.width = this.$viewSize.x;\n            }\n            if (this.$footer != null) {\n                if (this.$refreshBarAxis == 'y')\n                    this.$footer.height = this.$viewSize.y;\n                else\n                    this.$footer.width = this.$viewSize.x;\n            }\n        }\n        else {\n            this.$container.set({\n                x: NumberUtil.clamp(this.$container.x, -this.$overlapSize.x, 0),\n                y: NumberUtil.clamp(this.$container.y, -this.$overlapSize.y, 0)\n            });\n        }\n        this.syncScrollBar();\n        this.checkRefreshBar();\n        if (this.$pageMode)\n            this.updatePageController();\n    }\n    posChanged(ani) {\n        if (this.$aniFlag == 0)\n            this.$aniFlag = ani ? 1 : -1;\n        else if (this.$aniFlag == 1 && !ani)\n            this.$aniFlag = -1;\n        this.$needRefresh = true;\n        GTimer.inst.callLater(this.refresh, this);\n    }\n    refresh() {\n        this.$needRefresh = false;\n        GTimer.inst.remove(this.refresh, this);\n        if (this.$pageMode || this.$snapToItem) {\n            ScrollPane.sEndPos.setValues(-this.$xPos, -this.$yPos);\n            this.alignPosition(ScrollPane.sEndPos, false);\n            this.$xPos = -ScrollPane.sEndPos.x;\n            this.$yPos = -ScrollPane.sEndPos.y;\n        }\n        this.refresh2();\n        let evt = new createjs.Event(\"__scroll\" /* SCROLL */, true, false);\n        this.dispatchEvent(evt, this);\n        if (this.$needRefresh) {\n            //developer might modify position in the callback, so here refresh again to avoid flickering\n            this.$needRefresh = false;\n            GTimer.inst.remove(this.refresh, this);\n            this.refresh2();\n        }\n        this.syncScrollBar();\n        this.$aniFlag = 0;\n    }\n    refresh2() {\n        if (this.$aniFlag == 1 && !this.$isDragging) {\n            let posX;\n            let posY;\n            if (this.$overlapSize.x > 0)\n                posX = -Math.floor(this.$xPos);\n            else {\n                if (this.$container.x != 0)\n                    this.$container.x = 0;\n                posX = 0;\n            }\n            if (this.$overlapSize.y > 0)\n                posY = -Math.floor(this.$yPos);\n            else {\n                if (this.$container.y != 0)\n                    this.$container.y = 0;\n                posY = 0;\n            }\n            if (posX != this.$container.x || posY != this.$container.y) {\n                this.$tweening = 1;\n                this.$tweenTime.setValues(0, 0);\n                this.$tweenDuration.setValues(ScrollPane.TWEEN_MANUALLY_SET_DURATION, ScrollPane.TWEEN_MANUALLY_SET_DURATION);\n                this.$tweenStart.setValues(this.$container.x, this.$container.y);\n                this.$tweenChange.setValues(posX - this.$tweenStart.x, posY - this.$tweenStart.y);\n                GTimer.inst.addLoop(1, this.tweenUpdate, this);\n            }\n            else if (this.$tweening != 0)\n                this.killTween();\n        }\n        else {\n            if (this.$tweening != 0)\n                this.killTween();\n            this.$container.set({ x: Math.floor(-this.$xPos), y: Math.floor(-this.$yPos) });\n            this.loopCheckingCurrent();\n        }\n        if (this.$pageMode)\n            this.updatePageController();\n    }\n    syncScrollBar(end = false) {\n        if (this.$vtScrollBar != null) {\n            this.$vtScrollBar.scrollPerc =\n                this.$overlapSize.y == 0\n                    ? 0\n                    : NumberUtil.clamp(-this.$container.y, 0, this.$overlapSize.y) / this.$overlapSize.y;\n            if (this.$scrollBarDisplayAuto)\n                this.showScrollBar(!end);\n        }\n        if (this.$hzScrollBar != null) {\n            this.$hzScrollBar.scrollPerc =\n                this.$overlapSize.x == 0\n                    ? 0\n                    : NumberUtil.clamp(-this.$container.x, 0, this.$overlapSize.x) / this.$overlapSize.x;\n            if (this.$scrollBarDisplayAuto)\n                this.showScrollBar(!end);\n        }\n        if (end)\n            this.$maskContainer.mouseEnabled = true;\n    }\n    $mouseDown(e) {\n        if (!this.$touchEffect)\n            return;\n        if (this.$tweening != 0) {\n            this.killTween();\n            this.$isDragging = true;\n        }\n        else\n            this.$isDragging = false;\n        const globalMouse = fairygui_module_isMobile.any\n            ? this.$owner.globalToLocal(e.localX, e.localY)\n            : this.$owner.globalToLocal(Decls$1.GRoot.globalMouseStatus.mouseX, Decls$1.GRoot.globalMouseStatus.mouseY, ScrollPane.sHelperPoint);\n        this.$containerPos.setValues(this.$container.x, this.$container.y);\n        this.$beginTouchPos.copy(globalMouse);\n        this.$lastTouchPos.copy(globalMouse);\n        this.$lastTouchGlobalPos.copy(globalMouse);\n        this.$isHoldAreaDone = false;\n        this.$velocity.setValues(0, 0);\n        this.$velocityScale = 1;\n        this.$lastMoveTime = GTimer.inst.curTime / 1000;\n        this.$mouseMoveEvent = Decls$1.GRoot.inst.nativeStage.on(InteractiveEvents.Move, this.$mouseMove, this);\n        this.$mouseUpEvent = Decls$1.GRoot.inst.nativeStage.on(InteractiveEvents.Up, this.$mouseUp, this);\n        this.$clickEvent = Decls$1.GRoot.inst.nativeStage.on(InteractiveEvents.Click, this.$click, this);\n    }\n    $mouseMove() {\n        if (!this.$touchEffect)\n            return;\n        if ((ScrollPane.draggingPane != null && ScrollPane.draggingPane != this) ||\n            GObject.draggingObject != null)\n            return;\n        let sensitivity = UIConfig.touchScrollSensitivity;\n        const globalMouse = this.$owner.globalToLocal(Decls$1.GRoot.globalMouseStatus.mouseX, Decls$1.GRoot.globalMouseStatus.mouseY, ScrollPane.sHelperPoint);\n        let diff, diff2;\n        let sv, sh;\n        if (this.$scrollType == 1 /* Vertical */) {\n            if (!this.$isHoldAreaDone) {\n                //gesture on vertical dir is being observed\n                ScrollPane.$gestureFlag |= 1;\n                diff = Math.abs(this.$beginTouchPos.y - globalMouse.y);\n                if (diff < sensitivity)\n                    return;\n                if ((ScrollPane.$gestureFlag & 2) != 0) {\n                    diff2 = Math.abs(this.$beginTouchPos.x - globalMouse.x);\n                    if (diff < diff2)\n                        return;\n                }\n            }\n            sv = true;\n        }\n        else if (this.$scrollType == 0 /* Horizontal */) {\n            if (!this.$isHoldAreaDone) {\n                ScrollPane.$gestureFlag |= 2; //gesture on horz dir is being observed\n                diff = Math.abs(this.$beginTouchPos.x - globalMouse.x);\n                if (diff < sensitivity)\n                    return;\n                if ((ScrollPane.$gestureFlag & 1) != 0) {\n                    diff2 = Math.abs(this.$beginTouchPos.y - globalMouse.y);\n                    if (diff < diff2)\n                        return;\n                }\n            }\n            sh = true;\n        }\n        else {\n            ScrollPane.$gestureFlag = 3; //both\n            if (!this.$isHoldAreaDone) {\n                diff = Math.abs(this.$beginTouchPos.y - globalMouse.y);\n                if (diff < sensitivity) {\n                    diff = Math.abs(this.$beginTouchPos.x - globalMouse.x);\n                    if (diff < sensitivity)\n                        return;\n                }\n            }\n            sv = sh = true;\n        }\n        let newPosX = Math.floor(this.$containerPos.x + globalMouse.x - this.$beginTouchPos.x);\n        let newPosY = Math.floor(this.$containerPos.y + globalMouse.y - this.$beginTouchPos.y);\n        if (sv) {\n            if (newPosY > 0) {\n                if (!this.$bouncebackEffect)\n                    this.$container.y = 0;\n                else if (this.$header != null && this.$header.height != 0)\n                    //TODO: height -> maxHeight\n                    this.$container.y = Math.floor(Math.min(newPosY * 0.5, this.$header.height));\n                else\n                    this.$container.y = Math.floor(Math.min(newPosY * 0.5, this.$viewSize.y * ScrollPane.PULL_DIST_RATIO));\n            }\n            else if (newPosY < -this.$overlapSize.y) {\n                if (!this.$bouncebackEffect)\n                    this.$container.y = -this.$overlapSize.y;\n                else if (this.$footer != null && this.$footer.height > 0)\n                    //TODO: height -> maxHeight\n                    this.$container.y = Math.floor(Math.max((newPosY + this.$overlapSize.y) * 0.5, -this.$footer.height) -\n                        this.$overlapSize.y);\n                else\n                    this.$container.y = Math.floor(Math.max((newPosY + this.$overlapSize.y) * 0.5, -this.$viewSize.y * ScrollPane.PULL_DIST_RATIO) - this.$overlapSize.y);\n            }\n            else\n                this.$container.y = newPosY;\n        }\n        if (sh) {\n            if (newPosX > 0) {\n                if (!this.$bouncebackEffect)\n                    this.$container.x = 0;\n                else if (this.$header != null && this.$header.width != 0)\n                    //TODO: width -> maxWidth\n                    this.$container.x = Math.floor(Math.min(newPosX * 0.5, this.$header.width));\n                else\n                    this.$container.x = Math.floor(Math.min(newPosX * 0.5, this.$viewSize.x * ScrollPane.PULL_DIST_RATIO));\n            }\n            else if (newPosX < 0 - this.$overlapSize.x) {\n                if (!this.$bouncebackEffect)\n                    this.$container.x = -this.$overlapSize.x;\n                else if (this.$footer != null && this.$footer.width > 0)\n                    //TODO: width -> maxWidth\n                    this.$container.x = Math.floor(Math.max((newPosX + this.$overlapSize.x) * 0.5, -this.$footer.width) -\n                        this.$overlapSize.x);\n                else\n                    this.$container.x = Math.floor(Math.max((newPosX + this.$overlapSize.x) * 0.5, -this.$viewSize.x * ScrollPane.PULL_DIST_RATIO) - this.$overlapSize.x);\n            }\n            else\n                this.$container.x = newPosX;\n        }\n        //update acceleration\n        const frameRate = createjs.Ticker.framerate;\n        const now = GTimer.inst.curTime / 1000;\n        const deltaTime = Math.max(now - this.$lastMoveTime, 1 / frameRate);\n        let deltaPositionX = globalMouse.x - this.$lastTouchPos.x;\n        let deltaPositionY = globalMouse.y - this.$lastTouchPos.y;\n        if (!sh)\n            deltaPositionX = 0;\n        if (!sv)\n            deltaPositionY = 0;\n        if (deltaTime != 0) {\n            const elapsed = deltaTime * frameRate - 1;\n            if (elapsed > 1) {\n                const factor = Math.pow(0.833, elapsed);\n                this.$velocity.x = this.$velocity.x * factor;\n                this.$velocity.y = this.$velocity.y * factor;\n            }\n            this.$velocity.x = NumberUtil.lerp(this.$velocity.x, (deltaPositionX * 60) / frameRate / deltaTime, deltaTime * 10);\n            this.$velocity.y = NumberUtil.lerp(this.$velocity.y, (deltaPositionY * 60) / frameRate / deltaTime, deltaTime * 10);\n        }\n        //in the inertia scrolling we need the offset value to screen space, so here we need to reocrd the offset ratio\n        const deltaGlobalPositionX = this.$lastTouchGlobalPos.x - globalMouse.x;\n        const deltaGlobalPositionY = this.$lastTouchGlobalPos.y - globalMouse.y;\n        if (deltaPositionX != 0)\n            this.$velocityScale = Math.abs(deltaGlobalPositionX / deltaPositionX);\n        else if (deltaPositionY != 0)\n            this.$velocityScale = Math.abs(deltaGlobalPositionY / deltaPositionY);\n        this.$lastTouchPos.copy(globalMouse);\n        this.$lastTouchGlobalPos.copy(globalMouse);\n        this.$lastMoveTime = now;\n        //update position\n        if (this.$overlapSize.x > 0)\n            this.$xPos = NumberUtil.clamp(-this.$container.x, 0, this.$overlapSize.x);\n        if (this.$overlapSize.y > 0)\n            this.$yPos = NumberUtil.clamp(-this.$container.y, 0, this.$overlapSize.y);\n        if (this.$loop != 0) {\n            newPosX = this.$container.x;\n            newPosY = this.$container.y;\n            if (this.loopCheckingCurrent()) {\n                this.$containerPos.x += this.$container.x - newPosX;\n                this.$containerPos.y += this.$container.y - newPosY;\n            }\n        }\n        ScrollPane.draggingPane = this;\n        this.$isHoldAreaDone = true;\n        this.$isDragging = true;\n        // this.$maskContainer.interactive = false;\n        this.syncScrollBar();\n        this.checkRefreshBar();\n        if (this.$pageMode)\n            this.updatePageController();\n        let evt = new createjs.Event(\"__scroll\" /* SCROLL */, true, false);\n        this.dispatchEvent(evt, this);\n    }\n    $mouseUp() {\n        Decls$1.GRoot.inst.nativeStage.off(InteractiveEvents.Move, this.$mouseMoveEvent);\n        Decls$1.GRoot.inst.nativeStage.off(InteractiveEvents.Up, this.$mouseMoveEvent);\n        Decls$1.GRoot.inst.nativeStage.off(InteractiveEvents.Click, this.$clickEvent);\n        if (ScrollPane.draggingPane == this)\n            ScrollPane.draggingPane = null;\n        ScrollPane.$gestureFlag = 0;\n        if (!this.$isDragging || !this.$touchEffect) {\n            this.$isDragging = false;\n            this.$maskContainer.mouseEnabled = true;\n            return;\n        }\n        this.$isDragging = false;\n        this.$maskContainer.mouseEnabled = true;\n        this.$tweenStart.setValues(this.$container.x, this.$container.y);\n        ScrollPane.sEndPos.setValues(this.$tweenStart.x, this.$tweenStart.y);\n        let flag = false;\n        if (this.$container.x > 0) {\n            ScrollPane.sEndPos.x = 0;\n            flag = true;\n        }\n        else if (this.$container.x < -this.$overlapSize.x) {\n            ScrollPane.sEndPos.x = -this.$overlapSize.x;\n            flag = true;\n        }\n        if (this.$container.y > 0) {\n            ScrollPane.sEndPos.y = 0;\n            flag = true;\n        }\n        else if (this.$container.y < -this.$overlapSize.y) {\n            ScrollPane.sEndPos.y = -this.$overlapSize.y;\n            flag = true;\n        }\n        if (flag) {\n            this.$tweenChange.setValues(ScrollPane.sEndPos.x - this.$tweenStart.x, ScrollPane.sEndPos.y - this.$tweenStart.y);\n            if (this.$tweenChange.x < -UIConfig.touchDragSensitivity ||\n                this.$tweenChange.y < -UIConfig.touchDragSensitivity) {\n                this.$refreshEventDispatching = true;\n                let evt = new createjs.Event(\"__pullDownRelease\" /* PULL_DOWN_RELEASE */, true, false);\n                this.dispatchEvent(evt, this);\n                this.$refreshEventDispatching = false;\n            }\n            else if (this.$tweenChange.x > UIConfig.touchDragSensitivity ||\n                this.$tweenChange.y > UIConfig.touchDragSensitivity) {\n                this.$refreshEventDispatching = true;\n                let evt = new createjs.Event(\"__pullUpRelease\" /* PULL_UP_RELEASE */, true, false);\n                this.dispatchEvent(evt, this);\n                this.$refreshEventDispatching = false;\n            }\n            if (this.$headerLockedSize > 0 &&\n                ScrollPane.sEndPos[this.$refreshBarAxis] == 0) {\n                ScrollPane.sEndPos[this.$refreshBarAxis] = this.$headerLockedSize;\n                this.$tweenChange.x = ScrollPane.sEndPos.x - this.$tweenStart.x;\n                this.$tweenChange.y = ScrollPane.sEndPos.y - this.$tweenStart.y;\n            }\n            else if (this.$footerLockedSize > 0 &&\n                ScrollPane.sEndPos[this.$refreshBarAxis] ==\n                    -this.$overlapSize[this.$refreshBarAxis]) {\n                var max = this.$overlapSize[this.$refreshBarAxis];\n                if (max == 0)\n                    max = Math.max(this.$contentSize[this.$refreshBarAxis] +\n                        this.$footerLockedSize -\n                        this.$viewSize[this.$refreshBarAxis], 0);\n                else\n                    max += this.$footerLockedSize;\n                ScrollPane.sEndPos[this.$refreshBarAxis] = -max;\n                this.$tweenChange.x = ScrollPane.sEndPos.x - this.$tweenStart.x;\n                this.$tweenChange.y = ScrollPane.sEndPos.y - this.$tweenStart.y;\n            }\n            this.$tweenDuration.setValues(ScrollPane.TWEEN_DEFAULT_DURATION, ScrollPane.TWEEN_DEFAULT_DURATION);\n        }\n        else {\n            if (!this.$inertiaDisabled) {\n                const frameRate = createjs.Ticker.framerate;\n                const elapsed = (GTimer.inst.curTime / 1000 - this.$lastMoveTime) * frameRate - 1;\n                if (elapsed > 1) {\n                    const factor = Math.pow(0.833, elapsed);\n                    this.$velocity.x = this.$velocity.x * factor;\n                    this.$velocity.y = this.$velocity.y * factor;\n                }\n                //calc dist & duration by speed\n                this.updateTargetAndDuration(this.$tweenStart, ScrollPane.sEndPos);\n            }\n            else\n                this.$tweenDuration.setValues(ScrollPane.TWEEN_DEFAULT_DURATION, ScrollPane.TWEEN_DEFAULT_DURATION);\n            ScrollPane.sOldChange.setValues(ScrollPane.sEndPos.x - this.$tweenStart.x, ScrollPane.sEndPos.y - this.$tweenStart.y);\n            //adjust\n            this.loopCheckingTarget(ScrollPane.sEndPos);\n            if (this.$pageMode || this.$snapToItem)\n                this.alignPosition(ScrollPane.sEndPos, true);\n            this.$tweenChange.x = ScrollPane.sEndPos.x - this.$tweenStart.x;\n            this.$tweenChange.y = ScrollPane.sEndPos.y - this.$tweenStart.y;\n            if (this.$tweenChange.x == 0 && this.$tweenChange.y == 0) {\n                if (this.$scrollBarDisplayAuto)\n                    this.showScrollBar(false);\n                return;\n            }\n            if (this.$pageMode || this.$snapToItem) {\n                this.fixDuration('x', ScrollPane.sOldChange.x);\n                this.fixDuration('y', ScrollPane.sOldChange.y);\n            }\n        }\n        this.$tweening = 2;\n        this.$tweenTime.setValues(0, 0);\n        GTimer.inst.addLoop(1, this.tweenUpdate, this);\n    }\n    $click() {\n        this.$isDragging = false;\n    }\n    $mouseWheel(evt) {\n        let event = evt.data.event;\n        if (!this.$mouseWheelEnabled)\n            return;\n        const delta = event.delta > 0 ? -1 : event.delta < 0 ? 1 : 0;\n        if (this.$overlapSize.x > 0 && this.$overlapSize.y == 0) {\n            if (this.$pageMode)\n                this.setPosX(this.$xPos + this.$pageSize.x * delta, false);\n            else\n                this.setPosX(this.$xPos + this.$mouseWheelSpeed * delta, false);\n        }\n        else {\n            if (this.$pageMode)\n                this.setPosY(this.$yPos + this.$pageSize.y * delta, false);\n            else\n                this.setPosY(this.$yPos + this.$mouseWheelSpeed * delta, false);\n        }\n    }\n    $rollOver() {\n        this.showScrollBar(true);\n    }\n    $rollOut() {\n        this.showScrollBar(false);\n    }\n    showScrollBar(visible) {\n        if (visible) {\n            GTimer.inst.remove(this.setScrollBarVisible, this);\n            this.setScrollBarVisible(true);\n        }\n        else\n            GTimer.inst.add(500, 1, this.setScrollBarVisible, this, visible);\n    }\n    setScrollBarVisible(visible) {\n        this.$scrollBarVisible = visible && this.$viewSize.x > 0 && this.$viewSize.y > 0;\n        if (this.$vtScrollBar)\n            this.$vtScrollBar.displayObject.visible = this.$scrollBarVisible && !this.$vScrollNone;\n        if (this.$hzScrollBar)\n            this.$hzScrollBar.displayObject.visible = this.$scrollBarVisible && !this.$hScrollNone;\n    }\n    getLoopPartSize(division, axis) {\n        let pad = 0;\n        // if (this.$owner instanceof GList)\n        //     pad = axis == \"x\" ? this.$owner.columnGap : this.$owner.lineGap;\n        return (this.$contentSize[axis] + pad) / division;\n    }\n    loopCheckingCurrent() {\n        let changed = false;\n        if (this.$loop == 1 && this.$overlapSize.x > 0) {\n            if (this.$xPos < 0.001) {\n                this.$xPos += this.getLoopPartSize(2, 'x');\n                changed = true;\n            }\n            else if (this.$xPos >= this.$overlapSize.x) {\n                this.$xPos -= this.getLoopPartSize(2, 'x');\n                changed = true;\n            }\n        }\n        else if (this.$loop == 2 && this.$overlapSize.y > 0) {\n            if (this.$yPos < 0.001) {\n                this.$yPos += this.getLoopPartSize(2, 'y');\n                changed = true;\n            }\n            else if (this.$yPos >= this.$overlapSize.y) {\n                this.$yPos -= this.getLoopPartSize(2, 'y');\n                changed = true;\n            }\n        }\n        if (changed)\n            this.$container.set({ x: Math.floor(-this.$xPos), y: Math.floor(-this.$yPos) });\n        return changed;\n    }\n    loopCheckingTarget(endPos) {\n        if (this.$loop == 1)\n            this.loopCheckingTarget2(endPos, 'x');\n        if (this.$loop == 2)\n            this.loopCheckingTarget2(endPos, 'y');\n    }\n    loopCheckingTarget2(endPos, axis) {\n        let halfSize;\n        let tmp;\n        if (endPos[axis] > 0) {\n            halfSize = this.getLoopPartSize(2, axis);\n            tmp = this.$tweenStart[axis] - halfSize;\n            if (tmp <= 0 && tmp >= -this.$overlapSize[axis]) {\n                endPos[axis] -= halfSize;\n                this.$tweenStart[axis] = tmp;\n            }\n        }\n        else if (endPos[axis] < -this.$overlapSize[axis]) {\n            halfSize = this.getLoopPartSize(2, axis);\n            tmp = this.$tweenStart[axis] + halfSize;\n            if (tmp <= 0 && tmp >= -this.$overlapSize[axis]) {\n                endPos[axis] += halfSize;\n                this.$tweenStart[axis] = tmp;\n            }\n        }\n    }\n    loopCheckingNewPos(value, axis) {\n        if (this.$overlapSize[axis] == 0)\n            return value;\n        let pos = axis == 'x' ? this.$xPos : this.$yPos;\n        let changed = false;\n        let v;\n        if (value < 0.001) {\n            value += this.getLoopPartSize(2, axis);\n            if (value > pos) {\n                v = this.getLoopPartSize(6, axis);\n                v = Math.ceil((value - pos) / v) * v;\n                pos = NumberUtil.clamp(pos + v, 0, this.$overlapSize[axis]);\n                changed = true;\n            }\n        }\n        else if (value >= this.$overlapSize[axis]) {\n            value -= this.getLoopPartSize(2, axis);\n            if (value < pos) {\n                v = this.getLoopPartSize(6, axis);\n                v = Math.ceil((pos - value) / v) * v;\n                pos = NumberUtil.clamp(pos - v, 0, this.$overlapSize[axis]);\n                changed = true;\n            }\n        }\n        if (changed) {\n            if (axis == 'x')\n                this.$container.x = -Math.floor(pos);\n            else\n                this.$container.y = -Math.floor(pos);\n        }\n        return value;\n    }\n    alignPosition(pos, inertialScrolling) {\n        if (this.$pageMode) {\n            pos.x = this.alignByPage(pos.x, 'x', inertialScrolling);\n            pos.y = this.alignByPage(pos.y, 'y', inertialScrolling);\n        }\n        else if (this.$snapToItem) {\n            var pt = this.$owner.getSnappingPosition(-pos.x, -pos.y, ScrollPane.sHelperPoint);\n            if (pos.x < 0 && pos.x > -this.$overlapSize.x)\n                pos.x = -pt.x;\n            if (pos.y < 0 && pos.y > -this.$overlapSize.y)\n                pos.y = -pt.y;\n        }\n    }\n    alignByPage(pos, axis, inertialScrolling) {\n        let page;\n        if (pos > 0)\n            page = 0;\n        else if (pos < -this.$overlapSize[axis])\n            page =\n                Math.ceil(this.$contentSize[axis] / this.$pageSize[axis]) - 1;\n        else {\n            page = Math.floor(-pos / this.$pageSize[axis]);\n            var change = inertialScrolling\n                ? pos - this.$containerPos[axis]\n                : pos - this.$container[axis];\n            var testPageSize = Math.min(this.$pageSize[axis], this.$contentSize[axis] -\n                (page + 1) * this.$pageSize[axis]);\n            var delta = -pos - page * this.$pageSize[axis];\n            //page mode magnetic\n            if (Math.abs(change) > this.$pageSize[axis]) {\n                if (delta > testPageSize * 0.5)\n                    page++;\n            }\n            else {\n                if (delta > testPageSize * (change < 0 ? 0.3 : 0.7))\n                    page++;\n            }\n            //re-calc dist\n            const dst = this.$pageSize[axis];\n            pos = -page * dst;\n            if (pos < -dst)\n                pos = -dst;\n        }\n        if (inertialScrolling) {\n            var oldPos = this.$tweenStart[axis];\n            var oldPage;\n            if (oldPos > 0)\n                oldPage = 0;\n            else if (oldPos < -this.$overlapSize[axis])\n                oldPage =\n                    Math.ceil(this.$contentSize[axis] / this.$pageSize[axis]) - 1;\n            else\n                oldPage = Math.floor(-oldPos / this.$pageSize[axis]);\n            var startPage = Math.floor(-this.$containerPos[axis] / this.$pageSize[axis]);\n            if (Math.abs(page - startPage) > 1 && Math.abs(oldPage - startPage) <= 1) {\n                if (page > startPage)\n                    page = startPage + 1;\n                else\n                    page = startPage - 1;\n                pos = -page * this.$pageSize[axis];\n            }\n        }\n        return pos;\n    }\n    updateTargetAndDuration(orignPos, resultPos) {\n        resultPos.x = this.updateTargetAndDuration2(orignPos.x, 'x');\n        resultPos.y = this.updateTargetAndDuration2(orignPos.y, 'y');\n    }\n    updateTargetAndDuration2(pos, axis) {\n        let v = this.$velocity[axis];\n        var duration = 0;\n        if (pos > 0)\n            pos = 0;\n        else if (pos < -this.$overlapSize[axis])\n            pos = -this.$overlapSize[axis];\n        else {\n            let v2 = Math.abs(v) * this.$velocityScale;\n            if (fairygui_module_isMobile.any)\n                v2 *=\n                    Math.max(Decls$1.GRoot.inst.stageWrapper.designWidth, Decls$1.GRoot.inst.stageWrapper.designHeight) / Math.max(Decls$1.GRoot.inst.stageWidth, Decls$1.GRoot.inst.stageHeight);\n            //threshold, if too slow, stop it\n            let ratio = 0;\n            if (this.$pageMode || !fairygui_module_isMobile.any) {\n                if (v2 > 500)\n                    ratio = Math.pow((v2 - 500) / 500, 2);\n            }\n            else {\n                if (v2 > 1000)\n                    ratio = Math.pow((v2 - 1000) / 1000, 2);\n            }\n            if (ratio != 0) {\n                if (ratio > 1)\n                    ratio = 1;\n                v2 *= ratio;\n                v *= ratio;\n                this.$velocity[axis] = v;\n                duration = Math.log(60 / v2) / Math.log(this.$decelerationRate) / 60;\n                const change = (v / 60 - 1) / (1 - this.$decelerationRate);\n                //const change: number = Math.floor(v * duration * 0.4);\n                pos += change;\n            }\n        }\n        if (duration < ScrollPane.TWEEN_DEFAULT_DURATION)\n            duration = ScrollPane.TWEEN_DEFAULT_DURATION;\n        this.$tweenDuration[axis] = duration;\n        return pos;\n    }\n    fixDuration(axis, oldChange) {\n        if (this.$tweenChange[axis] == 0 ||\n            Math.abs(this.$tweenChange[axis]) >= Math.abs(oldChange))\n            return;\n        let newDuration = Math.abs(this.$tweenChange[axis] / oldChange) *\n            this.$tweenDuration[axis];\n        if (newDuration < ScrollPane.TWEEN_DEFAULT_DURATION)\n            newDuration = ScrollPane.TWEEN_DEFAULT_DURATION;\n        this.$tweenDuration[axis] = newDuration;\n    }\n    killTween() {\n        //tweening == 1: set to end immediately\n        if (this.$tweening == 1) {\n            this.$container.set({\n                x: this.$tweenStart.x + this.$tweenChange.x,\n                y: this.$tweenStart.y + this.$tweenChange.y\n            });\n            let evt = new createjs.Event(\"__scroll\" /* SCROLL */, true, false);\n            this.dispatchEvent(evt, this);\n        }\n        this.$tweening = 0;\n        GTimer.inst.remove(this.tweenUpdate, this);\n        let evt = new createjs.Event(\"__scrollEnd\" /* SCROLL_END */, true, false);\n        this.dispatchEvent(evt, this);\n    }\n    checkRefreshBar() {\n        if (this.$header == null && this.$footer == null)\n            return;\n        const pos = this.$container[this.$refreshBarAxis];\n        if (this.$header != null) {\n            if (pos > 0) {\n                if (this.$header.displayObject.parent == null)\n                    this.$maskContainer.addChildAt(this.$header.displayObject, 0);\n                const pt = ScrollPane.sHelperPoint;\n                pt.setValues(this.$header.width, this.$header.height);\n                pt[this.$refreshBarAxis] = pos;\n                this.$header.setSize(pt.x, pt.y);\n            }\n            else {\n                if (this.$header.displayObject.parent != null)\n                    this.$maskContainer.removeChild(this.$header.displayObject);\n            }\n        }\n        if (this.$footer != null) {\n            var max = this.$overlapSize[this.$refreshBarAxis];\n            if (pos < -max || (max == 0 && this.$footerLockedSize > 0)) {\n                if (this.$footer.displayObject.parent == null)\n                    this.$maskContainer.addChildAt(this.$footer.displayObject, 0);\n                const pt = ScrollPane.sHelperPoint;\n                pt.setValues(this.$footer.x, this.$footer.y);\n                if (max > 0)\n                    pt[this.$refreshBarAxis] =\n                        pos + this.$contentSize[this.$refreshBarAxis];\n                else\n                    pt[this.$refreshBarAxis] = Math.max(Math.min(pos + this.$viewSize[this.$refreshBarAxis], this.$viewSize[this.$refreshBarAxis] - this.$footerLockedSize), this.$viewSize[this.$refreshBarAxis] -\n                        this.$contentSize[this.$refreshBarAxis]);\n                this.$footer.setXY(pt.x, pt.y);\n                pt.setValues(this.$footer.width, this.$footer.height);\n                if (max > 0)\n                    pt[this.$refreshBarAxis] = -max - pos;\n                else\n                    pt[this.$refreshBarAxis] =\n                        this.$viewSize[this.$refreshBarAxis] -\n                            this.$footer[this.$refreshBarAxis];\n                this.$footer.setSize(pt.x, pt.y);\n            }\n            else {\n                if (this.$footer.displayObject.parent != null)\n                    this.$maskContainer.removeChild(this.$footer.displayObject);\n            }\n        }\n    }\n    tweenUpdate() {\n        var nx = this.runTween('x');\n        var ny = this.runTween('y');\n        this.$container.set({ x: nx, y: ny });\n        if (this.$tweening == 2) {\n            if (this.$overlapSize.x > 0)\n                this.$xPos = NumberUtil.clamp(-nx, 0, this.$overlapSize.x);\n            if (this.$overlapSize.y > 0)\n                this.$yPos = NumberUtil.clamp(-ny, 0, this.$overlapSize.y);\n            if (this.$pageMode)\n                this.updatePageController();\n        }\n        if (this.$tweenChange.x == 0 && this.$tweenChange.y == 0) {\n            this.$tweening = 0;\n            GTimer.inst.remove(this.tweenUpdate, this);\n            this.loopCheckingCurrent();\n            this.syncScrollBar(true);\n            this.checkRefreshBar();\n            let scrollEvent = new createjs.Event(\"__scroll\" /* SCROLL */, true, false);\n            this.dispatchEvent(scrollEvent, this);\n            let scrollEndEvent = new createjs.Event(\"__scrollEnd\" /* SCROLL_END */, true, false);\n            this.dispatchEvent(scrollEndEvent, this);\n        }\n        else {\n            this.syncScrollBar(false);\n            this.checkRefreshBar();\n            let scrollEvent = new createjs.Event(\"__scroll\" /* SCROLL */, true, false);\n            this.dispatchEvent(scrollEvent, this);\n        }\n    }\n    runTween(axis) {\n        const delta = createjs.Ticker.interval;\n        let newValue;\n        if (this.$tweenChange[axis] != 0) {\n            this.$tweenTime[axis] += delta * createjs.Ticker.framerate;\n            if (this.$tweenTime[axis] >= this.$tweenDuration[axis]) {\n                newValue =\n                    this.$tweenStart[axis] + this.$tweenChange[axis];\n                this.$tweenChange[axis] = 0;\n            }\n            else {\n                const ratio = ScrollPane.$easeTypeFunc(this.$tweenTime[axis], this.$tweenDuration[axis]);\n                newValue =\n                    this.$tweenStart[axis] +\n                        Math.floor(this.$tweenChange[axis] * ratio);\n            }\n            var threshold1 = 0;\n            var threshold2 = -this.$overlapSize[axis];\n            if (this.$headerLockedSize > 0 && this.$refreshBarAxis == axis)\n                threshold1 = this.$headerLockedSize;\n            if (this.$footerLockedSize > 0 && this.$refreshBarAxis == axis) {\n                var max = this.$overlapSize[this.$refreshBarAxis];\n                if (max == 0)\n                    max = Math.max(this.$contentSize[this.$refreshBarAxis] +\n                        this.$footerLockedSize -\n                        this.$viewSize[this.$refreshBarAxis], 0);\n                else\n                    max += this.$footerLockedSize;\n                threshold2 = -max;\n            }\n            if (this.$tweening == 2 && this.$bouncebackEffect) {\n                if ((newValue > 20 + threshold1 && this.$tweenChange[axis] > 0) ||\n                    (newValue > threshold1 && this.$tweenChange[axis] == 0)) {\n                    this.$tweenTime[axis] = 0;\n                    this.$tweenDuration[axis] = ScrollPane.TWEEN_DEFAULT_DURATION;\n                    this.$tweenChange[axis] = -newValue + threshold1;\n                    this.$tweenStart[axis] = newValue;\n                }\n                else if ((newValue < threshold2 - 20 && this.$tweenChange[axis] < 0) ||\n                    (newValue < threshold2 && this.$tweenChange[axis] == 0)) {\n                    this.$tweenTime[axis] = 0;\n                    this.$tweenDuration[axis] = ScrollPane.TWEEN_DEFAULT_DURATION;\n                    this.$tweenChange[axis] = threshold2 - newValue;\n                    this.$tweenStart[axis] = newValue;\n                }\n            }\n            else {\n                if (newValue > threshold1) {\n                    newValue = threshold1;\n                    this.$tweenChange[axis] = 0;\n                }\n                else if (newValue < threshold2) {\n                    newValue = threshold2;\n                    this.$tweenChange[axis] = 0;\n                }\n            }\n        }\n        else\n            newValue = this.$container[axis];\n        return newValue;\n    }\n}\nScrollPane.$easeTypeFunc = (t, d) => {\n    return (t = t / d - 1) * t * t + 1;\n}; //cubic out\nScrollPane.$gestureFlag = 0;\nScrollPane.sHelperPoint = new createjs.Point();\nScrollPane.sHelperRect = new createjs.Rectangle();\nScrollPane.sEndPos = new createjs.Point();\nScrollPane.sOldChange = new createjs.Point();\nScrollPane.TWEEN_DEFAULT_DURATION = 0.4;\nScrollPane.TWEEN_MANUALLY_SET_DURATION = 0.5; //tween duration used when call setPos(useAni=true)\nScrollPane.PULL_DIST_RATIO = 0.5; //pulldown / pullup distance ratio of the whole viewport\n\nclass Binder {\n    static create(func, context, ...args) {\n        if (!context)\n            return func;\n        return (function () {\n            let fullargs = arguments.length > 0 ? [].concat(Array.prototype.slice.call(arguments)).concat(args) : [].concat(args);\n            func.apply(context, fullargs);\n        });\n    }\n}\n\nclass Transition {\n    constructor(owner) {\n        this.autoPlayRepeat = 1;\n        this.autoPlayDelay = 0;\n        this.$ownerBaseX = 0;\n        this.$ownerBaseY = 0;\n        this.$totalTimes = 0;\n        this.$startTime = 0;\n        this.$totalTasks = 0;\n        this.$playing = false;\n        this.$options = 0;\n        this.$maxTime = 0;\n        this.$owner = owner;\n        this.$items = [];\n        this.$owner.on(\"__visibleChanged\" /* VISIBLE_CHANGED */, this.$ownerVisibleChanged, this);\n    }\n    // private $ownerVisibleChanged(vis: boolean, owner: GComponent): void {\n    $ownerVisibleChanged(event) {\n        let vis = event.data;\n        if ((this.$options & Transition.OPTION_AUTO_STOP_DISABLED) == 0 && vis === false)\n            this.stop((this.$options & Transition.OPTION_AUTO_STOP_AT_END) != 0 ? true : false, false);\n    }\n    get autoPlay() {\n        return this.$autoPlay;\n    }\n    set autoPlay(value) {\n        if (this.$autoPlay != value) {\n            this.$autoPlay = value;\n            if (this.$autoPlay) {\n                if (this.$owner.onStage)\n                    this.play({\n                        times: this.autoPlayRepeat,\n                        delay: this.autoPlayDelay\n                    });\n            }\n            else {\n                if (!this.$owner.onStage)\n                    this.stop(false, true);\n            }\n        }\n    }\n    changeRepeat(value) {\n        this.$totalTimes = value | 0;\n    }\n    /**\n       * Play transition by specified settings:\n       * 1) pass whole parameters:\n              onComplete?: (...args:any[]) => void,\n              onCompleteObj?: any,\n              onCompleteParam?: any,\n              times: number,\n              delay: number\n       * 2) just pass 1 object which implements TransitionPlaySetting (recommended)\n       */\n    play(...args) {\n        if (args.length && typeof args[0] == 'object') {\n            let obj = args[0];\n            this.$play(obj.onComplete, obj.onCompleteObj, obj.onCompleteParam, obj.times || 1, obj.delay || 0, false);\n        }\n        else\n            this.$play(args[0], args[1], args[2], args[3] || 1, args[4] || 0, false);\n    }\n    /**\n       * Play transition by specified settings:\n       * 1) pass whole parameters:\n              onComplete?: (...args:any[]) => void,\n              onCompleteObj?: any,\n              onCompleteParam?: any,\n              times: number,\n              delay: number\n       * 2) just pass 1 object which implements TransitionPlaySetting (recommended)\n       */\n    playReverse(...args) {\n        if (args.length && typeof args[0] == 'object') {\n            let obj = args[0];\n            this.$play(obj.onComplete, obj.onCompleteObj, obj.onCompleteParam, obj.times || 1, obj.delay || 0, true);\n        }\n        else\n            this.$play(args[0], args[1], args[2], args[3] || 1, args[4] || 0, true);\n    }\n    $play(onComplete, onCompleteObj, onCompleteParam, times, delay, reversed = false) {\n        this.stop();\n        if (times == 0)\n            times = 1;\n        else if (times == -1)\n            times = Number.MAX_VALUE;\n        this.$totalTimes = times;\n        this.$startTime = 0;\n        this.$reversed = reversed;\n        this.internalPlay(delay);\n        this.$playing = this.$totalTasks > 0;\n        if (this.$playing) {\n            this.$onComplete = onComplete;\n            this.$onCompleteParam = onCompleteParam;\n            this.$onCompleteObj = onCompleteObj;\n            if ((this.$options & Transition.OPTION_IGNORE_DISPLAY_CONTROLLER) != 0) {\n                this.$items.forEach(item => {\n                    if (item.target != null && item.target != this.$owner)\n                        item.lockToken = item.target.lockGearDisplay();\n                }, this);\n            }\n        }\n        else if (onComplete != null) {\n            onCompleteParam && onCompleteParam.length\n                ? onComplete.apply(onCompleteObj, onCompleteParam)\n                : onComplete.call(onCompleteObj, onCompleteParam);\n        }\n    }\n    stop(setToComplete = true, processCallback = false) {\n        if (this.$playing) {\n            this.$playing = false;\n            this.$totalTasks = 0;\n            this.$totalTimes = 0;\n            let func = this.$onComplete;\n            let param = this.$onCompleteParam;\n            let thisObj = this.$onCompleteObj;\n            this.$onComplete = null;\n            this.$onCompleteParam = null;\n            this.$onCompleteObj = null;\n            let cnt = this.$items.length;\n            let item;\n            if (this.$reversed) {\n                for (let i = cnt - 1; i >= 0; i--) {\n                    item = this.$items[i];\n                    if (item.target == null)\n                        continue;\n                    this.stopItem(item, setToComplete);\n                }\n            }\n            else {\n                for (let i = 0; i < cnt; i++) {\n                    item = this.$items[i];\n                    if (item.target == null)\n                        continue;\n                    this.stopItem(item, setToComplete);\n                }\n            }\n            if (processCallback && func != null)\n                param && param.length > 0 ? func.apply(thisObj, param) : func.call(thisObj, param);\n        }\n    }\n    stopItem(item, setToComplete) {\n        if (item.lockToken != 0) {\n            item.target.releaseGearDisplay(item.lockToken);\n            item.lockToken = 0;\n        }\n        if (item.type == 12 /* ColorFilter */ && item.filterCreated)\n            item.target.filters = null;\n        if (item.completed)\n            return;\n        this.disposeTween(item);\n        if (item.type == 10 /* Transition */) {\n            let trans = item.target.getTransition(item.value.s);\n            if (trans != null)\n                trans.stop(setToComplete, false);\n        }\n        else if (item.type == 11 /* Shake */) {\n            GTimer.inst.remove(item.$shake, item);\n            item.target.$gearLocked = true;\n            item.target.setXY(item.target.x - item.startValue.f1, item.target.y - item.startValue.f2);\n            item.target.$gearLocked = false;\n        }\n        else {\n            if (setToComplete) {\n                if (item.tween) {\n                    if (!item.yoyo || item.repeat % 2 == 0)\n                        this.applyValue(item, this.$reversed ? item.startValue : item.endValue);\n                    else\n                        this.applyValue(item, this.$reversed ? item.endValue : item.startValue);\n                }\n                else if (item.type != 9 /* Sound */)\n                    this.applyValue(item, item.value);\n            }\n        }\n    }\n    dispose() {\n        GTimer.inst.remove(this.internalPlay, this);\n        this.$owner.off(\"__visibleChanged\" /* VISIBLE_CHANGED */, this.$ownerVisibleChanged);\n        this.$playing = false;\n        this.$items.forEach(item => {\n            if (item.target == null || item.completed)\n                return;\n            this.disposeTween(item);\n            if (item.type == 10 /* Transition */) {\n                let trans = item.target.getTransition(item.value.s);\n                if (trans != null)\n                    trans.dispose();\n            }\n            else if (item.type == 11 /* Shake */)\n                GTimer.inst.remove(item.$shake, item);\n        }, this);\n    }\n    get playing() {\n        return this.$playing;\n    }\n    setValue(label, ...args) {\n        this.$items.forEach(item => {\n            if (item.label == null && item.label2 == null)\n                return;\n            let value;\n            if (item.label == label) {\n                if (item.tween)\n                    value = item.startValue;\n                else\n                    value = item.value;\n            }\n            else if (item.label2 == label)\n                value = item.endValue;\n            else\n                return;\n            switch (item.type) {\n                case 0 /* XY */:\n                case 1 /* Size */:\n                case 3 /* Pivot */:\n                case 2 /* Scale */:\n                case 13 /* Skew */:\n                    value.b1 = true;\n                    value.b2 = true;\n                    value.f1 = parseFloat(args[0]);\n                    value.f2 = parseFloat(args[1]);\n                    break;\n                case 4 /* Alpha */:\n                    value.f1 = parseFloat(args[0]);\n                    break;\n                case 5 /* Rotation */:\n                    value.i = parseInt(args[0]);\n                    break;\n                case 6 /* Color */:\n                    value.c = args[0];\n                    break;\n                case 7 /* Animation */:\n                    value.i = parseInt(args[0]);\n                    if (args.length > 1)\n                        value.b = args[1];\n                    break;\n                case 8 /* Visible */:\n                    value.b = args[0];\n                    break;\n                case 9 /* Sound */:\n                    value.s = args[0];\n                    if (args.length > 1)\n                        value.f1 = parseFloat(args[1]);\n                    break;\n                case 10 /* Transition */:\n                    value.s = args[0];\n                    if (args.length > 1)\n                        value.i = parseInt(args[1]);\n                    break;\n                case 11 /* Shake */:\n                    value.f1 = parseFloat(args[0]);\n                    if (args.length > 1)\n                        value.f2 = parseFloat(args[1]);\n                    break;\n                case 12 /* ColorFilter */:\n                    value.f1 = parseFloat(args[0]);\n                    value.f2 = parseFloat(args[1]);\n                    value.f3 = parseFloat(args[2]);\n                    value.f4 = parseFloat(args[3]);\n                    break;\n            }\n        }, this);\n    }\n    setHook(label, callback, thisObj) {\n        let cnt = this.$items.length;\n        for (let i = 0; i < cnt; i++) {\n            let item = this.$items[i];\n            if (item.label == label) {\n                item.hook = callback;\n                item.hookObj = thisObj;\n                break;\n            }\n            else if (item.label2 == label) {\n                item.hook2 = callback;\n                item.hook2Obj = thisObj;\n                break;\n            }\n        }\n    }\n    clearHooks() {\n        this.$items.forEach(item => {\n            item.hook = null;\n            item.hookObj = null;\n            item.hook2 = null;\n            item.hook2Obj = null;\n        }, this);\n    }\n    setTarget(label, newTarget) {\n        this.$items.forEach(item => {\n            if (item.label == label)\n                item.targetId = newTarget.id;\n        }, this);\n    }\n    setDuration(label, value) {\n        this.$items.forEach(item => {\n            if (item.tween && item.label == label)\n                item.duration = value;\n        }, this);\n    }\n    updateFromRelations(targetId, dx, dy) {\n        this.$items.forEach(item => {\n            if (item.type == 0 /* XY */ && item.targetId == targetId) {\n                if (item.tween) {\n                    item.startValue.f1 += dx;\n                    item.startValue.f2 += dy;\n                    item.endValue.f1 += dx;\n                    item.endValue.f2 += dy;\n                }\n                else {\n                    item.value.f1 += dx;\n                    item.value.f2 += dy;\n                }\n            }\n        }, this);\n    }\n    internalPlay(delay = 0) {\n        this.$ownerBaseX = this.$owner.x;\n        this.$ownerBaseY = this.$owner.y;\n        this.$totalTasks = 0;\n        this.$items.forEach(item => {\n            if (item.targetId)\n                item.target = this.$owner.getChildById(item.targetId);\n            else\n                item.target = this.$owner;\n            if (item.target == null)\n                return;\n            let startTime;\n            this.disposeTween(item);\n            if (item.tween) {\n                if (this.$reversed)\n                    startTime = delay + this.$maxTime - item.time - item.duration;\n                else\n                    startTime = delay + item.time;\n                if (startTime > 0) {\n                    this.$totalTasks++;\n                    item.completed = false;\n                    item.tweener = createjs.Tween.get(item.value)\n                        .wait(startTime * 1000)\n                        .call(this.$delayCall, [item], this);\n                }\n                else\n                    this.startTween(item);\n            }\n            else {\n                if (this.$reversed)\n                    startTime = delay + this.$maxTime - item.time;\n                else\n                    startTime = delay + item.time;\n                if (startTime <= 0)\n                    this.applyValue(item, item.value);\n                else {\n                    this.$totalTasks++;\n                    item.completed = false;\n                    item.tweener = createjs.Tween.get(item.value)\n                        .wait(startTime * 1000)\n                        .call(this.$delayCall2, [item], this);\n                }\n            }\n        }, this);\n    }\n    prepareValue(item, toProps, reversed = false) {\n        let startValue;\n        let endValue;\n        if (reversed) {\n            startValue = item.endValue;\n            endValue = item.startValue;\n        }\n        else {\n            startValue = item.startValue;\n            endValue = item.endValue;\n        }\n        switch (item.type) {\n            case 0 /* XY */:\n            case 1 /* Size */:\n                if (item.type == 0 /* XY */) {\n                    if (item.target == this.$owner) {\n                        if (!startValue.b1)\n                            startValue.f1 = 0;\n                        if (!startValue.b2)\n                            startValue.f2 = 0;\n                    }\n                    else {\n                        if (!startValue.b1)\n                            startValue.f1 = item.target.x;\n                        if (!startValue.b2)\n                            startValue.f2 = item.target.y;\n                    }\n                }\n                else {\n                    if (!startValue.b1)\n                        startValue.f1 = item.target.width;\n                    if (!startValue.b2)\n                        startValue.f2 = item.target.height;\n                }\n                item.value.f1 = startValue.f1;\n                item.value.f2 = startValue.f2;\n                if (!endValue.b1)\n                    endValue.f1 = item.value.f1;\n                if (!endValue.b2)\n                    endValue.f2 = item.value.f2;\n                item.value.b1 = startValue.b1 || endValue.b1;\n                item.value.b2 = startValue.b2 || endValue.b2;\n                toProps.f1 = endValue.f1;\n                toProps.f2 = endValue.f2;\n                break;\n            case 2 /* Scale */:\n            case 13 /* Skew */:\n                item.value.f1 = startValue.f1;\n                item.value.f2 = startValue.f2;\n                toProps.f1 = endValue.f1;\n                toProps.f2 = endValue.f2;\n                break;\n            case 4 /* Alpha */:\n                item.value.f1 = startValue.f1;\n                toProps.f1 = endValue.f1;\n                break;\n            case 5 /* Rotation */:\n                item.value.i = startValue.i;\n                toProps.i = endValue.i;\n                break;\n            case 12 /* ColorFilter */:\n                item.value.f1 = startValue.f1;\n                item.value.f2 = startValue.f2;\n                item.value.f3 = startValue.f3;\n                item.value.f4 = startValue.f4;\n                toProps.f1 = endValue.f1;\n                toProps.f2 = endValue.f2;\n                toProps.f3 = endValue.f3;\n                toProps.f4 = endValue.f4;\n                break;\n        }\n    }\n    startTween(item) {\n        let toProps = new TransitionValue();\n        this.prepareValue(item, toProps, this.$reversed);\n        this.applyValue(item, item.value);\n        let completeHandler;\n        if (item.repeat != 0) {\n            item.tweenTimes = 0;\n            completeHandler = Binder.create(this.$tweenRepeatComplete, this, item);\n        }\n        else\n            completeHandler = Binder.create(this.$tweenComplete, this, item);\n        this.$totalTasks++;\n        item.completed = false;\n        this.prepareValue(item, toProps, this.$reversed);\n        item.tweener = createjs.Tween.get(item.value, {\n            onChange: Binder.create(this.$tweenUpdate, this, item)\n        })\n            .to(toProps, item.duration * 1000, item.easeType)\n            .call(completeHandler);\n        if (item.hook != null)\n            item.hook.call(item.hookObj);\n    }\n    $delayCall(item) {\n        this.disposeTween(item);\n        this.$totalTasks--;\n        this.startTween(item);\n    }\n    $delayCall2(item) {\n        this.disposeTween(item);\n        this.$totalTasks--;\n        item.completed = true;\n        this.applyValue(item, item.value);\n        if (item.hook != null)\n            item.hook.call(item.hookObj);\n        this.checkAllComplete();\n    }\n    $tweenUpdate(event, item) {\n        this.applyValue(item, item.value);\n    }\n    $tweenComplete(event, item) {\n        this.disposeTween(item);\n        this.$totalTasks--;\n        item.completed = true;\n        if (item.hook2 != null)\n            item.hook2.call(item.hook2Obj);\n        this.checkAllComplete();\n    }\n    $tweenRepeatComplete(event, item) {\n        item.tweenTimes++;\n        if (item.repeat == -1 || item.tweenTimes < item.repeat + 1) {\n            let toProps = new TransitionValue();\n            let reversed;\n            if (item.yoyo) {\n                if (this.$reversed)\n                    reversed = item.tweenTimes % 2 == 0;\n                else\n                    reversed = item.tweenTimes % 2 == 1;\n            }\n            else\n                reversed = this.$reversed;\n            this.prepareValue(item, toProps, reversed);\n            this.disposeTween(item);\n            item.tweener = createjs.Tween.get(item.value, {\n                onChange: Binder.create(this.$tweenUpdate, this, item)\n            })\n                .to(toProps, item.duration * 1000, item.easeType)\n                .call(this.$tweenRepeatComplete, [null, item], this);\n        }\n        else\n            this.$tweenComplete(null, item);\n    }\n    disposeTween(item) {\n        if (!item)\n            return;\n        if (item.tweener) {\n            item.tweener.paused = true;\n            item.tweener.removeAllEventListeners();\n            createjs.Tween.removeTweens(item.value);\n            item.tweener = null;\n        }\n    }\n    $playTransComplete(item) {\n        this.disposeTween(item);\n        this.$totalTasks--;\n        item.completed = true;\n        this.checkAllComplete();\n    }\n    checkAllComplete() {\n        if (this.$playing && this.$totalTasks == 0) {\n            if (this.$totalTimes < 0) {\n                //the reason we don't call 'internalPlay' immediately here is because of the onChange handler issue, the handler's been calling all the time even the tween is in waiting/complete status.\n                GTimer.inst.callLater(this.internalPlay, this, 0);\n            }\n            else {\n                this.$totalTimes--;\n                if (this.$totalTimes > 0)\n                    GTimer.inst.callLater(this.internalPlay, this, 0);\n                else {\n                    this.$playing = false;\n                    this.$items.forEach(item => {\n                        if (item.target != null) {\n                            if (item.lockToken != 0) {\n                                item.target.releaseGearDisplay(item.lockToken);\n                                item.lockToken = 0;\n                            }\n                            if (item.filterCreated) {\n                                item.filterCreated = false;\n                                item.target.filters = null;\n                            }\n                            this.disposeTween(item);\n                        }\n                    });\n                    if (this.$onComplete != null) {\n                        let func = this.$onComplete;\n                        let param = this.$onCompleteParam;\n                        let thisObj = this.$onCompleteObj;\n                        this.$onComplete = null;\n                        this.$onCompleteParam = null;\n                        this.$onCompleteObj = null;\n                        param && param.length ? func.apply(thisObj, param) : func.call(thisObj, param);\n                    }\n                }\n            }\n        }\n    }\n    applyValue(item, value) {\n        item.target.$gearLocked = true;\n        switch (item.type) {\n            case 0 /* XY */:\n                if (item.target == this.$owner) {\n                    let f1 = 0, f2 = 0;\n                    if (!value.b1)\n                        f1 = item.target.x;\n                    else\n                        f1 = value.f1 + this.$ownerBaseX;\n                    if (!value.b2)\n                        f2 = item.target.y;\n                    else\n                        f2 = value.f2 + this.$ownerBaseY;\n                    item.target.setXY(f1, f2);\n                }\n                else {\n                    if (!value.b1)\n                        value.f1 = item.target.x;\n                    if (!value.b2)\n                        value.f2 = item.target.y;\n                    item.target.setXY(value.f1, value.f2);\n                }\n                break;\n            case 1 /* Size */:\n                if (!value.b1)\n                    value.f1 = item.target.width;\n                if (!value.b2)\n                    value.f2 = item.target.height;\n                item.target.setSize(value.f1, value.f2);\n                break;\n            case 3 /* Pivot */:\n                item.target.setPivot(value.f1, value.f2);\n                break;\n            case 4 /* Alpha */:\n                item.target.alpha = value.f1;\n                break;\n            case 5 /* Rotation */:\n                item.target.rotation = value.i;\n                break;\n            case 2 /* Scale */:\n                item.target.setScale(value.f1, value.f2);\n                break;\n            case 13 /* Skew */:\n                item.target.setSkew(value.f1, value.f2);\n                break;\n            case 6 /* Color */:\n                if (isColorGear(item.target))\n                    item.target.color = value.c;\n                break;\n            case 7 /* Animation */:\n                if (isAnimationGear(item.target)) {\n                    if (!value.b1)\n                        value.i = item.target.frame;\n                    item.target.frame = value.i;\n                    item.target.playing = value.b;\n                }\n                break;\n            case 8 /* Visible */:\n                item.target.visible = value.b;\n                break;\n            case 10 /* Transition */:\n                let trans = item.target.getTransition(value.s);\n                if (trans != null) {\n                    if (value.i == 0)\n                        trans.stop(false, true);\n                    else if (trans.playing)\n                        trans.$totalTimes = value.i == -1 ? Number.MAX_VALUE : value.i;\n                    else {\n                        item.completed = false;\n                        this.$totalTasks++;\n                        if (this.$reversed)\n                            trans.playReverse(this.$playTransComplete, this, item, item.value.i);\n                        else\n                            trans.play(this.$playTransComplete, this, item, item.value.i);\n                    }\n                }\n                break;\n            case 9 /* Sound */:\n                if (this.$playing && item.time >= this.$startTime) {\n                    if (!value.audioClip) {\n                        var pi = UIPackage.getItemByURL(value.s);\n                        if (pi)\n                            value.audioClip = pi.owner.getItemAsset(pi);\n                    }\n                    if (value.audioClip) {\n                        Decls$1.GRoot.inst.playOneShotSound(value.audioClip, value.f1);\n                    }\n                }\n                break;\n            case 11 /* Shake */:\n                item.startValue.f1 = 0; //offsetX\n                item.startValue.f2 = 0; //offsetY\n                item.startValue.f3 = item.value.f2; //shakePeriod\n                GTimer.inst.add(1, 0, item.$shake, item, [this]);\n                this.$totalTasks++;\n                item.completed = false;\n                break;\n            case 12 /* ColorFilter */:\n                item.target.updateColorComponents(value.f1, value.f2, value.f3, value.f4);\n                break;\n        }\n        item.target.$gearLocked = false;\n    }\n    /**@internal */\n    $shakeItem(item, elapsedMS) {\n        let r = Math.ceil((item.value.f1 * item.startValue.f3) / item.value.f2);\n        let rx = (Math.random() * 2 - 1) * r;\n        let ry = (Math.random() * 2 - 1) * r;\n        rx = rx > 0 ? Math.ceil(rx) : Math.floor(rx);\n        ry = ry > 0 ? Math.ceil(ry) : Math.floor(ry);\n        item.target.$gearLocked = true;\n        item.target.setXY(item.target.x - item.startValue.f1 + rx, item.target.y - item.startValue.f2 + ry);\n        item.target.$gearLocked = false;\n        item.startValue.f1 = rx;\n        item.startValue.f2 = ry;\n        item.startValue.f3 -= elapsedMS / 1000;\n        if (item.startValue.f3 <= 0) {\n            item.target.$gearLocked = true;\n            item.target.setXY(item.target.x - item.startValue.f1, item.target.y - item.startValue.f2);\n            item.target.$gearLocked = false;\n            item.completed = true;\n            this.$totalTasks--;\n            GTimer.inst.remove(item.$shake, item);\n            this.checkAllComplete();\n        }\n    }\n    setup(xml) {\n        this.name = xml.attributes.name;\n        let str = xml.attributes.options;\n        if (str)\n            this.$options = parseInt(str);\n        this.$autoPlay = xml.attributes.autoPlay == 'true';\n        if (this.$autoPlay) {\n            str = xml.attributes.autoPlayRepeat;\n            if (str)\n                this.autoPlayRepeat = parseInt(str);\n            str = xml.attributes.autoPlayDelay;\n            if (str)\n                this.autoPlayDelay = parseFloat(str);\n        }\n        let col = xml.children;\n        col.forEach(cxml => {\n            if (cxml.nodeName != 'item')\n                return;\n            let item = new TransitionItem();\n            this.$items.push(item);\n            item.time = parseInt(cxml.attributes.time) / Transition.FRAME_RATE;\n            item.targetId = cxml.attributes.target;\n            str = cxml.attributes.type;\n            switch (str) {\n                case 'XY':\n                    item.type = 0 /* XY */;\n                    break;\n                case 'Size':\n                    item.type = 1 /* Size */;\n                    break;\n                case 'Scale':\n                    item.type = 2 /* Scale */;\n                    break;\n                case 'Pivot':\n                    item.type = 3 /* Pivot */;\n                    break;\n                case 'Alpha':\n                    item.type = 4 /* Alpha */;\n                    break;\n                case 'Rotation':\n                    item.type = 5 /* Rotation */;\n                    break;\n                case 'Color':\n                    item.type = 6 /* Color */;\n                    break;\n                case 'Animation':\n                    item.type = 7 /* Animation */;\n                    break;\n                case 'Visible':\n                    item.type = 8 /* Visible */;\n                    break;\n                case 'Sound':\n                    item.type = 9 /* Sound */;\n                    break;\n                case 'Transition':\n                    item.type = 10 /* Transition */;\n                    break;\n                case 'Shake':\n                    item.type = 11 /* Shake */;\n                    break;\n                case 'ColorFilter':\n                    item.type = 12 /* ColorFilter */;\n                    break;\n                case 'Skew':\n                    item.type = 13 /* Skew */;\n                    break;\n                default:\n                    item.type = 14 /* Unknown */;\n                    break;\n            }\n            item.tween = cxml.attributes.tween == 'true';\n            item.label = cxml.attributes.label;\n            if (item.tween) {\n                item.duration = parseInt(cxml.attributes.duration) / Transition.FRAME_RATE;\n                if (item.time + item.duration > this.$maxTime)\n                    this.$maxTime = item.time + item.duration;\n                str = cxml.attributes.ease;\n                if (str)\n                    item.easeType = ParseEaseType(str);\n                str = cxml.attributes.repeat;\n                if (str)\n                    item.repeat = parseInt(str);\n                item.yoyo = cxml.attributes.yoyo == 'true';\n                item.label2 = cxml.attributes.label2;\n                let v = cxml.attributes.endValue;\n                if (v) {\n                    this.decodeValue(item.type, cxml.attributes.startValue, item.startValue);\n                    this.decodeValue(item.type, v, item.endValue);\n                }\n                else {\n                    item.tween = false;\n                    this.decodeValue(item.type, cxml.attributes.startValue, item.value);\n                }\n            }\n            else {\n                if (item.time > this.$maxTime)\n                    this.$maxTime = item.time;\n                this.decodeValue(item.type, cxml.attributes.value, item.value);\n            }\n        }, this);\n    }\n    decodeValue(type, str, value) {\n        let arr;\n        switch (type) {\n            case 0 /* XY */:\n            case 1 /* Size */:\n            case 3 /* Pivot */:\n            case 13 /* Skew */:\n                arr = str.split(',');\n                if (arr[0] == '-') {\n                    value.b1 = false;\n                }\n                else {\n                    value.f1 = parseFloat(arr[0]);\n                    value.b1 = true;\n                }\n                if (arr[1] == '-') {\n                    value.b2 = false;\n                }\n                else {\n                    value.f2 = parseFloat(arr[1]);\n                    value.b2 = true;\n                }\n                break;\n            case 4 /* Alpha */:\n                value.f1 = parseFloat(str);\n                break;\n            case 5 /* Rotation */:\n                value.i = parseInt(str);\n                break;\n            case 2 /* Scale */:\n                arr = str.split(',');\n                value.f1 = parseFloat(arr[0]);\n                value.f2 = parseFloat(arr[1]);\n                break;\n            case 6 /* Color */:\n                value.c = StringUtil.HEX2RGB(str);\n                break;\n            case 7 /* Animation */:\n                arr = str.split(',');\n                if (arr[0] == '-') {\n                    value.b1 = false;\n                }\n                else {\n                    value.i = parseInt(arr[0]);\n                    value.b1 = true;\n                }\n                value.b = arr[1] == 'p';\n                break;\n            case 8 /* Visible */:\n                value.b = str == 'true';\n                break;\n            case 9 /* Sound */:\n                arr = str.split(',');\n                value.s = arr[0];\n                if (arr.length > 1) {\n                    let intv = parseInt(arr[1]);\n                    if (intv == 0 || intv == 100)\n                        value.f1 = 1;\n                    else\n                        value.f1 = intv / 100;\n                }\n                else\n                    value.f1 = 1;\n                break;\n            case 10 /* Transition */:\n                arr = str.split(',');\n                value.s = arr[0];\n                if (arr.length > 1)\n                    value.i = parseInt(arr[1]);\n                else\n                    value.i = 1;\n                break;\n            case 11 /* Shake */:\n                arr = str.split(',');\n                value.f1 = parseFloat(arr[0]);\n                value.f2 = parseFloat(arr[1]);\n                break;\n            case 12 /* ColorFilter */:\n                arr = str.split(',');\n                value.f1 = parseFloat(arr[0]);\n                value.f2 = parseFloat(arr[1]);\n                value.f3 = parseFloat(arr[2]);\n                value.f4 = parseFloat(arr[3]);\n                break;\n        }\n    }\n}\nTransition.OPTION_IGNORE_DISPLAY_CONTROLLER = 1;\nTransition.OPTION_AUTO_STOP_DISABLED = 1 >> 1;\nTransition.OPTION_AUTO_STOP_AT_END = 1 >> 2;\nTransition.FRAME_RATE = 24;\nclass TransitionItem {\n    constructor() {\n        this.time = 0;\n        this.type = 0;\n        this.duration = 0;\n        this.repeat = 0;\n        this.yoyo = false;\n        this.tween = false;\n        this.tweenTimes = 0;\n        this.completed = false;\n        this.lockToken = 0;\n        this.easeType = ParseEaseType('Quad.Out');\n        this.value = new TransitionValue();\n        this.startValue = new TransitionValue();\n        this.endValue = new TransitionValue();\n    }\n    /**@internal */\n    $shake(trans, elapsedMS) {\n        trans.$shakeItem(this, elapsedMS);\n    }\n}\nclass TransitionValue {\n    constructor() {\n        this.f1 = 0;\n        this.f2 = 0;\n        this.f3 = 0;\n        this.f4 = 0;\n        this.i = 0;\n        this.b = false;\n        this.b1 = true;\n        this.b2 = true;\n    }\n}\n\nclass Margin {\n    constructor() {\n        this.left = 0;\n        this.right = 0;\n        this.top = 0;\n        this.bottom = 0;\n    }\n    parse(str) {\n        if (!str) {\n            this.left = this.right = this.top = this.bottom = 0;\n            return;\n        }\n        let arr = str.split(\",\");\n        if (arr.length == 1) {\n            let k = parseInt(arr[0]);\n            this.left = this.right = this.top = this.bottom = k;\n        }\n        else {\n            this.top = parseInt(arr[0]);\n            this.bottom = parseInt(arr[1]);\n            this.left = parseInt(arr[2]);\n            this.right = parseInt(arr[3]);\n        }\n    }\n    copy(source) {\n        this.top = source.top;\n        this.bottom = source.bottom;\n        this.left = source.left;\n        this.right = source.right;\n    }\n}\n\nclass GComponent extends GObject {\n    constructor() {\n        super();\n        this.$sortingChildCount = 0;\n        this.$children = [];\n        this.$controllers = [];\n        this.$transitions = [];\n        this.$margin = new Margin();\n        this.$alignOffset = new createjs.Point();\n    }\n    createDisplayObject() {\n        this.$rootContainer = new UIContainer(this);\n        this.setDisplayObject(this.$rootContainer);\n        this.$container = this.$rootContainer;\n    }\n    dispose() {\n        GTimer.inst.remove(this.$validate, this);\n        this.off('added', this.$added);\n        this.off('removed', this.$removed);\n        this.$transitions.forEach((trans) => {\n            trans.dispose();\n        });\n        let numChildren = this.$children.length;\n        for (let i = numChildren - 1; i >= 0; --i) {\n            let obj = this.$children[i];\n            obj.parent = null; //avoid removeFromParent call\n            obj.dispose();\n        }\n        this.$boundsChanged = false;\n        if (this.$scrollPane)\n            this.$scrollPane.dispose();\n        super.dispose();\n    }\n    get displayListContainer() {\n        return this.$container;\n    }\n    addChild(child) {\n        this.addChildAt(child, this.$children.length);\n        return child;\n    }\n    addChildAt(child, index = 0) {\n        if (!child)\n            throw new Error('Invalid child');\n        let numChildren = this.$children.length;\n        if (index >= 0 && index <= numChildren) {\n            if (child.parent == this)\n                this.setChildIndex(child, index);\n            else {\n                child.removeFromParent();\n                child.parent = this;\n                let cnt = this.$children.length;\n                if (child.sortingOrder != 0) {\n                    this.$sortingChildCount++;\n                    index = this.getInsertPosForSortingChild(child);\n                }\n                else if (this.$sortingChildCount > 0) {\n                    if (index > cnt - this.$sortingChildCount)\n                        index = cnt - this.$sortingChildCount;\n                }\n                if (index == cnt)\n                    this.$children.push(child);\n                else\n                    this.$children.splice(index, 0, child);\n                this.childStateChanged(child);\n                this.setBoundsChangedFlag();\n            }\n            return child;\n        }\n        else\n            throw new Error('Invalid child index');\n    }\n    getInsertPosForSortingChild(target) {\n        let cnt = this.$children.length;\n        let i = 0;\n        for (i = 0; i < cnt; i++) {\n            let child = this.$children[i];\n            if (child == target)\n                continue;\n            if (target.sortingOrder < child.sortingOrder)\n                break;\n        }\n        return i;\n    }\n    removeChild(child, dispose = false) {\n        let childIndex = this.$children.indexOf(child);\n        if (childIndex != -1)\n            this.removeChildAt(childIndex, dispose);\n        return child;\n    }\n    removeChildAt(index, dispose = false) {\n        if (index >= 0 && index < this.numChildren) {\n            let child = this.$children[index];\n            child.parent = null;\n            if (child.sortingOrder != 0)\n                this.$sortingChildCount--;\n            this.$children.splice(index, 1);\n            if (child.inContainer)\n                this.$container.removeChild(child.displayObject);\n            if (dispose === true)\n                child.dispose();\n            this.setBoundsChangedFlag();\n            return child;\n        }\n        else\n            throw new Error('Invalid child index');\n    }\n    removeChildren(beginIndex = 0, endIndex = -1, dispose = false) {\n        if (endIndex < 0 || endIndex >= this.numChildren)\n            endIndex = this.numChildren - 1;\n        for (let i = beginIndex; i <= endIndex; ++i)\n            this.removeChildAt(beginIndex, dispose);\n    }\n    getChildAt(index = 0) {\n        if (index >= 0 && index < this.numChildren)\n            return this.$children[index];\n        else\n            throw new Error('Invalid child index');\n    }\n    getChild(name) {\n        let cnt = this.$children.length;\n        for (let i = 0; i < cnt; ++i) {\n            if (this.$children[i].name == name)\n                return this.$children[i];\n        }\n        return null;\n    }\n    getChildInGroup(name, group) {\n        let cnt = this.$children.length;\n        for (let i = 0; i < cnt; ++i) {\n            let child = this.$children[i];\n            if (child.group == group && child.name == name)\n                return child;\n        }\n        return null;\n    }\n    getChildById(id) {\n        let cnt = this.$children.length;\n        for (let i = 0; i < cnt; ++i) {\n            if (this.$children[i].id == id)\n                return this.$children[i];\n        }\n        return null;\n    }\n    getChildIndex(child) {\n        return this.$children.indexOf(child);\n    }\n    setChildIndex(child, index = 0) {\n        let oldIndex = this.$children.indexOf(child);\n        if (oldIndex == -1)\n            throw new Error('no such child found');\n        if (child.sortingOrder != 0)\n            //no effect\n            return;\n        let cnt = this.$children.length;\n        if (this.$sortingChildCount > 0) {\n            if (index > cnt - this.$sortingChildCount - 1)\n                index = cnt - this.$sortingChildCount - 1;\n        }\n        this.$setChildIndex(child, oldIndex, index);\n    }\n    setChildIndexBefore(child, index) {\n        let oldIndex = this.$children.indexOf(child);\n        if (oldIndex == -1)\n            throw new Error('no such child found');\n        if (child.sortingOrder != 0)\n            //no effect\n            return oldIndex;\n        let cnt = this.$children.length;\n        if (this.$sortingChildCount > 0) {\n            if (index > cnt - this.$sortingChildCount - 1)\n                index = cnt - this.$sortingChildCount - 1;\n        }\n        if (oldIndex < index)\n            return this.$setChildIndex(child, oldIndex, index - 1);\n        else\n            return this.$setChildIndex(child, oldIndex, index);\n    }\n    $setChildIndex(child, oldIndex, index = 0) {\n        let cnt = this.$children.length;\n        if (index > cnt)\n            index = cnt;\n        if (oldIndex == index)\n            return oldIndex;\n        this.$children.splice(oldIndex, 1);\n        this.$children.splice(index, 0, child);\n        if (child.inContainer) {\n            let displayIndex = 0;\n            let childCount = this.$container.children.length;\n            for (let i = 0; i < index; i++) {\n                let g = this.$children[i];\n                if (g.inContainer)\n                    displayIndex++;\n            }\n            if (displayIndex == childCount)\n                displayIndex--;\n            this.$container.setChildIndex(child.displayObject, displayIndex);\n            this.setBoundsChangedFlag();\n        }\n        return index;\n    }\n    swapChildren(child1, child2) {\n        let index1 = this.$children.indexOf(child1);\n        let index2 = this.$children.indexOf(child2);\n        if (index1 == -1 || index2 == -1)\n            throw new Error('no such child found');\n        this.swapChildrenAt(index1, index2);\n    }\n    swapChildrenAt(index1, index2 = 0) {\n        let child1 = this.$children[index1];\n        let child2 = this.$children[index2];\n        this.setChildIndex(child1, index2);\n        this.setChildIndex(child2, index1);\n    }\n    get numChildren() {\n        return this.$children.length;\n    }\n    isAncestorOf(child) {\n        if (child == null)\n            return false;\n        let p = child.parent;\n        while (p) {\n            if (p == this)\n                return true;\n            p = p.parent;\n        }\n        return false;\n    }\n    addController(controller) {\n        this.$controllers.push(controller);\n        controller.$parent = this;\n        this.applyController(controller);\n    }\n    getControllerAt(index) {\n        return this.$controllers[index];\n    }\n    getController(name) {\n        let cnt = this.$controllers.length;\n        for (let i = 0; i < cnt; ++i) {\n            let c = this.$controllers[i];\n            if (c.name == name)\n                return c;\n        }\n        return null;\n    }\n    removeController(c) {\n        let index = this.$controllers.indexOf(c);\n        if (index == -1)\n            throw new Error('controller not exists');\n        c.$parent = null;\n        this.$controllers.splice(index, 1);\n        this.$children.forEach(child => {\n            child.handleControllerChanged(c);\n        });\n    }\n    get controllers() {\n        return this.$controllers;\n    }\n    childStateChanged(child) {\n        if (this.$buildingDisplayList)\n            return;\n        if (child instanceof GGroup) {\n            this.$children.forEach(g => {\n                if (g.group == child)\n                    this.childStateChanged(g);\n            }, this);\n            return;\n        }\n        if (!child.displayObject)\n            return;\n        if (child.finalVisible) {\n            if (!child.displayObject.parent) {\n                let index = 0;\n                let len = this.$children.length;\n                for (let i1 = 0; i1 < len; i1++) {\n                    let g = this.$children[i1];\n                    if (g == child)\n                        break;\n                    if (g.displayObject && g.displayObject.parent)\n                        index++;\n                }\n                this.$container.addChildAt(child.displayObject, index);\n            }\n        }\n        else {\n            if (child.displayObject.parent)\n                this.$container.removeChild(child.displayObject);\n        }\n    }\n    applyController(c) {\n        this.$applyingController = c;\n        this.$children.forEach(child => {\n            child.handleControllerChanged(c);\n        });\n        this.$applyingController = null;\n        c.executeActions();\n    }\n    applyAllControllers() {\n        this.$controllers.forEach(c => {\n            this.applyController(c);\n        }, this);\n    }\n    adjustRadioGroupDepth(obj, c) {\n        let myIndex = -1, maxIndex = -1;\n        this.$children.forEach((child, i) => {\n            if (child == obj) {\n                myIndex = i;\n            }\n            else if ((\"relatedController\" in child) && child.relatedController == c) {\n                if (i > maxIndex)\n                    maxIndex = i;\n            }\n        });\n        if (myIndex < maxIndex) {\n            if (this.$applyingController != null)\n                this.$children[maxIndex].handleControllerChanged(this.$applyingController); //TODO: twice\n            this.swapChildrenAt(myIndex, maxIndex);\n        }\n    }\n    getTransitionAt(index) {\n        return this.$transitions[index];\n    }\n    getTransition(transName) {\n        let cnt = this.$transitions.length;\n        for (let i = 0; i < cnt; ++i) {\n            let trans = this.$transitions[i];\n            if (trans.name == transName)\n                return trans;\n        }\n        return null;\n    }\n    isChildInView(child) {\n        if (this.$rootContainer.scrollRect != null) {\n            return (child.x + child.width >= 0 &&\n                child.x <= this.width &&\n                child.y + child.height >= 0 &&\n                child.y <= this.height);\n        }\n        else if (this.$scrollPane != null) {\n            return this.$scrollPane.isChildInView(child);\n        }\n        else\n            return true;\n    }\n    getFirstChildInView() {\n        let cnt = this.$children.length;\n        for (let i = 0; i < cnt; ++i) {\n            let child = this.$children[i];\n            if (this.isChildInView(child))\n                return i;\n        }\n        return -1;\n    }\n    get scrollPane() {\n        return this.$scrollPane;\n    }\n    get opaque() {\n        return this.$opaque;\n    }\n    set opaque(value) {\n        if (this.$opaque != value) {\n            this.$opaque = value;\n            if (this.$opaque) {\n                this.updateOpaque();\n            }\n            else {\n                if (this.$rootContainer.hitArea &&\n                    this.$rootContainer.hitArea instanceof createjs.DisplayObject) {\n                    this.$rootContainer.hitArea = null;\n                }\n            }\n        }\n    }\n    get margin() {\n        return this.$margin;\n    }\n    set margin(value) {\n        this.$margin.copy(value);\n        if (this.$rootContainer.scrollRect != null) {\n            this.$container.x = this.$margin.left + this.$alignOffset.x;\n            this.$container.y = this.$margin.top + this.$alignOffset.y;\n        }\n        this.handleSizeChanged();\n    }\n    get mask() {\n        return this.$rootContainer.mask;\n    }\n    set mask(obj) {\n        if (!obj)\n            return;\n        if (obj instanceof createjs.Shape)\n            this.$rootContainer.mask = obj;\n    }\n    updateOpaque() {\n        // todo\n        // If hitArea set on a Container, children of the Container will not receive mouse events.  \n        // if (!this.$hitArea) {\n        //     this.$hitArea = new createjs.Shape();\n        // }\n        // this.$hitArea.graphics.beginFill('#000').drawRect(0, 0, this.width, this.height); \n        // (<createjs.Shape>this.$rootContainer.hitArea) = this.$hitArea;\n    }\n    updateScrollRect() {\n        let rect = this.$rootContainer.scrollRect;\n        if (rect == null)\n            rect = new createjs.Rectangle();\n        let w = this.width - this.$margin.right;\n        let h = this.height - this.$margin.bottom;\n        rect.x = rect.y = 0;\n        rect.width = w;\n        rect.height = h;\n        this.$rootContainer.scrollRect = rect;\n    }\n    setupScroll(scrollBarMargin, scroll, scrollBarDisplay, flags, vtScrollBarRes, hzScrollBarRes, headerRes, footerRes) {\n        if (this.$rootContainer == this.$container) {\n            this.$container = new createjs.Container();\n            this.$rootContainer.addChild(this.$container);\n        }\n        this.$scrollPane = new ScrollPane(this, scroll, scrollBarMargin, scrollBarDisplay, flags, vtScrollBarRes, hzScrollBarRes, headerRes, footerRes);\n    }\n    setupOverflow(overflow) {\n        if (overflow == 1 /* Hidden */) {\n            if (this.$rootContainer == this.$container) {\n                this.$container = new createjs.Container();\n                this.$rootContainer.addChild(this.$container);\n            }\n            this.updateScrollRect();\n            this.$container.x = this.$margin.left;\n            this.$container.y = this.$margin.top;\n        }\n        else if (this.$margin.left != 0 || this.$margin.top != 0) {\n            if (this.$rootContainer == this.$container) {\n                this.$container = new createjs.Container();\n                this.$rootContainer.addChild(this.$container);\n            }\n            this.$container.x = this.$margin.left;\n            this.$container.y = this.$margin.top;\n        }\n        this.setBoundsChangedFlag();\n    }\n    handleSizeChanged() {\n        if (this.$scrollPane)\n            this.$scrollPane.onOwnerSizeChanged();\n        else if (this.$rootContainer.scrollRect != null)\n            this.updateScrollRect();\n        if (this.$hitArea)\n            this.$hitArea.graphics.drawRect(this.x, this.y, this.width, this.height);\n        if (this.parent && this.parent.$hitArea) {\n            console.log(1);\n            this.parent.$displayObject.hitArea = null;\n        }\n        if (this.$opaque)\n            this.updateOpaque();\n    }\n    handleGrayedChanged() {\n        let c = this.getController('grayed');\n        if (c != null)\n            c.selectedIndex = this.grayed ? 1 : 0;\n        else\n            super.handleGrayedChanged();\n    }\n    setBoundsChangedFlag() {\n        if (!this.$scrollPane && !this.$trackBounds)\n            return;\n        if (!this.$boundsChanged) {\n            this.$boundsChanged = true;\n            GTimer.inst.callLater(this.$validate, this);\n        }\n    }\n    $validate(dt) {\n        if (this.$boundsChanged)\n            this.updateBounds();\n    }\n    ensureBoundsCorrect() {\n        if (this.$boundsChanged)\n            this.updateBounds();\n    }\n    updateBounds() {\n        let ax = 0, ay = 0, aw = 0, ah = 0;\n        let len = this.$children.length;\n        if (len > 0) {\n            (ax = Number.POSITIVE_INFINITY), (ay = Number.POSITIVE_INFINITY);\n            let ar = Number.NEGATIVE_INFINITY, ab = Number.NEGATIVE_INFINITY;\n            let tmp = 0;\n            this.$children.forEach(child => {\n                child.ensureSizeCorrect();\n                tmp = child.x;\n                if (tmp < ax)\n                    ax = tmp;\n                tmp = child.y;\n                if (tmp < ay)\n                    ay = tmp;\n                tmp = child.x + child.actualWidth;\n                if (tmp > ar)\n                    ar = tmp;\n                tmp = child.y + child.actualHeight;\n                if (tmp > ab)\n                    ab = tmp;\n            });\n            aw = ar - ax;\n            ah = ab - ay;\n        }\n        this.setBounds(ax, ay, aw, ah);\n    }\n    setBounds(ax, ay, aw, ah = 0) {\n        this.$boundsChanged = false;\n        if (this.$scrollPane)\n            this.$scrollPane.setContentSize(Math.round(ax + aw), Math.round(ay + ah));\n    }\n    get viewWidth() {\n        if (this.$scrollPane != null)\n            return this.$scrollPane.viewWidth;\n        else\n            return this.width - this.$margin.left - this.$margin.right;\n    }\n    set viewWidth(value) {\n        if (this.$scrollPane != null)\n            this.$scrollPane.viewWidth = value;\n        else\n            this.width = value + this.$margin.left + this.$margin.right;\n    }\n    get viewHeight() {\n        if (this.$scrollPane != null)\n            return this.$scrollPane.viewHeight;\n        else\n            return this.height - this.$margin.top - this.$margin.bottom;\n    }\n    set viewHeight(value) {\n        if (this.$scrollPane != null)\n            this.$scrollPane.viewHeight = value;\n        else\n            this.height = value + this.$margin.top + this.$margin.bottom;\n    }\n    getSnappingPosition(xValue, yValue, resultPoint) {\n        if (!resultPoint)\n            resultPoint = new createjs.Point();\n        let cnt = this.$children.length;\n        if (cnt <= 0) {\n            resultPoint.x = 0;\n            resultPoint.y = 0;\n            return resultPoint;\n        }\n        this.ensureBoundsCorrect();\n        let obj = null;\n        let prev = null;\n        let i = 0;\n        if (yValue != 0) {\n            for (; i < cnt; i++) {\n                obj = this.$children[i];\n                if (yValue < obj.y) {\n                    if (i == 0) {\n                        yValue = 0;\n                        break;\n                    }\n                    else {\n                        prev = this.$children[i - 1];\n                        if (yValue < prev.y + prev.actualHeight / 2)\n                            //top half part\n                            yValue = prev.y;\n                        //bottom half part\n                        else\n                            yValue = obj.y;\n                        break;\n                    }\n                }\n            }\n            if (i == cnt)\n                yValue = obj.y;\n        }\n        if (xValue != 0) {\n            if (i > 0)\n                i--;\n            for (; i < cnt; i++) {\n                obj = this.$children[i];\n                if (xValue < obj.x) {\n                    if (i == 0) {\n                        xValue = 0;\n                        break;\n                    }\n                    else {\n                        prev = this.$children[i - 1];\n                        if (xValue < prev.x + prev.actualWidth / 2)\n                            //top half part\n                            xValue = prev.x;\n                        //bottom half part\n                        else\n                            xValue = obj.x;\n                        break;\n                    }\n                }\n            }\n            if (i == cnt)\n                xValue = obj.x;\n        }\n        resultPoint.x = xValue;\n        resultPoint.y = yValue;\n        return resultPoint;\n    }\n    childSortingOrderChanged(child, oldValue, newValue = 0) {\n        if (newValue == 0) {\n            this.$sortingChildCount--;\n            this.setChildIndex(child, this.$children.length);\n        }\n        else {\n            if (oldValue == 0)\n                this.$sortingChildCount++;\n            let oldIndex = this.$children.indexOf(child);\n            let index = this.getInsertPosForSortingChild(child);\n            if (oldIndex < index)\n                this.$setChildIndex(child, oldIndex, index - 1);\n            else\n                this.$setChildIndex(child, oldIndex, index);\n        }\n    }\n    /**@internal */\n    constructFromResource() {\n        this.constructInternal(null, 0);\n    }\n    constructInternal(objectPool, poolIndex) {\n        let xml = this.packageItem.owner.getItemAsset(this.packageItem);\n        this.$inProgressBuilding = true;\n        let str;\n        let arr;\n        str = xml.attributes.size;\n        arr = str.split(',');\n        this.$sourceWidth = parseInt(arr[0]);\n        this.$sourceHeight = parseInt(arr[1]);\n        this.$initWidth = this.$sourceWidth;\n        this.$initHeight = this.$sourceHeight;\n        this.setSize(this.$sourceWidth, this.$sourceHeight);\n        str = xml.attributes.pivot;\n        if (str) {\n            arr = str.split(',');\n            str = xml.attributes.anchor;\n            this.internalSetPivot(parseFloat(arr[0]), parseFloat(arr[1]), str == 'true');\n        }\n        str = xml.attributes.opaque; // default false\n        this.opaque = str != 'false';\n        let overflow;\n        str = xml.attributes.overflow;\n        if (str)\n            overflow = ParseOverflowType(str);\n        else\n            overflow = 0 /* Visible */;\n        str = xml.attributes.margin;\n        if (str)\n            this.$margin.parse(str);\n        if (overflow == 2 /* Scroll */) {\n            let scroll;\n            str = xml.attributes.scroll;\n            if (str)\n                scroll = ParseScrollType(str);\n            else\n                scroll = 1 /* Vertical */;\n            let scrollBarDisplay;\n            str = xml.attributes.scrollBar;\n            if (str)\n                scrollBarDisplay = ParseScrollBarDisplayType(str);\n            else\n                scrollBarDisplay = 0 /* Default */;\n            let scrollBarFlags;\n            str = xml.attributes.scrollBarFlags;\n            if (str)\n                scrollBarFlags = parseInt(str);\n            else\n                scrollBarFlags = 0;\n            let scrollBarMargin = new Margin();\n            str = xml.attributes.scrollBarMargin;\n            if (str)\n                scrollBarMargin.parse(str);\n            let vtScrollBarRes;\n            let hzScrollBarRes;\n            str = xml.attributes.scrollBarRes;\n            if (str) {\n                arr = str.split(',');\n                vtScrollBarRes = arr[0];\n                hzScrollBarRes = arr[1];\n            }\n            let headerRes, footerRes;\n            str = xml.attributes.ptrRes;\n            if (str) {\n                arr = str.split(',');\n                headerRes = arr[0];\n                footerRes = arr[1];\n            }\n            this.setupScroll(scrollBarMargin, scroll, scrollBarDisplay, scrollBarFlags, vtScrollBarRes, hzScrollBarRes, headerRes, footerRes);\n        }\n        else\n            this.setupOverflow(overflow);\n        this.$buildingDisplayList = true;\n        let col = xml.children;\n        col.forEach(cxml => {\n            if (cxml.nodeName == 'controller') {\n                let c = new Controller();\n                this.$controllers.push(c);\n                c.$parent = this;\n                c.setup(cxml);\n            }\n        });\n        let displayList = this.packageItem.displayList;\n        displayList.forEach((di, i) => {\n            let child;\n            if (objectPool != null)\n                child = objectPool[poolIndex + i];\n            else if (di.packageItem) {\n                child = Decls.UIObjectFactory.newObject(di.packageItem);\n                child.packageItem = di.packageItem;\n                child.constructFromResource();\n            }\n            else\n                child = Decls.UIObjectFactory.newObjectDirectly(di.type);\n            child.$inProgressBuilding = true;\n            child.setupBeforeAdd(di.desc);\n            child.parent = this;\n            this.$children.push(child);\n            if (child instanceof GComponent) {\n                if (child.mask) {\n                    child.mask.set({ x: child.mask.x + child.x, y: child.mask.y + child.y });\n                }\n            }\n        }, this);\n        this.relations.setup(xml);\n        this.$children.forEach((child, i) => {\n            child.relations.setup(displayList[i].desc);\n            child.setupAfterAdd(displayList[i].desc);\n            child.$inProgressBuilding = false;\n        });\n        str = xml.attributes.mask;\n        if (str) {\n            let obj = this.getChildById(str);\n            let maskObj = obj.displayObject;\n            this.removeChild(obj);\n            if (maskObj instanceof createjs.Shape) {\n                this.mask = maskObj;\n            }\n            else if (maskObj['$disp'] instanceof Sprite) ;\n            else\n                throw new Error('only Sprite or Graphics can be applied as mask object');\n        }\n        col.forEach(cxml => {\n            if (cxml.nodeName == 'transition') {\n                let trans = new Transition(this);\n                this.$transitions.push(trans);\n                trans.setup(cxml);\n            }\n        }, this);\n        if (this.$transitions.length > 0) {\n            this.on('added', this.$added, this);\n            this.on('removed', this.$removed, this);\n        }\n        this.applyAllControllers();\n        this.$buildingDisplayList = false;\n        this.$inProgressBuilding = false;\n        this.appendChildrenList();\n        this.setBoundsChangedFlag();\n        this.constructFromXML(xml);\n    }\n    appendChildrenList() {\n        this.$children.forEach(child => {\n            if (child.displayObject != null && child.finalVisible)\n                this.$container.addChild(child.displayObject);\n        }, this);\n    }\n    constructFromXML(xml) { }\n    $added(d) {\n        this.$transitions.forEach(trans => {\n            if (trans.autoPlay)\n                trans.play({ times: trans.autoPlayRepeat, delay: trans.autoPlayDelay });\n        });\n    }\n    $removed(d) {\n        this.$transitions.forEach(trans => {\n            trans.stop(false, false);\n        });\n    }\n}\n\nclass Window extends GComponent {\n    constructor() {\n        super();\n        this.$requestingCmd = 0;\n        this.focusable = true;\n        this.$uiSources = [];\n        this.bringToFrontOnClick = UIConfig.bringWindowToFrontOnClick;\n        this.on('added', this.$onShown, this);\n        this.on('removed', this.$onHidden, this);\n        this.on(InteractiveEvents.Down, this.$mouseDown, this);\n    }\n    addUISource(source) {\n        this.$uiSources.push(source);\n    }\n    set contentPane(val) {\n        if (this.$contentPane != val) {\n            if (this.$contentPane != null)\n                this.removeChild(this.$contentPane);\n            this.$contentPane = val;\n            if (this.$contentPane != null) {\n                this.addChild(this.$contentPane);\n                this.setSize(this.$contentPane.width, this.$contentPane.height);\n                this.$contentPane.addRelation(this, 24 /* Size */);\n                this.$frame = this.$contentPane.getChild('frame');\n                if (this.$frame != null) {\n                    this.closeButton = this.$frame.getChild('closeButton');\n                    this.dragArea = this.$frame.getChild('dragArea');\n                    this.contentArea = this.$frame.getChild('contentArea');\n                }\n            }\n        }\n    }\n    get contentPane() {\n        return this.$contentPane;\n    }\n    get frame() {\n        return this.$frame;\n    }\n    get closeButton() {\n        return this.$closeButton;\n    }\n    set closeButton(value) {\n        if (this.$closeButton != null)\n            this.$closeButton.removeClick(this.closeEventHandler);\n        this.$closeButton = value;\n        if (this.$closeButton != null)\n            this.$closeButton.click(this.closeEventHandler, this);\n    }\n    get dragArea() {\n        return this.$dragArea;\n    }\n    set dragArea(value) {\n        if (this.$dragArea != value) {\n            if (this.$dragArea != null) {\n                this.$dragArea.draggable = false;\n                this.$dragArea.off(\"__dragStart\" /* START */, this.$dragStart);\n            }\n            this.$dragArea = value;\n            if (this.$dragArea != null) {\n                if (this.$dragArea instanceof GGraph)\n                    this.$dragArea.drawRect(0, '#000', '#000');\n                this.$dragArea.draggable = true;\n                this.$dragArea.on(\"__dragStart\" /* START */, this.$dragStart, this);\n            }\n        }\n    }\n    get contentArea() {\n        return this.$contentArea;\n    }\n    set contentArea(value) {\n        this.$contentArea = value;\n    }\n    show() {\n        Decls$1.GRoot.inst.showWindow(this);\n    }\n    showOn(root) {\n        root.showWindow(this);\n    }\n    hide() {\n        if (this.isShowing)\n            this.doHideAnimation();\n    }\n    hideImmediately() {\n        Decls$1.GRoot.inst.hideWindowImmediately(this);\n    }\n    centerOn(r, autoUpdate = false) {\n        this.setXY(Math.round((r.width - this.width) * 0.5), Math.round((r.height - this.height) * 0.5));\n        if (autoUpdate) {\n            this.addRelation(r, 3 /* Center_Center */);\n            this.addRelation(r, 10 /* Middle_Middle */);\n        }\n    }\n    toggleVisible() {\n        if (this.isTop)\n            this.hide();\n        else\n            this.show();\n    }\n    get isShowing() {\n        return this.parent != null;\n    }\n    get isTop() {\n        return this.parent != null && this.parent.getChildIndex(this) == this.parent.numChildren - 1;\n    }\n    get modal() {\n        return this.$modal;\n    }\n    set modal(val) {\n        this.$modal = val;\n    }\n    bringToFront() {\n        Decls$1.GRoot.inst.bringToFront(this);\n    }\n    showModalWait(msg, cmd = 0) {\n        if (cmd != 0)\n            this.$requestingCmd = cmd;\n        if (UIConfig.windowModalWaiting) {\n            if (!this.$modalWaitPane)\n                this.$modalWaitPane = UIPackage.createObjectFromURL(UIConfig.windowModalWaiting);\n            this.layoutModalWaitPane(msg);\n            this.addChild(this.$modalWaitPane);\n        }\n    }\n    layoutModalWaitPane(msg) {\n        if (this.$contentArea != null) {\n            let pt = this.$frame.localToGlobal();\n            pt = this.globalToLocal(pt.x, pt.y, pt);\n            this.$modalWaitPane.setXY(pt.x + this.$contentArea.x, pt.y + this.$contentArea.y);\n            this.$modalWaitPane.setSize(this.$contentArea.width, this.$contentArea.height);\n            if (msg && msg.length)\n                this.$modalWaitPane.text = msg;\n        }\n        else\n            this.$modalWaitPane.setSize(this.width, this.height);\n    }\n    closeModalWait(cmd = 0) {\n        if (cmd != 0) {\n            if (this.$requestingCmd != cmd)\n                return false;\n        }\n        this.$requestingCmd = 0;\n        if (this.$modalWaitPane && this.$modalWaitPane.parent != null)\n            this.removeChild(this.$modalWaitPane);\n        return true;\n    }\n    get modalWaiting() {\n        return this.$modalWaitPane && this.$modalWaitPane.parent != null;\n    }\n    init() {\n        if (this.$inited || this.$loading)\n            return;\n        if (this.$uiSources.length > 0) {\n            this.$loading = false;\n            this.$uiSources.forEach(o => {\n                if (!o.loaded) {\n                    o.load(this.$uiLoadComplete, this);\n                    this.$loading = true;\n                }\n            }, this);\n            if (!this.$loading)\n                this.$init();\n        }\n        else\n            this.$init();\n    }\n    onInit() { }\n    onShown() { }\n    onHide() { }\n    doShowAnimation() {\n        this.onShown();\n    }\n    doHideAnimation() {\n        this.hideImmediately();\n    }\n    $uiLoadComplete() {\n        let cnt = this.$uiSources.length;\n        for (let i = 0; i < cnt; i++) {\n            if (!this.$uiSources[i].loaded)\n                return;\n        }\n        this.$loading = false;\n        this.$init();\n    }\n    $init() {\n        this.$inited = true;\n        this.onInit();\n        if (this.isShowing)\n            this.doShowAnimation();\n    }\n    dispose() {\n        this.off('added', this.$onShown);\n        this.off('removed', this.$onHidden);\n        this.off(InteractiveEvents.Down, this.$mouseDown);\n        if (this.$dragArea)\n            this.$dragArea.off(\"__dragStart\" /* START */, this.$dragStart);\n        if (this.parent != null)\n            this.hideImmediately();\n        if (this.$modalWaitPane)\n            this.$modalWaitPane.dispose();\n        if (this.$contentPane)\n            this.$contentPane.dispose();\n        super.dispose();\n    }\n    closeEventHandler(evt) {\n        this.hide();\n    }\n    $onShown(target) {\n        if (!this.$inited)\n            this.init();\n        else\n            this.doShowAnimation();\n    }\n    $onHidden(target) {\n        this.closeModalWait();\n        this.onHide();\n    }\n    $mouseDown(evt) {\n        if (this.isShowing && this.bringToFrontOnClick)\n            this.bringToFront();\n    }\n    $dragStart(evt) {\n        let currentTarget = evt.data.currentTarget;\n        GObject.castFromNativeObject(currentTarget).stopDrag();\n        this.startDrag(evt.data.pointerID);\n    }\n}\n\nlet _inst;\nclass GRootMouseStatus {\n    constructor() {\n        this.touchDown = false;\n        this.mouseX = 0;\n        this.mouseY = 0;\n    }\n}\nclass GRoot extends GComponent {\n    constructor() {\n        super();\n        this.$volumeScale = 1;\n        if (_inst == null)\n            _inst = this;\n        this.opaque = false;\n        this.$popupStack = [];\n        this.$justClosedPopups = [];\n        this.$uid = GRoot.uniqueID++;\n        DOMEventManager.inst.on(\"__mouseWheel\" /* MOUSE_WHEEL */, this.dispatchMouseWheel, this);\n    }\n    static findFor(obj) {\n        if (obj instanceof GRoot)\n            return obj;\n        if (!obj)\n            return _inst;\n        var p = obj.parent;\n        while (p) {\n            if (p instanceof GRoot)\n                return p;\n            p = p.parent;\n        }\n        return _inst;\n    }\n    /**\n     * the singleton instance of the GRoot object\n     */\n    static get inst() {\n        if (_inst == null)\n            _inst = new GRoot();\n        return _inst;\n    }\n    /**\n     * the current mouse/pointer data\n     */\n    static get globalMouseStatus() {\n        return GRoot.$gmStatus;\n    }\n    /**\n     * the main entry to lauch the UI root, e.g.: GRoot.inst.attachTo(app, options)\n     * @param app your createjs.Stage instance to be used in this GRoot instance\n     * @param stageOptions stage rotation / resize options\n     */\n    attachTo(stage, stageOptions) {\n        createjs.Touch.enable(stage);\n        stage.mouseEnabled = true;\n        stage.mouseChildren = true;\n        stage.enableMouseOver(50);\n        // if (this.$uiStage) {\n        //     this.$uiStage.off(DisplayObjectEvent.SIZE_CHANGED, this.$winResize);\n        //     this.$uiStage.nativeStage.off(InteractiveEvents.Down, this.$stageDown);\n        //     this.$uiStage.nativeStage.off(InteractiveEvents.Up, this.$stageUp);\n        //     this.$uiStage.nativeStage.off(InteractiveEvents.Move, this.$stageMove);\n        //     this.$uiStage.nativeStage.off(this.$displayObject);\n        //     this.$uiStage.dispose();\n        // }\n        this.$uiStage = new UIStage(stage, stageOptions);\n        this.$uiStage.on(\"__sizeChanged\" /* SIZE_CHANGED */, this.$winResize, this);\n        this.$uiStage.nativeStage.on(InteractiveEvents.Down, this.$stageDown, this);\n        this.$uiStage.nativeStage.on(InteractiveEvents.Up, this.$stageUp, this);\n        this.$uiStage.nativeStage.on(InteractiveEvents.Move, this.$stageMove, this);\n        this.$uiStage.nativeStage.on(InteractiveEvents.Click, this.$click, this);\n        this.$uiStage.nativeStage.addChild(this.$displayObject);\n        this.$winResize(this.$uiStage);\n        if (!this.$modalLayer) {\n            this.$modalLayer = new GGraph();\n            this.$modalLayer.setSize(this.width, this.height);\n            this.$modalLayer.drawRect(0, '', UIConfig.modalLayerColor);\n            this.$modalLayer.addRelation(this, 24 /* Size */);\n        }\n    }\n    get uniqueID() {\n        return this.$uid;\n    }\n    get stageWidth() {\n        return this.$uiStage.stageWidth;\n    }\n    get stageHeight() {\n        return this.$uiStage.stageHeight;\n    }\n    get contentScaleFactor() {\n        return this.$uiStage.resolution;\n    }\n    get applicationContext() {\n        return this.$uiStage.applicationContext;\n    }\n    get nativeStage() {\n        return this.$uiStage.nativeStage;\n    }\n    get orientation() {\n        return this.$uiStage.orientation;\n    }\n    get stageWrapper() {\n        return this.$uiStage;\n    }\n    dispatchMouseWheel(evt) {\n        let event = evt.data.event;\n        let childUnderMouse = this.getObjectUnderPoint(GRoot.globalMouseStatus.mouseX, GRoot.globalMouseStatus.mouseY);\n        if (childUnderMouse != null) {\n            //bubble\n            while (childUnderMouse.parent && childUnderMouse.parent != this) {\n                let mouseWheelEvent = new createjs.Event(\"__mouseWheel\" /* MOUSE_WHEEL */, true, false);\n                mouseWheelEvent.data = { event };\n                childUnderMouse.dispatchEvent(mouseWheelEvent);\n                childUnderMouse = childUnderMouse.parent;\n            }\n        }\n    }\n    /**\n     * get the objects which are placed underneath the given stage coordinate\n     * @param globalX the stage X\n     * @param globalY the stage Y\n     */\n    getObjectUnderPoint(globalX, globalY) {\n        GRoot.sHelperPoint.setValues(globalX, globalY);\n        window['test'] = true;\n        let ret = this.$uiStage.applicationContext.getObjectUnderPoint(GRoot.sHelperPoint.x, GRoot.sHelperPoint.y, 0);\n        return GObject.castFromNativeObject(ret);\n    }\n    showWindow(win) {\n        this.addChild(win);\n        win.requestFocus();\n        if (win.x > this.width)\n            win.x = this.width - win.width;\n        else if (win.x + win.width < 0)\n            win.x = 0;\n        if (win.y > this.height)\n            win.y = this.height - win.height;\n        else if (win.y + win.height < 0)\n            win.y = 0;\n        this.adjustModalLayer();\n    }\n    hideWindow(win) {\n        win.hide();\n    }\n    hideWindowImmediately(win) {\n        if (win.parent == this)\n            this.removeChild(win);\n        this.adjustModalLayer();\n    }\n    bringToFront(win) {\n        let i;\n        if (this.$modalLayer.parent != null && !win.modal)\n            i = this.getChildIndex(this.$modalLayer) - 1;\n        else\n            i = this.numChildren - 1;\n        for (; i >= 0; i--) {\n            let g = this.getChildAt(i);\n            if (g == win)\n                return;\n            if (g instanceof Window)\n                break;\n        }\n        if (i >= 0)\n            this.setChildIndex(win, i);\n    }\n    showModalWait(msg = null) {\n        if (UIConfig.globalModalWaiting != null) {\n            if (this.$modalWaitPane == null) {\n                this.$modalWaitPane = UIPackage.createObjectFromURL(UIConfig.globalModalWaiting);\n                this.$modalWaitPane.addRelation(this, 24 /* Size */);\n            }\n            this.$modalWaitPane.setSize(this.width, this.height);\n            this.addChild(this.$modalWaitPane);\n            this.$modalWaitPane.text = msg;\n        }\n    }\n    closeModalWait() {\n        if (this.$modalWaitPane != null && this.$modalWaitPane.parent != null)\n            this.removeChild(this.$modalWaitPane);\n    }\n    closeAllExceptModals() {\n        let arr = this.$children.slice();\n        arr.forEach(g => {\n            if (g instanceof Window && !g.modal)\n                g.hide();\n        }, this);\n    }\n    closeAllWindows() {\n        let arr = this.$children.slice();\n        arr.forEach(g => {\n            if (g instanceof Window)\n                g.hide();\n        }, this);\n    }\n    getTopWindow() {\n        let cnt = this.numChildren;\n        for (let i = cnt - 1; i >= 0; i--) {\n            let g = this.getChildAt(i);\n            if (g instanceof Window) {\n                return g;\n            }\n        }\n        return null;\n    }\n    get hasModalWindow() {\n        return this.$modalLayer.parent != null;\n    }\n    get modalWaiting() {\n        return this.$modalWaitPane && this.$modalWaitPane.inContainer;\n    }\n    showPopup(popup, target = null, dir = 0 /* Auto */) {\n        if (this.$popupStack.length > 0) {\n            let k = this.$popupStack.indexOf(popup);\n            if (k != -1) {\n                for (let i = this.$popupStack.length - 1; i >= k; i--)\n                    this.removeChild(this.$popupStack.pop());\n            }\n        }\n        this.$popupStack.push(popup);\n        this.addChild(popup);\n        this.adjustModalLayer();\n        let pos;\n        let sizeW = 0, sizeH = 0;\n        if (target) {\n            pos = target.localToRoot();\n            sizeW = target.width;\n            sizeH = target.height;\n        }\n        else\n            pos = this.globalToLocal(GRoot.$gmStatus.mouseX, GRoot.$gmStatus.mouseY);\n        let xx, yy;\n        xx = pos.x;\n        if (xx + popup.width > this.width)\n            xx = xx + sizeW - popup.width;\n        yy = pos.y + sizeH;\n        if ((dir == 0 /* Auto */ && yy + popup.height > this.height) ||\n            dir == 2 /* Up */) {\n            yy = pos.y - popup.height - 1;\n            if (yy < 0) {\n                yy = 0;\n                xx += sizeW * 0.5;\n            }\n        }\n        popup.x = xx;\n        popup.y = yy;\n    }\n    togglePopup(popup, target = null, dir) {\n        if (this.$justClosedPopups.indexOf(popup) != -1)\n            return;\n        this.showPopup(popup, target, dir);\n    }\n    hidePopup(popup = null) {\n        let i;\n        if (popup != null) {\n            let k = this.$popupStack.indexOf(popup);\n            if (k != -1) {\n                for (i = this.$popupStack.length - 1; i >= k; i--)\n                    this.closePopup(this.$popupStack.pop());\n            }\n        }\n        else {\n            let cnt = this.$popupStack.length;\n            for (i = cnt - 1; i >= 0; i--)\n                this.closePopup(this.$popupStack[i]);\n            this.$popupStack.length = 0;\n        }\n    }\n    get hasAnyPopup() {\n        return this.$popupStack.length != 0;\n    }\n    closePopup(target) {\n        if (target.parent != null) {\n            if (target instanceof Window)\n                target.hide();\n            else\n                this.removeChild(target);\n        }\n    }\n    showTooltips(msg) {\n        if (this.$defaultTooltipWin == null) {\n            let resourceURL = UIConfig.tooltipsWin;\n            if (!resourceURL) {\n                console.error('UIConfig.tooltipsWin not defined');\n                return;\n            }\n            this.$defaultTooltipWin = UIPackage.createObjectFromURL(resourceURL);\n        }\n        this.$defaultTooltipWin.text = msg;\n        this.showTooltipsWin(this.$defaultTooltipWin);\n    }\n    showTooltipsWin(tooltipWin, position = null) {\n        this.hideTooltips();\n        this.$tooltipWin = tooltipWin;\n        let xx = 0;\n        let yy = 0;\n        if (position == null) {\n            xx = GRoot.$gmStatus.mouseX + 10;\n            yy = GRoot.$gmStatus.mouseY + 20;\n        }\n        else {\n            xx = position.x;\n            yy = position.y;\n        }\n        let pt = this.globalToLocal(xx, yy);\n        xx = pt.x;\n        yy = pt.y;\n        if (xx + this.$tooltipWin.width > this.width) {\n            xx = xx - this.$tooltipWin.width - 1;\n            if (xx < 0)\n                xx = 10;\n        }\n        if (yy + this.$tooltipWin.height > this.height) {\n            yy = yy - this.$tooltipWin.height - 1;\n            if (xx - this.$tooltipWin.width - 1 > 0)\n                xx = xx - this.$tooltipWin.width - 1;\n            if (yy < 0)\n                yy = 10;\n        }\n        this.$tooltipWin.x = xx;\n        this.$tooltipWin.y = yy;\n        this.addChild(this.$tooltipWin);\n    }\n    hideTooltips() {\n        if (this.$tooltipWin != null) {\n            if (this.$tooltipWin.parent)\n                this.removeChild(this.$tooltipWin);\n            this.$tooltipWin = null;\n        }\n    }\n    get focus() {\n        if (this.$focusedObject && !this.$focusedObject.onStage)\n            this.$focusedObject = null;\n        return this.$focusedObject;\n    }\n    set focus(value) {\n        if (value && (!value.focusable || !value.onStage))\n            throw new Error('Invalid target to focus');\n        this.setFocus(value);\n    }\n    setFocus(value) {\n        if (this.$focusedObject != value) {\n            this.$focusedObject = value;\n            let evt = new createjs.Event(\"__focusChanged\" /* CHANGED */, true, false);\n            this.dispatchEvent(evt, this);\n        }\n    }\n    get volumeScale() {\n        return this.$volumeScale;\n    }\n    set volumeScale(value) {\n        this.$volumeScale = value;\n    }\n    playOneShotSound(sound, volumeScale = 1) {\n        var vs = this.$volumeScale * volumeScale;\n        sound.play({ volume: vs });\n    }\n    adjustModalLayer() {\n        let cnt = this.numChildren;\n        if (this.$modalWaitPane != null && this.$modalWaitPane.parent != null)\n            this.setChildIndex(this.$modalWaitPane, cnt - 1);\n        for (let i = cnt - 1; i >= 0; i--) {\n            let g = this.getChildAt(i);\n            if (g instanceof Window && g.modal) {\n                if (this.$modalLayer.parent == null)\n                    this.addChildAt(this.$modalLayer, i);\n                else\n                    this.setChildIndexBefore(this.$modalLayer, i);\n                return;\n            }\n        }\n        if (this.$modalLayer.parent != null)\n            this.removeChild(this.$modalLayer);\n    }\n    $stageDown(evt) {\n        // see Drag & Drop\n        GRoot.$gmStatus.mouseX = evt.stageX;\n        GRoot.$gmStatus.mouseY = evt.stageY;\n        GRoot.$gmStatus.touchDown = true;\n        //check focus\n        let mc = evt.target;\n        while (mc && mc != this.nativeStage) {\n            if (isUIObject(mc)) {\n                let g = mc.UIOwner;\n                if (g.touchable && g.focusable) {\n                    this.setFocus(g);\n                    break;\n                }\n            }\n            mc = mc.parent;\n        }\n        if (this.$tooltipWin != null)\n            this.hideTooltips();\n        this.checkPopups(evt.target);\n    }\n    checkPopups(target) {\n        if (this.$checkingPopups)\n            return;\n        this.$checkingPopups = true;\n        this.$justClosedPopups.length = 0;\n        if (this.$popupStack.length > 0) {\n            let mc = target;\n            while (mc && mc != this.nativeStage) {\n                if (isUIObject(mc)) {\n                    let pindex = this.$popupStack.indexOf(mc.UIOwner);\n                    if (pindex != -1) {\n                        let popup;\n                        for (let i = this.$popupStack.length - 1; i > pindex; i--) {\n                            popup = this.$popupStack.pop();\n                            this.closePopup(popup);\n                            this.$justClosedPopups.push(popup);\n                        }\n                        return;\n                    }\n                }\n                mc = mc.parent;\n            }\n            let cnt = this.$popupStack.length;\n            let popup;\n            for (let i = cnt - 1; i >= 0; i--) {\n                popup = this.$popupStack[i];\n                this.closePopup(popup);\n                this.$justClosedPopups.push(popup);\n            }\n            this.$popupStack.length = 0;\n        }\n    }\n    $stageMove(evt) {\n        GRoot.$gmStatus.mouseX = evt.stageX;\n        GRoot.$gmStatus.mouseY = evt.stageY;\n    }\n    $stageUp(evt) {\n        GRoot.$gmStatus.touchDown = false;\n        this.$checkingPopups = false;\n    }\n    $click(evt) { }\n    $winResize(stage) {\n        this.setSize(stage.stageWidth, stage.stageHeight);\n    }\n}\nGRoot.uniqueID = 0;\nGRoot.$gmStatus = new GRootMouseStatus();\nDecls$1.GRoot = GRoot;\n\nvar TEXT_GRADIENT;\n(function (TEXT_GRADIENT) {\n    TEXT_GRADIENT[TEXT_GRADIENT[\"LINEAR_VERTICAL\"] = 0] = \"LINEAR_VERTICAL\";\n    TEXT_GRADIENT[TEXT_GRADIENT[\"LINEAR_HORIZONTAL\"] = 1] = \"LINEAR_HORIZONTAL\";\n})(TEXT_GRADIENT || (TEXT_GRADIENT = {}));\nconst defaultStyle = {\n    align: 'left',\n    breakWords: false,\n    dropShadow: false,\n    dropShadowAlpha: 1,\n    dropShadowAngle: Math.PI / 6,\n    dropShadowBlur: 0,\n    dropShadowColor: 'black',\n    dropShadowDistance: 5,\n    dropShadowOffsetX: 0,\n    dropShadowOffsetY: 0,\n    fill: 'black',\n    fillGradientType: TEXT_GRADIENT.LINEAR_VERTICAL,\n    fillGradientStops: [],\n    fontFamily: 'Arial',\n    fontSize: 26,\n    fontStyle: 'normal',\n    fontVariant: 'normal',\n    fontWeight: 'normal',\n    letterSpacing: 0,\n    lineHeight: 0,\n    lineJoin: 'miter',\n    miterLimit: 10,\n    padding: 0,\n    stroke: 'black',\n    strokeThickness: 0,\n    textBaseline: 'alphabetic',\n    trim: false,\n    whiteSpace: 'pre',\n    wordWrap: false,\n    wordWrapWidth: 100,\n    leading: 0\n};\nconst genericFontFamilies = ['serif', 'sans-serif', 'monospace', 'cursive', 'fantasy', 'system-ui'];\nclass TextStyle {\n    constructor(style) {\n        this.styleID = 0;\n        this.reset();\n        Utils.deepCopyProperties(this, style, style);\n    }\n    clone() {\n        const clonedProperties = {};\n        Utils.deepCopyProperties(clonedProperties, this, defaultStyle);\n        return new TextStyle(clonedProperties);\n    }\n    /**\n     * Resets all properties to the defaults specified in TextStyle.prototype._default\n     */\n    reset() {\n        Utils.deepCopyProperties(this, defaultStyle, defaultStyle);\n    }\n    /**\n     * Alignment for multiline text ('left', 'center' or 'right'), does not affect single line text\n     *\n     * @member {string}\n     */\n    get align() {\n        return this._align;\n    }\n    set align(align) {\n        if (this._align !== align) {\n            this._align = align;\n            this.styleID++;\n        }\n    }\n    /**\n     * Indicates if lines can be wrapped within words, it needs wordWrap to be set to true\n     *\n     * @member {boolean}\n     */\n    get breakWords() {\n        return this._breakWords;\n    }\n    set breakWords(breakWords) {\n        if (this._breakWords !== breakWords) {\n            this._breakWords = breakWords;\n            this.styleID++;\n        }\n    }\n    /**\n     * Set a drop shadow for the text\n     *\n     * @member {boolean}\n     */\n    get dropShadow() {\n        return this._dropShadow;\n    }\n    set dropShadow(dropShadow) {\n        if (this._dropShadow !== dropShadow) {\n            this._dropShadow = dropShadow;\n            this.styleID++;\n        }\n    }\n    /**\n     * Set alpha for the drop shadow\n     *\n     * @member {number}\n     */\n    get dropShadowAlpha() {\n        return this._dropShadowAlpha;\n    }\n    set dropShadowAlpha(dropShadowAlpha) {\n        if (this._dropShadowAlpha !== dropShadowAlpha) {\n            this._dropShadowAlpha = dropShadowAlpha;\n            this.styleID++;\n        }\n    }\n    /**\n     * Set a angle of the drop shadow\n     *\n     * @member {number}\n     */\n    get dropShadowAngle() {\n        return this._dropShadowAngle;\n    }\n    set dropShadowAngle(dropShadowAngle) {\n        if (this._dropShadowAngle !== dropShadowAngle) {\n            this._dropShadowAngle = dropShadowAngle;\n            this.styleID++;\n        }\n    }\n    /**\n     * Set a shadow blur radius\n     *\n     * @member {number}\n     */\n    get dropShadowBlur() {\n        return this._dropShadowBlur;\n    }\n    set dropShadowBlur(dropShadowBlur) {\n        if (this._dropShadowBlur !== dropShadowBlur) {\n            this._dropShadowBlur = dropShadowBlur;\n            this.styleID++;\n        }\n    }\n    /**\n     * A fill style to be used on the dropshadow e.g 'red', '#00FF00'\n     *\n     * @member {string|number}\n     */\n    get dropShadowColor() {\n        return this._dropShadowColor;\n    }\n    set dropShadowColor(dropShadowColor) {\n        const outputColor = getColor(dropShadowColor);\n        if (this._dropShadowColor !== outputColor) {\n            this._dropShadowColor = outputColor;\n            this.styleID++;\n        }\n    }\n    /**\n     * Set a distance of the drop shadow\n     *\n     * @member {number}\n     */\n    get dropShadowDistance() {\n        return this._dropShadowDistance;\n    }\n    set dropShadowDistance(dropShadowDistance) {\n        if (this._dropShadowDistance !== dropShadowDistance) {\n            this._dropShadowDistance = dropShadowDistance;\n            this.styleID++;\n        }\n    }\n    /**\n     * Set a offsetX of the drop shadow\n     *\n     * @member {number}\n     */\n    get dropShadowOffsetX() {\n        return this._dropShadowOffsetX;\n    }\n    set dropShadowOffsetX(dropShadowOffsetX) {\n        if (this._dropShadowOffsetX !== dropShadowOffsetX) {\n            this._dropShadowOffsetX = dropShadowOffsetX;\n            this.styleID++;\n        }\n    }\n    /**\n     * Set a offsetY of the drop shadow\n     *\n     * @member {number}\n     */\n    get dropShadowOffsetY() {\n        return this._dropShadowOffsetY;\n    }\n    set dropShadowOffsetY(dropShadowOffsetY) {\n        if (this._dropShadowOffsetY !== dropShadowOffsetY) {\n            this._dropShadowOffsetY = dropShadowOffsetY;\n            this.styleID++;\n        }\n    }\n    /**\n     * A canvas fillstyle that will be used on the text e.g 'red', '#00FF00'.\n     * Can be an array to create a gradient eg ['#000000','#FFFFFF']\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle|MDN}\n     *\n     * @member {string|string[]|number|number[]|CanvasGradient|CanvasPattern}\n     */\n    get fill() {\n        return this._fill;\n    }\n    set fill(fill) {\n        const outputColor = getColor(fill);\n        if (this._fill !== outputColor) {\n            this._fill = outputColor;\n            this.styleID++;\n        }\n    }\n    get fillGradientType() {\n        return this._fillGradientType;\n    }\n    set fillGradientType(fillGradientType) {\n        if (this._fillGradientType !== fillGradientType) {\n            this._fillGradientType = fillGradientType;\n            this.styleID++;\n        }\n    }\n    get fillGradientStops() {\n        return this._fillGradientStops;\n    }\n    set fillGradientStops(fillGradientStops) {\n        if (!areArraysEqual(this._fillGradientStops, fillGradientStops)) {\n            this._fillGradientStops = fillGradientStops;\n            this.styleID++;\n        }\n    }\n    get fontFamily() {\n        return this._fontFamily;\n    }\n    set fontFamily(fontFamily) {\n        if (this.fontFamily !== fontFamily) {\n            this._fontFamily = fontFamily;\n            this.styleID++;\n        }\n    }\n    get fontSize() {\n        return this._fontSize;\n    }\n    set fontSize(fontSize) {\n        if (this._fontSize !== fontSize) {\n            this._fontSize = fontSize;\n            this.styleID++;\n        }\n    }\n    get fontStyle() {\n        return this._fontStyle;\n    }\n    set fontStyle(fontStyle) {\n        if (this._fontStyle !== fontStyle) {\n            this._fontStyle = fontStyle;\n            this.styleID++;\n        }\n    }\n    /**\n     * The font variant\n     * ('normal' or 'small-caps')\n     *\n     * @member {string}\n     */\n    get fontVariant() {\n        return this._fontVariant;\n    }\n    set fontVariant(fontVariant) {\n        if (this._fontVariant !== fontVariant) {\n            this._fontVariant = fontVariant;\n            this.styleID++;\n        }\n    }\n    /**\n     * The font weight\n     * ('normal', 'bold', 'bolder', 'lighter' and '100', '200', '300', '400', '500', '600', '700', 800' or '900')\n     *\n     * @member {string}\n     */\n    get fontWeight() {\n        return this._fontWeight;\n    }\n    set fontWeight(fontWeight) {\n        if (this._fontWeight !== fontWeight) {\n            this._fontWeight = fontWeight;\n            this.styleID++;\n        }\n    }\n    /**\n     * The amount of spacing between letters, default is 0\n     *\n     * @member {number}\n     */\n    get letterSpacing() {\n        return this._letterSpacing;\n    }\n    set letterSpacing(letterSpacing) {\n        if (this._letterSpacing !== letterSpacing) {\n            this._letterSpacing = letterSpacing;\n            this.styleID++;\n        }\n    }\n    /**\n     * The line height, a number that represents the vertical space that a letter uses\n     *\n     * @member {number}\n     */\n    get lineHeight() {\n        return this._lineHeight;\n    }\n    set lineHeight(lineHeight) {\n        if (this._lineHeight !== lineHeight) {\n            this._lineHeight = lineHeight;\n            this.styleID++;\n        }\n    }\n    /**\n     * The space between lines\n     *\n     * @member {number}\n     */\n    get leading() {\n        return this._leading;\n    }\n    set leading(leading) {\n        if (this._leading !== leading) {\n            this._leading = leading;\n            this.styleID++;\n        }\n    }\n    /**\n     * The lineJoin property sets the type of corner created, it can resolve spiked text issues.\n     * Default is 'miter' (creates a sharp corner).\n     *\n     * @member {string}\n     */\n    get lineJoin() {\n        return this._lineJoin;\n    }\n    set lineJoin(lineJoin) {\n        if (this._lineJoin !== lineJoin) {\n            this._lineJoin = lineJoin;\n            this.styleID++;\n        }\n    }\n    /**\n     * The miter limit to use when using the 'miter' lineJoin mode\n     * This can reduce or increase the spikiness of rendered text.\n     *\n     * @member {number}\n     */\n    get miterLimit() {\n        return this._miterLimit;\n    }\n    set miterLimit(miterLimit) {\n        if (this._miterLimit !== miterLimit) {\n            this._miterLimit = miterLimit;\n            this.styleID++;\n        }\n    }\n    /**\n     * Occasionally some fonts are cropped. Adding some padding will prevent this from happening\n     * by adding padding to all sides of the text.\n     *\n     * @member {number}\n     */\n    get padding() {\n        return this._padding;\n    }\n    set padding(padding) {\n        if (this._padding !== padding) {\n            this._padding = padding;\n            this.styleID++;\n        }\n    }\n    /**\n     * A canvas fillstyle that will be used on the text stroke\n     * e.g 'blue', '#FCFF00'\n     *\n     * @member {string}\n     */\n    get stroke() {\n        return this._stroke;\n    }\n    set stroke(stroke) {\n        // TODO: Can't have different types for getter and setter. The getter shouldn't have the number type as\n        //       the setter converts to string. See this thread for more details:\n        //       https://github.com/microsoft/TypeScript/issues/2521\n        const outputColor = getColor(stroke);\n        if (this._stroke !== outputColor) {\n            this._stroke = outputColor;\n            this.styleID++;\n        }\n    }\n    /**\n     * A number that represents the thickness of the stroke.\n     * Default is 0 (no stroke)\n     *\n     * @member {number}\n     */\n    get strokeThickness() {\n        return this._strokeThickness;\n    }\n    set strokeThickness(strokeThickness) {\n        if (this._strokeThickness !== strokeThickness) {\n            this._strokeThickness = strokeThickness;\n            this.styleID++;\n        }\n    }\n    /**\n     * The baseline of the text that is rendered.\n     *\n     * @member {string}\n     */\n    get textBaseline() {\n        return this._textBaseline;\n    }\n    set textBaseline(textBaseline) {\n        if (this._textBaseline !== textBaseline) {\n            this._textBaseline = textBaseline;\n            this.styleID++;\n        }\n    }\n    /**\n     * Trim transparent borders\n     *\n     * @member {boolean}\n     */\n    get trim() {\n        return this._trim;\n    }\n    set trim(trim) {\n        if (this._trim !== trim) {\n            this._trim = trim;\n            this.styleID++;\n        }\n    }\n    /**\n     * How newlines and spaces should be handled.\n     * Default is 'pre' (preserve, preserve).\n     *\n     *  value       | New lines     |   Spaces\n     *  ---         | ---           |   ---\n     * 'normal'     | Collapse      |   Collapse\n     * 'pre'        | Preserve      |   Preserve\n     * 'pre-line'   | Preserve      |   Collapse\n     *\n     * @member {string}\n     */\n    get whiteSpace() {\n        return this._whiteSpace;\n    }\n    set whiteSpace(whiteSpace) {\n        if (this._whiteSpace !== whiteSpace) {\n            this._whiteSpace = whiteSpace;\n            this.styleID++;\n        }\n    }\n    /**\n     * Indicates if word wrap should be used\n     *\n     * @member {boolean}\n     */\n    get wordWrap() {\n        return this._wordWrap;\n    }\n    set wordWrap(wordWrap) {\n        if (this._wordWrap !== wordWrap) {\n            this._wordWrap = wordWrap;\n            this.styleID++;\n        }\n    }\n    /**\n     * The width at which text will wrap, it needs wordWrap to be set to true\n     *\n     * @member {number}\n     */\n    get wordWrapWidth() {\n        return this._wordWrapWidth;\n    }\n    set wordWrapWidth(wordWrapWidth) {\n        if (this._wordWrapWidth !== wordWrapWidth) {\n            this._wordWrapWidth = wordWrapWidth;\n            this.styleID++;\n        }\n    }\n    /**\n     * Generates a font style string to use for `TextMetrics.measureFont()`.\n     *\n     * @return {string} Font style string, for passing to `TextMetrics.measureFont()`\n     */\n    toFontString() {\n        // build canvas api font setting from individual components. Convert a numeric this.fontSize to px\n        const fontSizeString = typeof this.fontSize === 'number' ? `${this.fontSize}px` : this.fontSize;\n        // Clean-up fontFamily property by quoting each font name\n        // this will support font names with spaces\n        let fontFamilies = this.fontFamily;\n        if (!Array.isArray(this.fontFamily)) {\n            fontFamilies = this.fontFamily.split(',');\n        }\n        for (let i = fontFamilies.length - 1; i >= 0; i--) {\n            // Trim any extra white-space\n            let fontFamily = fontFamilies[i].trim();\n            // Check if font already contains strings\n            if (!/([\\\"\\'])[^\\'\\\"]+\\1/.test(fontFamily) && genericFontFamilies.indexOf(fontFamily) < 0) {\n                fontFamily = `\"${fontFamily}\"`;\n            }\n            fontFamilies[i] = fontFamily;\n        }\n        return `${this.fontStyle} ${this.fontVariant} ${this.fontWeight} ${fontSizeString} ${fontFamilies.join(',')}`;\n    }\n}\nfunction getSingleColor(color) {\n    if (typeof color === 'number') {\n        return StringUtil.convertToHtmlColor(color);\n        // // todo\n        // return color\n    }\n    else if (typeof color === 'string') {\n        if (color.indexOf('0x') === 0) {\n            color = color.replace('0x', '#');\n        }\n    }\n    return color;\n}\nfunction getColor(color) {\n    if (!Array.isArray(color)) {\n        return getSingleColor(color);\n    }\n    else {\n        for (let i = 0; i < color.length; ++i) {\n            color[i] = getSingleColor(color[i]);\n        }\n        return color;\n    }\n}\nfunction areArraysEqual(array1, array2) {\n    if (!Array.isArray(array1) || !Array.isArray(array2)) {\n        return false;\n    }\n    if (array1.length !== array2.length) {\n        return false;\n    }\n    for (let i = 0; i < array1.length; ++i) {\n        if (array1[i] !== array2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nclass UITextField extends createjs.Text {\n    constructor(owner) {\n        super();\n        this.$minHeightID = -1;\n        this.UIOwner = owner;\n        this.style = new TextStyle({});\n        // this.mouseEnabled = false;\n        // this.interactive = this.interactiveChildren = false;\n        // this._texture.noFrame = false;\n        // this._width = this._texture.frame.width;\n        // this._height = this._texture.frame.height;\n        // this.$minHeight = -1;\n        // this._texture.on(\"update\", this.updateFrame, this);\n    }\n    get minHeight() {\n        return this.$minHeight;\n    }\n    applyStyle() {\n        let canvas = Decls$1.GRoot.inst.applicationContext.canvas;\n        this.font = this.style.toFontString();\n        this.color = this.style.fill;\n        let letterSpacing = this.style.letterSpacing;\n        if (letterSpacing) {\n            canvas.style.letterSpacing = `${letterSpacing}px`;\n        }\n        else {\n            canvas.style.letterSpacing = `0px`;\n        }\n        let leading = this.style.leading;\n        if (leading) {\n            this.lineHeight = this.getMeasuredLineHeight() + leading;\n        }\n        else {\n            this.lineHeight = this.getMeasuredLineHeight();\n        }\n        let strokeThickness = this.style.strokeThickness;\n        if (strokeThickness) {\n            if (!this.multiple) {\n                this.multiple = new createjs.Text(this.text, this.font, this.color);\n                this.UIOwner.parent.displayObject.addChild(this.multiple);\n            }\n            this.multiple.outline = strokeThickness;\n            if (this.style.stroke != this.color) {\n                this.multiple.color = this.style.stroke;\n            }\n            this.multiple.lineHeight = this.lineHeight;\n            this.multiple.lineWidth = this.lineWidth;\n        }\n        let shadow = new createjs.Shadow(this.style.dropShadowColor, this.style.dropShadowOffsetX, this.style.dropShadowOffsetY, this.style.dropShadowBlur);\n        this.shadow = shadow;\n        let { x, y, width, height } = this;\n        this.setBounds(x, y, width, height);\n    }\n    /**@internal */\n    $updateMinHeight() {\n        this.$minHeight = this.getMeasuredLineHeight();\n    }\n    // protected updateFrame(): void {\n    //     GTimer.inst.callLater(this.internalUpdateFrame, this);\n    // }\n    // private internalUpdateFrame(): void {\n    // if(this._texture) {\n    //     let frm = this._texture.frame;\n    //     this._height = Math.max(this._height, this.$minHeight);\n    //     let w = frm.x + this._width, h = frm.y + this._height;\n    //     if(w > this._texture.baseTexture.width)\n    //         w = this._texture.baseTexture.width - frm.x;\n    //     if(h > this._texture.baseTexture.height)\n    //         h = this._texture.baseTexture.height - frm.y;\n    //     frm.width = w / this.resolution;\n    //     frm.height = h / this.resolution;\n    //     this._texture.trim.width = frm.width;\n    //     this._texture.trim.height = frm.height;\n    //     let padding = this._style.trim ? 0 : this._style.padding;\n    //     this._texture.trim.x = -padding;\n    //     this._texture.trim.y = -padding;\n    //     this._texture.frame = frm;\n    // }\n    // }\n    //cancel scaling update\n    // protected _onTextureUpdate(): void {\n    // this._textureID = -1;\n    // this._textureTrimmedID = -1;\n    // }\n    get width() {\n        return this.getMetrics()['width'];\n    }\n    set width(v) {\n        this.lineWidth = v;\n        if (this.multiple) {\n            this.multiple.lineWidth = v;\n        }\n    }\n    get height() {\n        return this.lineHeight;\n    }\n    set height(v) {\n        this.lineHeight = v;\n        if (this.multiple) {\n            this.multiple.lineHeight = v;\n        }\n    }\n    get textHeight() {\n        return this.getMeasuredHeight();\n    }\n    set textHeight(v) { }\n    get textWidth() {\n        return this.getMeasuredWidth();\n    }\n    set content(v) {\n        this.text = v;\n        if (this.multiple) {\n            this.multiple.text = v;\n        }\n    }\n    get content() {\n        return this.text;\n    }\n    updateMultiplePosition(x, y) {\n        if (this.multiple) {\n            this.multiple.x = x;\n            this.multiple.y = y;\n        }\n    }\n}\n\nclass TextMetrics {\n    constructor(text, style, width, height, lines, lineWidths, lineHeight, maxLineWidth, fontProperties) {\n        this.text = text;\n        this.style = style;\n        this.width = width;\n        this.height = height;\n        this.lines = lines;\n        this.lineWidths = lineWidths;\n        this.lineHeight = lineHeight;\n        this.maxLineWidth = maxLineWidth;\n        this.fontProperties = fontProperties;\n    }\n    static measureText(text, style, wordWrap, canvas = TextMetrics._canvas) {\n        wordWrap = wordWrap === undefined || wordWrap === null ? style.wordWrap : wordWrap;\n        const font = style.toFontString();\n        const fontProperties = TextMetrics.measureFont(font);\n        // fallback in case UA disallow canvas data extraction\n        // (toDataURI, getImageData functions)\n        if (fontProperties.fontSize === 0) {\n            fontProperties.fontSize = style.fontSize;\n            fontProperties.ascent = style.fontSize;\n        }\n        const context = canvas.getContext('2d');\n        context.font = font;\n        const outputText = wordWrap ? TextMetrics.wordWrap(text, style, canvas) : text;\n        const lines = outputText.split(/(?:\\r\\n|\\r|\\n)/);\n        const lineWidths = new Array(lines.length);\n        let maxLineWidth = 0;\n        for (let i = 0; i < lines.length; i++) {\n            const lineWidth = context.measureText(lines[i]).width + (lines[i].length - 1) * style.letterSpacing;\n            lineWidths[i] = lineWidth;\n            maxLineWidth = Math.max(maxLineWidth, lineWidth);\n        }\n        let width = maxLineWidth + style.strokeThickness;\n        if (style.dropShadow) {\n            width += style.dropShadowDistance;\n        }\n        const lineHeight = style.lineHeight || fontProperties.fontSize + style.strokeThickness;\n        let height = Math.max(lineHeight, fontProperties.fontSize + style.strokeThickness) +\n            (lines.length - 1) * (lineHeight + style.leading);\n        if (style.dropShadow) {\n            height += style.dropShadowDistance;\n        }\n        return new TextMetrics(text, style, width, height, lines, lineWidths, lineHeight + style.leading, maxLineWidth, fontProperties);\n    }\n    static wordWrap(text, style, canvas = TextMetrics._canvas) {\n        const context = canvas.getContext('2d');\n        let width = 0;\n        let line = '';\n        let lines = '';\n        const cache = Object.create(null);\n        const { letterSpacing, whiteSpace } = style;\n        // How to handle whitespaces\n        const collapseSpaces = TextMetrics.collapseSpaces(whiteSpace);\n        const collapseNewlines = TextMetrics.collapseNewlines(whiteSpace);\n        // whether or not spaces may be added to the beginning of lines\n        let canPrependSpaces = !collapseSpaces;\n        const wordWrapWidth = style.wordWrapWidth + letterSpacing;\n        // break text into words, spaces and newline chars\n        const tokens = TextMetrics.tokenize(text);\n        for (let i = 0; i < tokens.length; i++) {\n            // get the word, space or newlineChar\n            let token = tokens[i];\n            // if word is a new line\n            if (TextMetrics.isNewline(token)) {\n                // keep the new line\n                if (!collapseNewlines) {\n                    lines += TextMetrics.addLine(line);\n                    canPrependSpaces = !collapseSpaces;\n                    line = '';\n                    width = 0;\n                    continue;\n                }\n                // if we should collapse new lines\n                // we simply convert it into a space\n                token = ' ';\n            }\n            // if we should collapse repeated whitespaces\n            if (collapseSpaces) {\n                // check both this and the last tokens for spaces\n                const currIsBreakingSpace = TextMetrics.isBreakingSpace(token);\n                const lastIsBreakingSpace = TextMetrics.isBreakingSpace(line[line.length - 1]);\n                if (currIsBreakingSpace && lastIsBreakingSpace) {\n                    continue;\n                }\n            }\n            // get word width from cache if possible\n            const tokenWidth = TextMetrics.getFromCache(token, letterSpacing, cache, context);\n            // word is longer than desired bounds\n            if (tokenWidth > wordWrapWidth) {\n                // if we are not already at the beginning of a line\n                if (line !== '') {\n                    // start newlines for overflow words\n                    lines += TextMetrics.addLine(line);\n                    line = '';\n                    width = 0;\n                }\n                // break large word over multiple lines\n                if (TextMetrics.canBreakWords(token, style.breakWords)) {\n                    // break word into characters\n                    const characters = TextMetrics.wordWrapSplit(token);\n                    // loop the characters\n                    for (let j = 0; j < characters.length; j++) {\n                        let char = characters[j];\n                        let k = 1;\n                        // we are not at the end of the token\n                        while (characters[j + k]) {\n                            const nextChar = characters[j + k];\n                            const lastChar = char[char.length - 1];\n                            // should not split chars\n                            if (!TextMetrics.canBreakChars(lastChar, nextChar, token, j, style.breakWords)) {\n                                // combine chars & move forward one\n                                char += nextChar;\n                            }\n                            else {\n                                break;\n                            }\n                            k++;\n                        }\n                        j += char.length - 1;\n                        const characterWidth = TextMetrics.getFromCache(char, letterSpacing, cache, context);\n                        if (characterWidth + width > wordWrapWidth) {\n                            lines += TextMetrics.addLine(line);\n                            canPrependSpaces = false;\n                            line = '';\n                            width = 0;\n                        }\n                        line += char;\n                        width += characterWidth;\n                    }\n                }\n                // run word out of the bounds\n                else {\n                    // if there are words in this line already\n                    // finish that line and start a new one\n                    if (line.length > 0) {\n                        lines += TextMetrics.addLine(line);\n                        line = '';\n                        width = 0;\n                    }\n                    const isLastToken = i === tokens.length - 1;\n                    // give it its own line if it's not the end\n                    lines += TextMetrics.addLine(token, !isLastToken);\n                    canPrependSpaces = false;\n                    line = '';\n                    width = 0;\n                }\n            }\n            // word could fit\n            else {\n                // word won't fit because of existing words\n                // start a new line\n                if (tokenWidth + width > wordWrapWidth) {\n                    // if its a space we don't want it\n                    canPrependSpaces = false;\n                    // add a new line\n                    lines += TextMetrics.addLine(line);\n                    // start a new line\n                    line = '';\n                    width = 0;\n                }\n                // don't add spaces to the beginning of lines\n                if (line.length > 0 || !TextMetrics.isBreakingSpace(token) || canPrependSpaces) {\n                    // add the word to the current line\n                    line += token;\n                    // update width counter\n                    width += tokenWidth;\n                }\n            }\n        }\n        lines += TextMetrics.addLine(line, false);\n        return lines;\n    }\n    static addLine(line, newLine = true) {\n        line = TextMetrics.trimRight(line);\n        line = newLine ? `${line}\\n` : line;\n        return line;\n    }\n    static getFromCache(key, letterSpacing, cache, context) {\n        let width = cache[key];\n        if (typeof width !== 'number') {\n            const spacing = key.length * letterSpacing;\n            width = context.measureText(key).width + spacing;\n            cache[key] = width;\n        }\n        return width;\n    }\n    static collapseSpaces(whiteSpace) {\n        return whiteSpace === 'normal' || whiteSpace === 'pre-line';\n    }\n    static collapseNewlines(whiteSpace) {\n        return whiteSpace === 'normal';\n    }\n    static trimRight(text) {\n        if (typeof text !== 'string') {\n            return '';\n        }\n        for (let i = text.length - 1; i >= 0; i--) {\n            const char = text[i];\n            if (!TextMetrics.isBreakingSpace(char)) {\n                break;\n            }\n            text = text.slice(0, -1);\n        }\n        return text;\n    }\n    static isNewline(char) {\n        if (typeof char !== 'string') {\n            return false;\n        }\n        return TextMetrics._newlines.indexOf(char.charCodeAt(0)) >= 0;\n    }\n    static isBreakingSpace(char, _nextChar) {\n        if (typeof char !== 'string') {\n            return false;\n        }\n        return TextMetrics._breakingSpaces.indexOf(char.charCodeAt(0)) >= 0;\n    }\n    static tokenize(text) {\n        const tokens = [];\n        let token = '';\n        if (typeof text !== 'string') {\n            return tokens;\n        }\n        for (let i = 0; i < text.length; i++) {\n            const char = text[i];\n            const nextChar = text[i + 1];\n            if (TextMetrics.isBreakingSpace(char, nextChar) || TextMetrics.isNewline(char)) {\n                if (token !== '') {\n                    tokens.push(token);\n                    token = '';\n                }\n                tokens.push(char);\n                continue;\n            }\n            token += char;\n        }\n        if (token !== '') {\n            tokens.push(token);\n        }\n        return tokens;\n    }\n    static canBreakWords(_token, breakWords) {\n        return breakWords;\n    }\n    static canBreakChars(_char, _nextChar, _token, _index, _breakWords) {\n        return true;\n    }\n    static wordWrapSplit(token) {\n        return token.split('');\n    }\n    static measureFont(font) {\n        // as this method is used for preparing assets, don't recalculate things if we don't need to\n        if (TextMetrics._fonts[font]) {\n            return TextMetrics._fonts[font];\n        }\n        const properties = {\n            ascent: 0,\n            descent: 0,\n            fontSize: 0\n        };\n        const canvas = TextMetrics._canvas;\n        const context = TextMetrics._context;\n        context.font = font;\n        const metricsString = TextMetrics.METRICS_STRING + TextMetrics.BASELINE_SYMBOL;\n        const width = Math.ceil(context.measureText(metricsString).width);\n        let baseline = Math.ceil(context.measureText(TextMetrics.BASELINE_SYMBOL).width);\n        const height = 2 * baseline;\n        baseline = (baseline * TextMetrics.BASELINE_MULTIPLIER) | 0;\n        canvas.width = width;\n        canvas.height = height;\n        context.fillStyle = '#f00';\n        context.fillRect(0, 0, width, height);\n        context.font = font;\n        context.textBaseline = 'alphabetic';\n        context.fillStyle = '#000';\n        context.fillText(metricsString, 0, baseline);\n        const imagedata = context.getImageData(0, 0, width, height).data;\n        const pixels = imagedata.length;\n        const line = width * 4;\n        let i = 0;\n        let idx = 0;\n        let stop = false;\n        // ascent. scan from top to bottom until we find a non red pixel\n        for (i = 0; i < baseline; ++i) {\n            for (let j = 0; j < line; j += 4) {\n                if (imagedata[idx + j] !== 255) {\n                    stop = true;\n                    break;\n                }\n            }\n            if (!stop) {\n                idx += line;\n            }\n            else {\n                break;\n            }\n        }\n        properties.ascent = baseline - i;\n        idx = pixels - line;\n        stop = false;\n        // descent. scan from bottom to top until we find a non red pixel\n        for (i = height; i > baseline; --i) {\n            for (let j = 0; j < line; j += 4) {\n                if (imagedata[idx + j] !== 255) {\n                    stop = true;\n                    break;\n                }\n            }\n            if (!stop) {\n                idx -= line;\n            }\n            else {\n                break;\n            }\n        }\n        properties.descent = i - baseline;\n        properties.fontSize = properties.ascent + properties.descent;\n        TextMetrics._fonts[font] = properties;\n        return properties;\n    }\n    /**\n     * Clear font metrics in metrics cache.\n     *\n     * @static\n     * @param {string} [font] - font name. If font name not set then clear cache for all fonts.\n     */\n    static clearMetrics(font = '') {\n        if (font) {\n            delete TextMetrics._fonts[font];\n        }\n        else {\n            TextMetrics._fonts = {};\n        }\n    }\n}\nconst canvas = (() => {\n    try {\n        // OffscreenCanvas2D measureText can be up to 40% faster.\n        const c = new OffscreenCanvas(0, 0);\n        const context = c.getContext('2d');\n        if (context && context.measureText) {\n            return c;\n        }\n        return document.createElement('canvas');\n    }\n    catch (ex) {\n        return document.createElement('canvas');\n    }\n})();\ncanvas.width = canvas.height = 10;\nTextMetrics._canvas = canvas;\nTextMetrics._context = canvas.getContext('2d');\nTextMetrics._fonts = {};\nTextMetrics.METRICS_STRING = '|ÉqÅ';\nTextMetrics.BASELINE_SYMBOL = 'M';\nTextMetrics.BASELINE_MULTIPLIER = 1.4;\nTextMetrics._newlines = [\n    0x000a,\n    0x000d // carriage return\n];\nTextMetrics._breakingSpaces = [\n    0x0009,\n    0x0020,\n    0x2000,\n    0x2001,\n    0x2002,\n    0x2003,\n    0x2004,\n    0x2005,\n    0x2006,\n    0x2008,\n    0x2009,\n    0x200a,\n    0x205f,\n    0x3000 // ideographic space\n];\n\nclass LineInfo {\n    constructor() {\n        this.width = 0;\n        this.height = 0;\n        this.textHeight = 0;\n        this.y = 0;\n    }\n    static get() {\n        if (LineInfo.pool.length) {\n            let ret = LineInfo.pool.pop();\n            ret.width = 0;\n            ret.height = 0;\n            ret.textHeight = 0;\n            ret.text = null;\n            ret.y = 0;\n            return ret;\n        }\n        else\n            return new LineInfo();\n    }\n    static recycle(value) {\n        LineInfo.pool.push(value);\n    }\n    static recycleMany(value) {\n        if (value && value.length) {\n            value.forEach(v => {\n                LineInfo.pool.push(v);\n            }, this);\n        }\n        value.length = 0;\n    }\n}\nLineInfo.pool = [];\nclass GTextField extends GObject {\n    constructor() {\n        super();\n        this.$verticalAlign = 0 /* Top */;\n        this.$offset = new createjs.Point();\n        this.$singleLine = true;\n        this.$text = '';\n        this.$textWidth = 0;\n        this.$textHeight = 0;\n        this.$style = new TextStyle({\n            fontSize: 12,\n            fontFamily: UIConfig.defaultFont,\n            align: \"left\" /* Left */,\n            leading: 3,\n            fill: 0\n        });\n        this.$verticalAlign = 0 /* Top */;\n        this.$text = '';\n        this.$autoSize = 1 /* Both */;\n        this.$widthAutoSize = true;\n        this.$heightAutoSize = true;\n        this.$bitmapPool = [];\n        this.touchable = false; //base GTextField has no interaction\n    }\n    createDisplayObject() {\n        this.$textField = new UITextField(this);\n        this.setDisplayObject(this.$textField);\n    }\n    switchBitmapMode(val) {\n        if (val && this.displayObject == this.$textField) {\n            if (this.$btContainer == null)\n                this.$btContainer = new UIContainer(this);\n            this.switchDisplayObject(this.$btContainer);\n        }\n        else if (!val && this.displayObject == this.$btContainer)\n            this.switchDisplayObject(this.$textField);\n    }\n    dispose() {\n        GTimer.inst.remove(this.$render, this);\n        this.$bitmapFont = null;\n        this.$bitmapPool.length = 0;\n        this.$bitmapPool = null;\n        this.$style = null;\n        super.dispose();\n    }\n    set text(value) {\n        this.setText(value);\n    }\n    setText(value) {\n        if (value == null)\n            value = '';\n        if (this.$text == value)\n            return;\n        this.$text = value;\n        this.updateGear(6 /* Text */);\n        if (this.parent && this.parent.$inProgressBuilding)\n            this.renderNow();\n        else\n            this.render();\n    }\n    get text() {\n        return this.getText();\n    }\n    getText() {\n        return this.$text;\n    }\n    get color() {\n        return this.getColor();\n    }\n    getColor() {\n        return this.$color;\n    }\n    setColor(value) {\n        if (this.$color != value) {\n            this.$color = value;\n            this.updateGear(4 /* Color */);\n            this.$style.fill = this.$color;\n            this.render();\n        }\n    }\n    set color(value) {\n        this.setColor(value);\n    }\n    get titleColor() {\n        return this.color;\n    }\n    set titleColor(value) {\n        this.color = value;\n    }\n    get lineHeight() {\n        if (this.$style.lineHeight > 0)\n            return this.$style.lineHeight;\n        if (!this.$fontProperties)\n            return +this.$style.fontSize + this.$style.strokeThickness; //rough value\n        return this.$fontProperties.fontSize + this.$style.strokeThickness + this.$style.leading;\n    }\n    set lineHeight(lh) {\n        this.$style.lineHeight = lh;\n    }\n    get font() {\n        return this.$font || UIConfig.defaultFont;\n    }\n    set font(value) {\n        if (this.$font != value) {\n            this.$font = value;\n            if (this.$font && StringUtil.startsWith(this.$font, 'ui://'))\n                this.$bitmapFont = UIPackage.getBitmapFontByURL(this.$font);\n            else\n                this.$style.fontFamily = this.$font || UIConfig.defaultFont;\n            this.render();\n        }\n    }\n    get fontSize() {\n        return +this.$style.fontSize;\n    }\n    set fontSize(value) {\n        if (value <= 0)\n            return;\n        if (this.$style.fontSize != value) {\n            this.$style.fontSize = value;\n            this.render();\n        }\n    }\n    get align() {\n        return this.$style.align;\n    }\n    set align(value) {\n        if (this.$style.align != value) {\n            this.$style.align = value;\n            this.render();\n        }\n    }\n    get verticalAlign() {\n        return this.$verticalAlign;\n    }\n    set verticalAlign(value) {\n        if (this.$verticalAlign != value) {\n            this.$verticalAlign = value;\n            if (!this.$inProgressBuilding)\n                this.layoutAlign();\n        }\n    }\n    get leading() {\n        return this.$style.leading;\n    }\n    set leading(value) {\n        if (this.$style.leading != value) {\n            this.$style.leading = value;\n            this.render();\n        }\n    }\n    get letterSpacing() {\n        return this.$style.letterSpacing;\n    }\n    set letterSpacing(value) {\n        if (this.$style.letterSpacing != value) {\n            this.$style.letterSpacing = value;\n            this.render();\n        }\n    }\n    get underline() {\n        return false; //TODO: not supported yet\n    }\n    set underline(value) {\n        //TODO: not supported yet\n    }\n    get bold() {\n        return this.$style.fontWeight == 'bold';\n    }\n    set bold(value) {\n        let v = value === true ? 'bold' : 'normal';\n        if (this.$style.fontWeight != v) {\n            this.$style.fontWeight = v;\n            this.render();\n        }\n    }\n    get weight() {\n        return this.$style.fontWeight;\n    }\n    set weight(v) {\n        if (this.$style.fontWeight != v) {\n            this.$style.fontWeight = v;\n            this.render();\n        }\n    }\n    get variant() {\n        return this.$style.fontVariant;\n    }\n    set variant(v) {\n        if (this.$style.fontVariant != v) {\n            this.$style.fontVariant = v;\n            this.render();\n        }\n    }\n    get italic() {\n        return this.$style.fontStyle == 'italic';\n    }\n    set italic(value) {\n        let v = value === true ? 'italic' : 'normal';\n        if (this.$style.fontStyle != v) {\n            this.$style.fontStyle = v;\n            this.render();\n        }\n    }\n    get multipleLine() {\n        return !this.$singleLine;\n    }\n    set multipleLine(value) {\n        value = !value;\n        if (this.$singleLine != value) {\n            this.$singleLine = value;\n            this.render();\n        }\n    }\n    get stroke() {\n        return +this.$style.strokeThickness;\n    }\n    set stroke(value) {\n        if (this.$style.strokeThickness != value)\n            this.$style.strokeThickness = value;\n    }\n    get strokeColor() {\n        return this.$style.stroke;\n    }\n    set strokeColor(value) {\n        if (this.$style.stroke != value)\n            this.$style.stroke = value;\n    }\n    set autoSize(value) {\n        if (this.$autoSize != value) {\n            this.$autoSize = value;\n            this.$widthAutoSize = value == 1 /* Both */ || value == 3 /* Shrink */;\n            this.$heightAutoSize = value == 1 /* Both */ || value == 2 /* Height */;\n            this.render();\n        }\n    }\n    get autoSize() {\n        return this.$autoSize;\n    }\n    get textWidth() {\n        if (this.$requireRender)\n            this.renderNow();\n        return this.$textWidth;\n    }\n    get textHeight() {\n        if (this.$requireRender)\n            this.renderNow();\n        return this.$textHeight;\n    }\n    ensureSizeCorrect() {\n        if (this.$sizeDirty && this.$requireRender)\n            this.renderNow();\n    }\n    render() {\n        if (!this.$requireRender) {\n            this.$requireRender = true;\n            GTimer.inst.callLater(this.$render, this);\n        }\n        if (!this.$sizeDirty && (this.$widthAutoSize || this.$heightAutoSize)) {\n            this.$sizeDirty = true;\n            let evt = new createjs.Event(\"__sizeDelayChange\" /* SIZE_DELAY_CHANGE */, true, false);\n            this.dispatchEvent(evt, this);\n        }\n    }\n    applyStyle() {\n        this.$textField.style.stroke = this.$style.stroke;\n        this.$textField.style.strokeThickness = this.$style.strokeThickness;\n        this.$textField.style.fontStyle = this.$style.fontStyle;\n        this.$textField.style.fontVariant = this.$style.fontVariant;\n        this.$textField.style.fontWeight = this.$style.fontWeight;\n        this.$textField.style.letterSpacing = this.$style.letterSpacing;\n        this.$textField.style.align = this.$style.align;\n        this.$textField.style.fontSize = this.$style.fontSize;\n        this.$textField.style.fontFamily = this.$style.fontFamily;\n        this.$textField.style.fill = this.$style.fill;\n        this.$textField.style.dropShadowColor = this.$style.dropShadowColor;\n        this.$textField.style.dropShadowOffsetX = this.$style.dropShadowOffsetX;\n        this.$textField.style.dropShadowOffsetY = this.$style.dropShadowOffsetY;\n        this.$textField.style.leading = this.$style.leading;\n        this.$textField.applyStyle();\n    }\n    $render() {\n        if (this.$requireRender)\n            this.renderNow();\n    }\n    renderNow(updateBounds = true) {\n        this.$requireRender = false;\n        this.$sizeDirty = false;\n        if (this.$bitmapFont != null) {\n            this.renderWithBitmapFont(updateBounds);\n            return;\n        }\n        this.switchBitmapMode(false);\n        this.applyStyle();\n        this.$textField.$updateMinHeight();\n        let wordWrap = !this.$widthAutoSize && this.multipleLine;\n        this.$textField.width = this.$textField.style.wordWrapWidth =\n            wordWrap || this.autoSize == 0 /* None */ ? Math.ceil(this.width) : 10000;\n        this.$textField.style.wordWrap = wordWrap;\n        this.$textField.style.breakWords = wordWrap;\n        this.$textField.content = this.$text; //trigger t.dirty = true\n        this.$fontProperties = TextMetrics.measureFont(this.$style.toFontString());\n        this.$textWidth = Math.ceil(this.$textField.textWidth);\n        if (this.$textWidth > 0)\n            this.$textWidth += GTextField.GUTTER_X * 2; //margin gap\n        this.$textHeight = Math.ceil(this.$textField.textHeight);\n        if (this.$textHeight > 0)\n            this.$textHeight += GTextField.GUTTER_Y * 2; //margin gap\n        let w = this.width, h = this.height;\n        if (this.autoSize == 3 /* Shrink */) {\n            this.shrinkTextField();\n        }\n        else {\n            this.$textField.set({ scaleX: 1, scaleY: 1 });\n            if (this.$widthAutoSize) {\n                w = this.$textWidth;\n                this.$textField.width = w;\n            }\n            if (this.$heightAutoSize) {\n                h = this.$textHeight;\n                if (this.$textField.height != this.$textHeight)\n                    this.$textField.height = this.$textHeight;\n            }\n            else {\n                h = this.height;\n                if (this.$textHeight > h)\n                    this.$textHeight = h;\n            }\n        }\n        if (updateBounds) {\n            this.$updatingSize = true;\n            this.setSize(w, h);\n            this.$updatingSize = false;\n        }\n        this.layoutAlign();\n    }\n    renderWithBitmapFont(updateBounds) {\n        this.switchBitmapMode(true);\n        /**\n         * todo\n         */\n        this.$btContainer.children.forEach((c, i) => {\n            this.$bitmapPool.push(this.$btContainer.getChildAt(i));\n        }, this);\n        this.$btContainer.removeAllChildren();\n        if (!this.$lines)\n            this.$lines = [];\n        else\n            LineInfo.recycleMany(this.$lines);\n        let letterSpacing = this.letterSpacing;\n        let lineSpacing = this.leading - 1;\n        let rectWidth = this.width - GTextField.GUTTER_X * 2;\n        let lineWidth = 0, lineHeight = 0, lineTextHeight = 0;\n        let glyphWidth = 0, glyphHeight = 0;\n        let wordChars = 0, wordStart = 0, wordEnd = 0;\n        let lastLineHeight = 0;\n        let lineBuffer = '';\n        let lineY = GTextField.GUTTER_Y;\n        let line;\n        let wordWrap = !this.$widthAutoSize && this.multipleLine;\n        let fontScale = this.$bitmapFont.resizable ? this.fontSize / this.$bitmapFont.size : 1;\n        let glyph;\n        this.$textWidth = 0;\n        this.$textHeight = 0;\n        let textLength = this.text.length;\n        for (let offset = 0; offset < textLength; ++offset) {\n            let ch = this.$text.charAt(offset);\n            let cc = ch.charCodeAt(offset);\n            if (ch == '\\n') {\n                lineBuffer += ch;\n                line = LineInfo.get();\n                line.width = lineWidth;\n                if (lineTextHeight == 0) {\n                    if (lastLineHeight == 0)\n                        lastLineHeight = Math.ceil(this.fontSize * fontScale);\n                    if (lineHeight == 0)\n                        lineHeight = lastLineHeight;\n                    lineTextHeight = lineHeight;\n                }\n                line.height = lineHeight;\n                lastLineHeight = lineHeight;\n                line.textHeight = lineTextHeight;\n                line.text = lineBuffer;\n                line.y = lineY;\n                lineY += line.height + lineSpacing;\n                if (line.width > this.$textWidth)\n                    this.$textWidth = line.width;\n                this.$lines.push(line);\n                lineBuffer = '';\n                lineWidth = 0;\n                lineHeight = 0;\n                lineTextHeight = 0;\n                wordChars = 0;\n                wordStart = 0;\n                wordEnd = 0;\n                continue;\n            }\n            if (cc > 256 || cc <= 32) {\n                if (wordChars > 0)\n                    wordEnd = lineWidth;\n                wordChars = 0;\n            }\n            else {\n                if (wordChars == 0)\n                    wordStart = lineWidth;\n                wordChars++;\n            }\n            if (ch == ' ') {\n                glyphWidth = Math.ceil(this.fontSize / 2);\n                glyphHeight = Math.ceil(this.fontSize);\n            }\n            else {\n                glyph = this.$bitmapFont.glyphs[ch];\n                if (glyph) {\n                    glyphWidth = Math.ceil(glyph.advance * fontScale);\n                    glyphHeight = Math.ceil(glyph.lineHeight * fontScale);\n                }\n                else if (ch == ' ') {\n                    glyphWidth = Math.ceil((this.$bitmapFont.size * fontScale) / 2);\n                    glyphHeight = Math.ceil(this.$bitmapFont.size * fontScale);\n                }\n                else {\n                    glyphWidth = 0;\n                    glyphHeight = 0;\n                }\n            }\n            if (glyphHeight > lineTextHeight)\n                lineTextHeight = glyphHeight;\n            if (glyphHeight > lineHeight)\n                lineHeight = glyphHeight;\n            if (lineWidth != 0)\n                lineWidth += letterSpacing;\n            lineWidth += glyphWidth;\n            if (!wordWrap || lineWidth <= rectWidth) {\n                lineBuffer += ch;\n            }\n            else {\n                line = LineInfo.get();\n                line.height = lineHeight;\n                line.textHeight = lineTextHeight;\n                if (lineBuffer.length == 0) {\n                    //the line cannt fit even a char\n                    line.text = ch;\n                }\n                else if (wordChars > 0 && wordEnd > 0) {\n                    //if word had broken, move it to new line\n                    lineBuffer += ch;\n                    let len = lineBuffer.length - wordChars;\n                    line.text = StringUtil.trimRight(lineBuffer.substr(0, len));\n                    line.width = wordEnd;\n                    lineBuffer = lineBuffer.substr(len + 1);\n                    lineWidth -= wordStart;\n                }\n                else {\n                    line.text = lineBuffer;\n                    line.width = lineWidth - (glyphWidth + letterSpacing);\n                    lineBuffer = ch;\n                    lineWidth = glyphWidth;\n                    lineHeight = glyphHeight;\n                    lineTextHeight = glyphHeight;\n                }\n                line.y = lineY;\n                lineY += line.height + lineSpacing;\n                if (line.width > this.$textWidth)\n                    this.$textWidth = line.width;\n                wordChars = 0;\n                wordStart = 0;\n                wordEnd = 0;\n                this.$lines.push(line);\n            }\n        }\n        if (lineBuffer.length > 0 ||\n            (this.$lines.length > 0 &&\n                StringUtil.endsWith(this.$lines[this.$lines.length - 1].text, '\\n'))) {\n            line = LineInfo.get();\n            line.width = lineWidth;\n            if (lineHeight == 0)\n                lineHeight = lastLineHeight;\n            if (lineTextHeight == 0)\n                lineTextHeight = lineHeight;\n            line.height = lineHeight;\n            line.textHeight = lineTextHeight;\n            line.text = lineBuffer;\n            line.y = lineY;\n            if (line.width > this.$textWidth)\n                this.$textWidth = line.width;\n            this.$lines.push(line);\n        }\n        if (this.$textWidth > 0)\n            this.$textWidth += GTextField.GUTTER_X * 2;\n        let count = this.$lines.length;\n        if (count == 0) {\n            this.$textHeight = 0;\n        }\n        else {\n            line = this.$lines[this.$lines.length - 1];\n            this.$textHeight = line.y + line.height + GTextField.GUTTER_Y;\n        }\n        let w, h = 0;\n        if (this.$widthAutoSize) {\n            if (this.$textWidth == 0)\n                w = 0;\n            else\n                w = this.$textWidth;\n        }\n        else\n            w = this.width;\n        if (this.$heightAutoSize) {\n            if (this.$textHeight == 0)\n                h = 0;\n            else\n                h = this.$textHeight;\n        }\n        else\n            h = this.height;\n        if (updateBounds) {\n            this.$updatingSize = true;\n            this.setSize(w, h);\n            this.$updatingSize = false;\n        }\n        if (w == 0 || h == 0)\n            return;\n        rectWidth = this.width - GTextField.GUTTER_X * 2;\n        this.$lines.forEach(line => {\n            let charX = GTextField.GUTTER_X;\n            let lineIndent = 0;\n            let charIndent = 0;\n            if (this.align == \"center\" /* Center */)\n                lineIndent = (rectWidth - line.width) / 2;\n            else if (this.align == \"right\" /* Right */)\n                lineIndent = rectWidth - line.width;\n            else\n                lineIndent = 0;\n            textLength = line.text.length;\n            for (let j = 0; j < textLength; j++) {\n                let ch = line.text.charAt(j);\n                glyph = this.$bitmapFont.glyphs[ch];\n                if (glyph != null) {\n                    charIndent = (line.height + line.textHeight) / 2 - Math.ceil(glyph.lineHeight * fontScale);\n                    let bm;\n                    if (this.$bitmapPool.length)\n                        bm = this.$bitmapPool.pop();\n                    else\n                        bm = new Bitmap();\n                    bm.x = charX + lineIndent + Math.ceil(glyph.offsetX * fontScale);\n                    bm.y = line.y + charIndent + Math.ceil(glyph.offsetY * fontScale);\n                    bm.texture = glyph.texture.image;\n                    bm.textureRect = glyph.texture.rect;\n                    let { x, y, width, height } = glyph;\n                    bm.sourceRect = new createjs.Rectangle(x, y, width, height);\n                    bm.set({ scaleX: fontScale, scaleY: fontScale });\n                    bm.tint = this.$bitmapFont.colorable === true ? this.$color : '0xFFFFFF';\n                    this.$btContainer.addChild(bm);\n                    charX += letterSpacing + Math.ceil(glyph.advance * fontScale);\n                }\n                else if (ch == ' ') {\n                    charX += letterSpacing + Math.ceil((this.$bitmapFont.size * fontScale) / 2);\n                }\n                else {\n                    charX += letterSpacing;\n                }\n            }\n        });\n    }\n    localToGlobal(ax = 0, ay = 0, resultPoint) {\n        ax -= this.$offset.x;\n        ay -= this.$offset.y;\n        return super.localToGlobal(ax, ay, resultPoint);\n    }\n    globalToLocal(ax = 0, ay = 0, resultPoint) {\n        let r = super.globalToLocal(ax, ay, resultPoint);\n        r.x -= this.$offset.x;\n        r.y -= this.$offset.y;\n        return r;\n    }\n    handleSizeChanged() {\n        if (this.$updatingSize)\n            return;\n        if (this.$bitmapFont != null) {\n            if (!this.$widthAutoSize)\n                this.render();\n        }\n        else {\n            if (this.$inProgressBuilding) {\n                this.$textField.width = this.width;\n                this.$textField.height = this.height;\n            }\n            else {\n                if (this.$autoSize == 3 /* Shrink */)\n                    this.shrinkTextField();\n                else {\n                    if (!this.$widthAutoSize) {\n                        if (!this.$heightAutoSize) {\n                            this.$textField.width = this.width;\n                            this.$textField.height = this.height;\n                        }\n                        else\n                            this.$textField.width = this.width;\n                    }\n                }\n            }\n        }\n        this.layoutAlign();\n    }\n    shrinkTextField() {\n        let fitScale = Math.min(1, this.width / this.$textWidth);\n        this.$textField.set({ scaleX: fitScale, scaleY: fitScale });\n    }\n    layoutAlign() {\n        let tw = this.$textWidth, th = this.$textHeight;\n        if (this.autoSize == 3 /* Shrink */) {\n            tw *= this.displayObject.scaleX;\n            th *= this.displayObject.scaleY;\n        }\n        if (this.$verticalAlign == 0 /* Top */ || th == 0)\n            this.$offset.y = GTextField.GUTTER_Y;\n        else {\n            let dh = Math.max(0, this.height - th);\n            if (this.$verticalAlign == 1 /* Middle */)\n                this.$offset.y = dh * 0.5;\n            else if (this.$verticalAlign == 2 /* Bottom */)\n                this.$offset.y = dh;\n        }\n        let xPos = 0;\n        switch (this.$style.align) {\n            case 'center':\n                xPos = (this.width - tw) * 0.5;\n                break;\n            case 'right':\n                xPos = this.width - tw;\n                break;\n        }\n        this.$offset.x = xPos;\n        this.updatePosition();\n    }\n    updatePosition() {\n        let x = Math.floor(this.x + this.$offset.x);\n        let y = Math.floor(this.y + this.$offset.y);\n        this.displayObject.set({ x, y });\n        this.$textField.updateMultiplePosition(x, y);\n    }\n    handleXYChanged() {\n        super.handleXYChanged();\n        if (this.$displayObject)\n            this.updatePosition();\n    }\n    setupBeforeAdd(xml) {\n        super.setupBeforeAdd(xml);\n        let str = xml.attributes.font;\n        if (str)\n            this.font = str;\n        str = xml.attributes.vAlign;\n        if (str)\n            this.verticalAlign = ParseVertAlignType(str);\n        str = xml.attributes.leading;\n        if (str)\n            this.$style.leading = parseInt(str);\n        str = xml.attributes.letterSpacing;\n        if (str)\n            this.$style.letterSpacing = parseInt(str);\n        str = xml.attributes.fontSize;\n        if (str)\n            this.$style.fontSize = parseInt(str);\n        str = xml.attributes.color;\n        if (str) {\n            this.color = str;\n        }\n        str = xml.attributes.shadowColor;\n        if (str) {\n            this.$style.dropShadowColor = str;\n        }\n        let arr;\n        str = xml.attributes.shadowOffset;\n        if (str) {\n            arr = str.split(',');\n            if (arr.length > 1) {\n                this.$style.dropShadowOffsetX = parseInt(arr[0]);\n                this.$style.dropShadowOffsetY = parseInt(arr[1]);\n            }\n        }\n        str = xml.attributes.align;\n        if (str)\n            this.align = ParseAlignType(str);\n        str = xml.attributes.autoSize;\n        if (str) {\n            this.autoSize = ParseAutoSizeType(str);\n            this.$widthAutoSize =\n                this.$autoSize == 1 /* Both */ || this.$autoSize == 3 /* Shrink */;\n            this.$heightAutoSize =\n                this.$autoSize == 1 /* Both */ || this.$autoSize == 2 /* Height */;\n        }\n        this.underline = xml.attributes.underline == 'true';\n        this.italic = xml.attributes.italic == 'true';\n        this.bold = xml.attributes.bold == 'true';\n        this.multipleLine = xml.attributes.singleLine != 'true';\n        str = xml.attributes.strokeColor;\n        if (str) {\n            this.strokeColor = str;\n            str = xml.attributes.strokeSize;\n            if (str)\n                this.stroke = parseInt(str);\n            else\n                this.stroke = 1;\n        }\n    }\n    setupAfterAdd(xml) {\n        super.setupAfterAdd(xml);\n        let str = xml.attributes.text;\n        if (str != null && str.length > 0)\n            this.text = str;\n        this.$sizeDirty = false;\n    }\n}\nGTextField.GUTTER_X = 2;\nGTextField.GUTTER_Y = 2;\n\n//TOOD: impl\nclass GRichTextField extends GTextField {\n    constructor() {\n        super();\n        // this.$textField.interactive = true;\n        // this.$textField.interactiveChildren = false;\n        this.on(\"__linkClick\" /* LinkClick */, this.$clickLink, this);\n    }\n    set ubbEnabled(value) {\n        if (this.$ubbEnabled != value) {\n            this.$ubbEnabled = value;\n            this.render();\n        }\n    }\n    get ubbEnabled() {\n        return this.$ubbEnabled;\n    }\n    setupBeforeAdd(xml) {\n        super.setupBeforeAdd(xml);\n        this.$ubbEnabled = xml.attributes.ubb == 'true';\n    }\n    set textFlow(flow) {\n        this.$textFlow = flow;\n        this.render();\n    }\n    set text(value) {\n        this.$text = value;\n        if (this.$text == null)\n            this.$text = '';\n        this.$textField.width = this.width;\n        // if(this.$ubbEnabled)\n        // this.textFlow = StringUtil.parseUBB(this.$text);   //TODO: parser impl\n        this.updateGear(6 /* Text */);\n        this.render();\n    }\n    $clickLink(block) {\n        let event = new createjs.Event(\"__linkClick\" /* LinkClick */, true, false);\n        event.data = block.text;\n        this.dispatchEvent(event, this);\n    }\n    dispose() {\n        this.off(\"__linkClick\" /* LinkClick */, this.$clickLink);\n        super.dispose();\n    }\n}\n\nclass InputElement extends createjs.EventDispatcher {\n    constructor(tf) {\n        super();\n        this.$requestToShow = false;\n        //private $requestToHide:boolean = false;\n        this.inputElement = null;\n        this.inputDiv = null;\n        this.$scaleX = 0;\n        this.$scaleY = 0;\n        this.textValue = '';\n        this.colorValue = '0xffffff';\n        this.$attrsCache = {};\n        this.$textfield = tf;\n    }\n    /**@internal */\n    $addToStage() {\n        this.htmlInput = HTMLInput.inst; //take multiple canvas on webpage into account?\n    }\n    initElement() {\n        let point = this.$textfield.localToGlobal(0, 0);\n        let x = point.x;\n        let y = point.y;\n        let scaleX = this.htmlInput.$scaleX;\n        let scaleY = this.htmlInput.$scaleY;\n        if (!this.$textfield.multipleLine)\n            this.inputElement.style.top = -this.$textfield.leading * scaleY + 'px';\n        this.inputDiv.style.top = (y + 1) * scaleY + 'px';\n        this.inputDiv.style.left = x * scaleX + 'px';\n        let node = this.$textfield;\n        let cX = 1;\n        let cY = 1;\n        let rotation = 0;\n        while (node.parent) {\n            cX *= node.scaleX;\n            cY *= node.scaleY;\n            rotation += node.rotation;\n            node = node.parent;\n        }\n        let style = this.inputDiv.style;\n        style.transform = style.webkitTransform = style.msTransform = style.mozTransform = style.oTransform =\n            'rotate(' + rotation + 'deg)';\n        this.$scaleX = scaleX * cX;\n        this.$scaleY = scaleY * cY;\n    }\n    get textField() {\n        return this.$textfield;\n    }\n    /**@internal */\n    $show() {\n        if (!this.htmlInput.isCurrentInput(this)) {\n            this.inputElement = this.htmlInput.requestInput(this);\n            if (!this.$textfield.multipleLine)\n                this.inputElement.type = this.$textfield.type;\n            for (let key in this.$attrsCache)\n                this.inputElement.setAttribute(key, this.$attrsCache[key]);\n            this.inputDiv = this.htmlInput.$wrapper;\n        }\n        else\n            this.inputElement.onblur = null;\n        this.htmlInput.$requestToShow = true;\n        this.$requestToShow = true;\n        this.initElement();\n    }\n    $hide() { }\n    onBlurHandler() {\n        this.htmlInput.clearInputElement();\n        this.htmlInput.clearAttributes(this.$attrsCache);\n        window.scrollTo(0, 0);\n    }\n    get text() {\n        if (!this.textValue)\n            this.textValue = '';\n        return this.textValue;\n    }\n    set text(value) {\n        this.textValue = value;\n        if (this.inputElement)\n            this.inputElement.value = this.textValue;\n    }\n    setColor(value) {\n        this.colorValue = value;\n        if (this.inputElement)\n            this.setElementStyle('color', StringUtil.HEX2RGB(this.colorValue));\n    }\n    /**@internal */\n    $onBlur() {\n        // this.dispatchEvent(\"updateText\");\n    }\n    onInputHandler() {\n        window.setTimeout(() => {\n            if (this.inputElement && this.inputElement.selectionStart == this.inputElement.selectionEnd) {\n                this.textValue = this.inputElement.value;\n                this.dispatchEvent('updateText');\n            }\n        }, 0);\n    }\n    setAreaHeight() {\n        let tf = this.$textfield;\n        if (tf.multipleLine) {\n            let textheight = tf.textHeight;\n            if (tf.height <= tf.fontSize) {\n                this.setElementStyle('height', tf.fontSize * this.$scaleY + 'px');\n                this.setElementStyle('padding', '0px');\n                this.setElementStyle('lineHeight', tf.lineHeight * this.$scaleY + 'px');\n            }\n            else if (tf.height < textheight) {\n                this.setElementStyle('height', tf.height * this.$scaleY + 'px');\n                this.setElementStyle('padding', '0px');\n                this.setElementStyle('lineHeight', tf.lineHeight * this.$scaleY + 'px');\n            }\n            else {\n                this.setElementStyle('height', (textheight + tf.leading) * this.$scaleY + 'px');\n                let rap = (tf.height - textheight) * this.$scaleY;\n                let valign = this.getVAlignFactor(tf);\n                let top = rap * valign;\n                let bottom = rap - top;\n                this.setElementStyle('padding', top + 'px 0px ' + bottom + 'px 0px');\n                this.setElementStyle('lineHeight', tf.lineHeight * this.$scaleY + 'px');\n            }\n        }\n    }\n    getVAlignFactor(textfield) {\n        let vao = 0;\n        switch (textfield.verticalAlign) {\n            case 0 /* Top */:\n                break;\n            case 1 /* Middle */:\n                vao = 0.5;\n                break;\n            case 2 /* Bottom */:\n                vao = 1;\n                break;\n        }\n        return vao;\n    }\n    onClickHandler(e) {\n        if (this.$requestToShow) {\n            //e.stopImmediatePropagation();\n            this.$requestToShow = false;\n            this.inputElement.value = this.text;\n            if (this.inputElement.onblur == null)\n                this.inputElement.onblur = Binder.create(this.onBlurHandler, this);\n            this.resetInput();\n            if (this.$textfield.maxLength > 0)\n                this.inputElement.setAttribute('maxlength', String(this.$textfield.maxLength));\n            else\n                this.inputElement.removeAttribute('maxlength');\n            this.inputElement.selectionStart = this.inputElement.value.length;\n            this.inputElement.selectionEnd = this.inputElement.value.length;\n            this.inputElement.focus();\n            let evt = new createjs.Event(\"__focusChanged\" /* CHANGED */, true, false);\n            evt.data = 'focus';\n            this.dispatchEvent(evt);\n        }\n    }\n    onDisconnect() {\n        this.inputElement = null;\n        let evt = new createjs.Event(\"__focusChanged\" /* CHANGED */, true, false);\n        evt.data = 'blur';\n        this.dispatchEvent(evt);\n    }\n    setElementStyle(style, value) {\n        if (value == null)\n            return;\n        if (this.inputElement) {\n            let ss = this.inputElement.style;\n            ss[style] = value;\n        }\n    }\n    setAttribute(name, value) {\n        if (name == null || value == null)\n            return;\n        this.$attrsCache[name] = value;\n    }\n    getAttribute(name) {\n        return this.$attrsCache[name];\n    }\n    /**@internal */\n    $removeFromStage() {\n        if (this.inputElement)\n            this.htmlInput.disconnect(this);\n    }\n    resetInput() {\n        if (this.inputElement) {\n            let textfield = this.$textfield;\n            this.setElementStyle('fontFamily', textfield.font);\n            this.setElementStyle('fontStyle', textfield.italic ? 'italic' : 'normal');\n            this.setElementStyle('fontWeight', textfield.bold ? 'bold' : 'normal');\n            this.setElementStyle('textAlign', textfield.align);\n            this.setElementStyle('fontSize', textfield.fontSize * this.$scaleY + 'px');\n            this.setElementStyle('color', StringUtil.convertToHtmlColor(+textfield.color));\n            this.setElementStyle('width', textfield.width * this.$scaleX + 'px'); //take 'maxWidth' into account\n            let va = 'middle', vao = 0;\n            switch (textfield.verticalAlign) {\n                case 0 /* Top */:\n                    va = 'top';\n                    break;\n                case 1 /* Middle */:\n                    va = 'middle';\n                    vao = 0.5;\n                    break;\n                case 2 /* Bottom */:\n                    va = 'bottom';\n                    vao = 1;\n                    break;\n            }\n            this.setElementStyle('verticalAlign', va);\n            if (textfield.multipleLine)\n                this.setAreaHeight();\n            else {\n                this.setElementStyle('lineHeight', textfield.lineHeight * this.$scaleY + 'px');\n                if (textfield.height < textfield.fontSize) {\n                    this.setElementStyle('height', textfield.fontSize * this.$scaleY + 'px');\n                    this.setElementStyle('padding', '0px 0px ' + textfield.fontSize * 0.5 * this.$scaleX + 'px 0px');\n                }\n                else {\n                    this.setElementStyle('height', textfield.fontSize * this.$scaleY + 'px');\n                    let rap = (textfield.height - textfield.fontSize) * this.$scaleY;\n                    let top = rap * vao;\n                    let bottom = rap - top, fsy = textfield.fontSize * 0.5 * this.$scaleY;\n                    if (bottom < fsy)\n                        bottom = fsy;\n                    this.setElementStyle('padding', top + 'px 0px ' + bottom + 'px 0px');\n                }\n            }\n            this.inputDiv.style.clip =\n                'rect(0px ' +\n                    textfield.width * this.$scaleX +\n                    'px ' +\n                    textfield.height * this.$scaleY +\n                    'px 0px)';\n            this.inputDiv.style.height = textfield.height * this.$scaleY + 'px';\n            this.inputDiv.style.width = textfield.width * this.$scaleX + 'px'; //take 'maxWidth' into account\n        }\n    }\n}\n\nclass InputDelegate {\n    constructor(tf) {\n        this.$inited = false;\n        this.$restrictString = null;\n        this.$restrictRegex = null;\n        this.$focused = false;\n        this.$textField = tf;\n        this.$input = new InputElement(tf);\n    }\n    initialize() {\n        if (this.$inited)\n            return;\n        this.$input.$addToStage();\n        this.$input.on('updateText', this.updateText, this);\n        this.$input.on(\"__focusChanged\" /* CHANGED */, this.focusHandler, this);\n        this.$textField.on(InteractiveEvents.Down, this.textFieldDownHandler, this);\n        this.$inited = true;\n    }\n    textFieldDownHandler() {\n        this.$onFocus();\n    }\n    destroy() {\n        if (!this.$inited)\n            return;\n        this.$input.$removeFromStage();\n        this.$textField.off(InteractiveEvents.Down, this.textFieldDownHandler);\n        GRoot.inst.off(InteractiveEvents.Down, this.onStageDown);\n        this.$input.off('updateText', this.updateText);\n        this.$input.off(\"__focusChanged\" /* CHANGED */, this.focusHandler);\n        this.$inited = false;\n    }\n    get text() {\n        return this.$input.text;\n    }\n    set text(v) {\n        this.$input.text = v;\n    }\n    setColor(v) {\n        return this.$input.setColor(v);\n    }\n    updateText() {\n        let textValue = this.$input.text;\n        let isChanged = false;\n        if (this.$restrictRegex != null) {\n            let result = textValue.match(this.$restrictRegex);\n            if (result)\n                textValue = result.join('');\n            else\n                textValue = '';\n            isChanged = true;\n        }\n        if (isChanged && this.$input.text != textValue)\n            this.$input.text = textValue;\n        this.$textField.text = this.$input.text;\n        let evt = new createjs.Event(\"__textChange\" /* Change */, true, false);\n        evt.data = { textField: this.$textField };\n        this.$textField.dispatchEvent(evt, this);\n    }\n    onStageDown(e) {\n        let target = GObject.castFromNativeObject(e.currentTarget);\n        if (target != this.$textField)\n            this.$input.$hide();\n    }\n    focusHandler(evt) {\n        let { data } = evt;\n        if (data == 'focus') {\n            if (!this.$focused) {\n                this.$focused = true;\n                this.$textField.$isTyping = true;\n                this.$textField.alpha = 0.01;\n                this.$textField.dispatchEvent(\"__focusChanged\" /* CHANGED */, 'focus');\n                this.$textField.dispatchEvent(\"__textFocusIn\" /* FocusIn */, this.$textField);\n            }\n        }\n        else if (data == 'blur') {\n            if (this.$focused) {\n                this.$focused = false;\n                GRoot.inst.off(InteractiveEvents.Down, this.onStageDown);\n                this.$textField.$isTyping = false;\n                this.$textField.alpha = 1;\n                this.$input.$onBlur();\n                this.$textField.dispatchEvent(\"__focusChanged\" /* CHANGED */, 'blur');\n                this.$textField.dispatchEvent(\"__textFocusOut\" /* FocusOut */, this.$textField);\n            }\n        }\n    }\n    get isFocused() {\n        return this.$focused;\n    }\n    /**@internal */\n    $getProperty(name) {\n        return (this.$inited && this.$input.getAttribute(name)) || null;\n    }\n    /**@internal */\n    $setProperty(name, value) {\n        if (!this.$inited)\n            return;\n        this.$input.setAttribute(name, value);\n    }\n    get $restrict() {\n        return this.$restrictString;\n    }\n    set $restrict(v) {\n        this.$restrictString = v;\n        if (this.$restrictString != null && this.$restrictString.length > 0)\n            this.$restrictRegex = new RegExp(this.$restrictString);\n        else\n            this.$restrictRegex = null;\n    }\n    get type() {\n        return this.$type;\n    }\n    set type(v) {\n        if (v != this.$type)\n            this.$type = v;\n    }\n    tryHideInput() {\n        if (!this.$textField.visible && this.$input)\n            this.$input.$removeFromStage();\n    }\n    /**@internal */\n    $updateProperties() {\n        if (this.isFocused) {\n            this.$input.resetInput();\n            this.tryHideInput();\n            return;\n        }\n        this.$input.text = this.$textField.text;\n        this.$input.resetInput();\n        this.tryHideInput();\n    }\n    /**@internal */\n    $onFocus() {\n        if (!this.$textField.visible || this.$focused)\n            return;\n        GRoot.inst.off(InteractiveEvents.Down, this.onStageDown);\n        GTimer.inst.callLater(() => {\n            GRoot.inst.on(InteractiveEvents.Down, this.onStageDown, this);\n        }, this);\n        this.$input.$show();\n    }\n}\n\nclass GTextInput extends GTextField {\n    constructor() {\n        super();\n        this.$util = null;\n        /**@internal */\n        this.$isTyping = false;\n        this.focusable = true;\n        this.editable = true; //init\n        this.type = \"text\" /* TEXT */;\n        this.on('removed', this.removed, this);\n        this.on('added', this.added, this);\n        this.$util.initialize();\n    }\n    createDisplayObject() {\n        super.createDisplayObject();\n        this.$hitArea = new createjs.Shape();\n        this.$hitArea.graphics.beginFill('#000').drawRect(0, 0, this.$width, this.$height);\n        this.$displayObject.hitArea = this.$hitArea;\n    }\n    handleSizeChanged() {\n        super.handleSizeChanged();\n        this.$hitArea.graphics.drawRect(0, 0, this.$width, this.$height);\n        this.$displayObject.hitArea = this.$hitArea;\n    }\n    removed(disp) {\n        if (this.$util)\n            this.$util.destroy();\n    }\n    added(disp) {\n        if (this.$util)\n            this.$util.initialize();\n    }\n    requestFocus() {\n        //tab or call actively\n        Decls$1.GRoot.inst.focus = this;\n        this.$util.$onFocus();\n    }\n    get editable() {\n        return this.$editable;\n    }\n    set editable(v) {\n        if (v != this.$editable) {\n            this.$editable = v;\n            if (this.$editable) {\n                if (!this.$util)\n                    this.$util = new InputDelegate(this);\n                this.$util.initialize();\n            }\n            else {\n                if (this.$util)\n                    this.$util.destroy();\n            }\n            this.touchable = this.$editable;\n        }\n    }\n    changeToPassText(text) {\n        let passText = '';\n        for (let i = 0, num = text.length; i < num; i++) {\n            switch (text.charAt(i)) {\n                case '\\n':\n                    passText += '\\n';\n                    break;\n                case '\\r':\n                    break;\n                default:\n                    passText += '*';\n            }\n        }\n        return passText;\n    }\n    getText() {\n        return this.$util.text;\n    }\n    setText(value) {\n        if (value == null)\n            value = '';\n        if (this.$text == value)\n            return;\n        this.$util.text = value;\n        super.setText(value);\n    }\n    setColor(value) {\n        super.setColor(value);\n        this.$util.setColor(value);\n    }\n    get promptText() {\n        return this.$util.$getProperty('placeholder');\n    }\n    set promptText(v) {\n        if (v == null)\n            v = '';\n        this.$util.$setProperty('placeholder', v);\n    }\n    get maxLength() {\n        return parseInt(this.$util.$getProperty('maxlength')) || 0;\n    }\n    set maxLength(v) {\n        this.$util.$setProperty('maxlength', String(v));\n    }\n    get restrict() {\n        return this.$util.$restrict;\n    }\n    set restrict(v) {\n        this.$util.$restrict = v;\n    }\n    get password() {\n        return this.type == \"password\" /* PASSWORD */;\n    }\n    set password(v) {\n        this.type = \"password\" /* PASSWORD */;\n    }\n    get type() {\n        return this.$util.type;\n    }\n    set type(t) {\n        this.$util.type = t;\n    }\n    dispose() {\n        super.dispose();\n        this.off('removed', this.removed);\n        this.off('added', this.added);\n        this.$util.destroy();\n        this.$util = null;\n    }\n    renderNow(updateBounds = true) {\n        this.$requireRender = false;\n        this.$sizeDirty = false;\n        this.$util.$updateProperties();\n        if (this.$isTyping)\n            this.decorateInputbox();\n        let origText = this.$text;\n        if (this.type == \"password\" /* PASSWORD */)\n            this.$text = this.changeToPassText(this.$text);\n        super.renderNow(updateBounds);\n        this.$text = origText;\n    }\n    decorateInputbox() {\n        //draw underlines?\n    }\n    setupBeforeAdd(xml) {\n        super.setupBeforeAdd(xml);\n        //this.promptText = xml.attributes.prompt;  //this will be available once UBB has implemented.\n        var str = xml.attributes.maxLength;\n        if (str != null)\n            this.maxLength = parseInt(str);\n        str = xml.attributes.restrict;\n        if (str != null)\n            this.restrict = str;\n        str = xml.attributes.password;\n        if (str == 'true')\n            this.password = true;\n        else {\n            str = xml.attributes.keyboardType;\n            if (str == '4')\n                this.type = \"number\" /* NUMBER */;\n            else if (str == '3')\n                this.type = \"url\" /* URL */;\n            else if (str == '5')\n                this.type = \"tel\" /* TEL */;\n            else if (str == '6')\n                this.type = \"email\" /* EMAIL */;\n        }\n    }\n}\n\nclass Recycler {\n    constructor() {\n        this.$count = 0;\n        this.$pool = {};\n    }\n    get count() {\n        return this.$count;\n    }\n    clear() {\n        for (let key in this.$pool) {\n            let arr = this.$pool[key];\n            if (arr) {\n                arr.length = 0;\n                arr = null;\n            }\n        }\n        this.$pool = {};\n        this.$count = 0;\n    }\n    get(id) {\n        let arr = this.$pool[id];\n        if (arr == null) {\n            arr = [];\n            this.$pool[id] = arr;\n        }\n        if (arr.length) {\n            this.$count--;\n            return arr.shift();\n        }\n        return this.createObject(id);\n    }\n    recycle(id, obj) {\n        if (!id)\n            return;\n        let arr = this.$pool[id];\n        if (arr == null) {\n            arr = [];\n            this.$pool[id] = arr;\n        }\n        this.$count++;\n        arr.push(obj);\n    }\n}\n\nclass GObjectRecycler extends Recycler {\n    constructor() {\n        super();\n    }\n    clear() {\n        for (let key in this.$pool) {\n            let arr = this.$pool[key];\n            if (arr) {\n                arr.forEach((v) => {\n                    v.dispose();\n                });\n            }\n        }\n        super.clear();\n    }\n    createObject(id) {\n        return UIPackage.createObjectFromURL(id); //id = url\n    }\n}\n\nclass GLoader extends GObject {\n    constructor() {\n        super();\n        this.$frame = 0;\n        this.$color = '#fff';\n        this.$contentSourceWidth = 0;\n        this.$contentSourceHeight = 0;\n        this.$contentWidth = 0;\n        this.$contentHeight = 0;\n        this.$loadingTexture = null;\n        this.$playing = true;\n        this.$url = '';\n        this.$fill = 0 /* None */;\n        this.$align = \"left\" /* Left */;\n        this.$verticalAlign = 0 /* Top */;\n        this.$showErrorSign = true;\n        this.$color = '#fff';\n    }\n    createDisplayObject() {\n        this.$container = new UIContainer(this);\n        this.$hitArea = new createjs.Shape();\n        this.$hitArea.graphics.beginFill('#000').drawRect(0, 0, 0, 0);\n        this.$container.hitArea = this.$hitArea;\n        this.setDisplayObject(this.$container);\n        // this.$container.mouseChildren = false\n    }\n    dispose() {\n        this.clearContent();\n        super.dispose();\n    }\n    get url() {\n        return this.$url;\n    }\n    set url(value) {\n        if (this.$url == value)\n            return;\n        this.$url = value;\n        this.loadContent();\n        this.updateGear(7 /* Icon */);\n    }\n    get icon() {\n        return this.$url;\n    }\n    set icon(value) {\n        this.url = value;\n    }\n    get align() {\n        return this.$align;\n    }\n    set align(value) {\n        if (this.$align != value) {\n            this.$align = value;\n            this.updateLayout();\n        }\n    }\n    get verticalAlign() {\n        return this.$verticalAlign;\n    }\n    set verticalAlign(value) {\n        if (this.$verticalAlign != value) {\n            this.$verticalAlign = value;\n            this.updateLayout();\n        }\n    }\n    get fill() {\n        return this.$fill;\n    }\n    set fill(value) {\n        if (this.$fill != value) {\n            this.$fill = value;\n            this.updateLayout();\n        }\n    }\n    get autoSize() {\n        return this.$autoSize;\n    }\n    set autoSize(value) {\n        if (this.$autoSize != value) {\n            this.$autoSize = value;\n            this.updateLayout();\n        }\n    }\n    get playing() {\n        return this.$playing;\n    }\n    set playing(value) {\n        if (this.$playing != value) {\n            this.$playing = value;\n            if (this.$content instanceof MovieClip)\n                this.$content.playing = value;\n            this.updateGear(5 /* Animation */);\n        }\n    }\n    get frame() {\n        return this.$frame;\n    }\n    set frame(value) {\n        if (this.$frame != value) {\n            this.$frame = value;\n            if (this.$content instanceof MovieClip)\n                this.$content.currentFrame = value;\n            this.updateGear(5 /* Animation */);\n        }\n    }\n    get color() {\n        return this.$color;\n    }\n    set color(value) {\n        if (this.$color != value) {\n            this.$color = value;\n            this.updateGear(4 /* Color */);\n            this.applyColor();\n        }\n    }\n    applyColor() {\n        if (this.$content)\n            this.$content.tint = this.$color;\n    }\n    get showErrorSign() {\n        return this.$showErrorSign;\n    }\n    set showErrorSign(value) {\n        this.$showErrorSign = value;\n    }\n    get content() {\n        return this.$content;\n    }\n    get texture() {\n        if (this.$content instanceof UIImage)\n            return this.$content.texture;\n        else\n            return null;\n    }\n    set texture(value) {\n        this.url = null;\n        this.switchToMovieMode(false);\n        if (this.$content instanceof UIImage)\n            this.$content.texture = value;\n        if (value) {\n            this.$contentSourceWidth = value.width;\n            this.$contentSourceHeight = value.height;\n        }\n        else\n            this.$contentSourceWidth = this.$contentHeight = 0;\n        this.updateLayout();\n    }\n    loadContent() {\n        this.clearContent();\n        if (!this.$url)\n            return;\n        if (StringUtil.startsWith(this.$url, 'ui://'))\n            this.loadFromPackage(this.$url);\n        else\n            this.loadExternal();\n    }\n    loadFromPackage(itemURL) {\n        this.$contentItem = UIPackage.getItemByURL(itemURL);\n        if (this.$contentItem) {\n            this.$contentItem.load();\n            if (this.$contentItem.type == 0 /* Image */) {\n                if (this.$contentItem.texture == null) {\n                    this.setErrorState();\n                }\n                else {\n                    this.switchToMovieMode(false);\n                    this.$content.$initDisp(this.$contentItem);\n                    this.$contentSourceWidth = this.$contentItem.width;\n                    this.$contentSourceHeight = this.$contentItem.height;\n                    this.updateLayout();\n                }\n            }\n            else if (this.$contentItem.type == 2 /* MovieClip */) {\n                this.switchToMovieMode(true);\n                this.$contentSourceWidth = this.$contentItem.width;\n                this.$contentSourceHeight = this.$contentItem.height;\n                let mc = this.$content;\n                mc.interval = this.$contentItem.interval;\n                mc.swing = this.$contentItem.swing;\n                mc.repeatDelay = this.$contentItem.repeatDelay;\n                mc.frames = this.$contentItem.frames;\n                mc.boundsRect = new createjs.Rectangle(0, 0, this.$contentSourceWidth, this.$contentSourceHeight);\n                this.updateLayout();\n            }\n            else\n                this.setErrorState();\n        }\n        else\n            this.setErrorState();\n    }\n    switchToMovieMode(value) {\n        this.$container.removeAllChildren();\n        if (value) {\n            if (!(this.$content instanceof MovieClip))\n                this.$content = new MovieClip(this);\n        }\n        else {\n            if (!(this.$content instanceof UIImage))\n                this.$content = new UIImage(null);\n        }\n        this.$container.addChild(this.$content);\n    }\n    /**overwrite this method if you need to load resources by your own way*/\n    loadExternal() {\n        // let texture = Bitmap.fromImage(this.$url, true);\n        let texture = new Bitmap();\n        this.$loadingTexture = texture;\n        //TODO: Texture does not have error event... monitor error event on baseTexture will casue cross-error-event problem.\n        // texture.once(\"update\", () => {\n        //     if (!texture.width || !texture.height)\n        //         this.$loadResCompleted(null);\n        //     else\n        //         this.$loadResCompleted(texture);\n        // });\n    }\n    /**free the resource you loaded */\n    freeExternal(texture) {\n        // Bitmap.removeFromCache(texture);\n        // texture.destroy(texture.baseTexture != null);\n    }\n    $loadResCompleted(res) {\n        if (res)\n            this.onExternalLoadSuccess(res);\n        else {\n            this.onExternalLoadFailed();\n            // this.$loadingTexture.removeAllListeners();\n            this.freeExternal(this.$loadingTexture);\n            this.$loadingTexture = null;\n        }\n        this.$loadingTexture = null;\n    }\n    /**content loaded */\n    onExternalLoadSuccess(texture) {\n        this.$container.removeAllChildren();\n        if (!this.$content || !(this.$content instanceof UIImage)) {\n            this.$content = new UIImage(null);\n            this.$content.$initDisp();\n            this.$container.addChild(this.$content);\n        }\n        else\n            this.$container.addChild(this.$content);\n        //baseTexture loaded, so update frame info  // todo\n        this.$content.texture = texture.texture;\n        this.$contentSourceWidth = texture.sourceRect.width;\n        this.$contentSourceHeight = texture.sourceRect.height;\n        this.updateLayout();\n    }\n    onExternalLoadFailed() {\n        this.setErrorState();\n    }\n    setErrorState() {\n        if (!this.$showErrorSign)\n            return;\n        if (this.$errorSign == null) {\n            if (UIConfig.loaderErrorSign) {\n                this.$errorSign = GLoader.$errorSignPool.get(UIConfig.loaderErrorSign);\n            }\n        }\n        if (this.$errorSign) {\n            this.$errorSign.width = this.width;\n            this.$errorSign.height = this.height;\n            this.$container.addChild(this.$errorSign.displayObject);\n        }\n    }\n    clearErrorState() {\n        if (this.$errorSign) {\n            this.$container.removeChild(this.$errorSign.displayObject);\n            GLoader.$errorSignPool.recycle(this.$errorSign.resourceURL, this.$errorSign);\n            this.$errorSign = null;\n        }\n    }\n    updateLayout() {\n        if (this.$content == null) {\n            if (this.$autoSize) {\n                this.$updatingLayout = true;\n                this.setSize(50, 30);\n                this.$updatingLayout = false;\n            }\n            return;\n        }\n        this.$content.set({ x: 0, y: 0 });\n        this.$content.set({ scaleX: 1, scaleY: 1 });\n        this.$contentWidth = this.$contentSourceWidth;\n        this.$contentHeight = this.$contentSourceHeight;\n        if (this.$autoSize) {\n            this.$updatingLayout = true;\n            if (this.$contentWidth == 0)\n                this.$contentWidth = 50;\n            if (this.$contentHeight == 0)\n                this.$contentHeight = 30;\n            this.setSize(this.$contentWidth, this.$contentHeight);\n            this.$updatingLayout = false;\n        }\n        else {\n            let sx = 1, sy = 1;\n            if (this.$fill != 0 /* None */) {\n                sx = this.width / this.$contentSourceWidth;\n                sy = this.height / this.$contentSourceHeight;\n                if (sx != 1 || sy != 1) {\n                    if (this.$fill == 2 /* ScaleMatchHeight */)\n                        sx = sy;\n                    else if (this.$fill == 3 /* ScaleMatchWidth */)\n                        sy = sx;\n                    else if (this.$fill == 1 /* Scale */) {\n                        if (sx > sy)\n                            sx = sy;\n                        else\n                            sy = sx;\n                    }\n                    else if (this.$fill == 5 /* ScaleNoBorder */) {\n                        if (sx > sy)\n                            sy = sx;\n                        else\n                            sx = sy;\n                    }\n                    this.$contentWidth = this.$contentSourceWidth * sx;\n                    this.$contentHeight = this.$contentSourceHeight * sy;\n                }\n            }\n            if (this.$content instanceof UIImage) {\n                this.$content.width = this.$contentWidth;\n                this.$content.height = this.$contentHeight;\n            }\n            else\n                this.$content.set({ scaleX: sx, scaleY: sy });\n            if (this.$align == \"center\" /* Center */)\n                this.$content.x = Math.floor((this.width - this.$contentWidth) / 2);\n            else if (this.$align == \"right\" /* Right */)\n                this.$content.x = this.width - this.$contentWidth;\n            if (this.$verticalAlign == 1 /* Middle */)\n                this.$content.y = Math.floor((this.height - this.$contentHeight) / 2);\n            else if (this.$verticalAlign == 2 /* Bottom */)\n                this.$content.y = this.height - this.$contentHeight;\n        }\n    }\n    clearContent() {\n        this.clearErrorState();\n        if (this.$content && this.$content.parent)\n            this.$container.removeChild(this.$content);\n        if (this.$loadingTexture) {\n            // this.$loadingTexture.removeAllListeners();// todo\n            this.freeExternal(this.$loadingTexture);\n            this.$loadingTexture = null;\n        }\n        // if (this.$contentItem == null && this.$content instanceof UIImage)\n        //     this.freeExternal(this.$content.texture); // todo\n        this.$content && this.$content.destroy();\n        this.$content = null;\n        this.$contentItem = null;\n    }\n    handleSizeChanged() {\n        if (!this.$updatingLayout)\n            this.updateLayout();\n        this.$hitArea.graphics.drawRect(0, 0, this.width, this.height);\n    }\n    setupBeforeAdd(xml) {\n        super.setupBeforeAdd(xml);\n        let str;\n        str = xml.attributes.url;\n        if (str)\n            this.$url = str;\n        str = xml.attributes.align;\n        if (str)\n            this.$align = ParseAlignType(str);\n        str = xml.attributes.vAlign;\n        if (str)\n            this.$verticalAlign = ParseVertAlignType(str);\n        str = xml.attributes.fill;\n        if (str)\n            this.$fill = ParseLoaderFillType(str);\n        this.$autoSize = xml.attributes.autoSize == 'true';\n        str = xml.attributes.errorSign;\n        if (str)\n            this.$showErrorSign = str == 'true';\n        this.$playing = xml.attributes.playing != 'false';\n        str = xml.attributes.color;\n        if (str)\n            this.color = str;\n        if (this.$url)\n            this.loadContent();\n    }\n}\nGLoader.$errorSignPool = new GObjectRecycler();\n\nlet isColorableTitle = function (obj) {\n    return obj && \"titleColor\" in obj && \"fontSize\" in obj;\n};\n\nclass GLabel extends GComponent {\n    constructor() {\n        super();\n    }\n    get icon() {\n        if (this.$iconObject != null)\n            return this.$iconObject.icon;\n        return null;\n    }\n    set icon(value) {\n        if (this.$iconObject != null)\n            this.$iconObject.icon = value;\n        this.updateGear(7 /* Icon */);\n    }\n    get title() {\n        if (this.$titleObject)\n            return this.$titleObject.text;\n        else\n            return null;\n    }\n    set title(value) {\n        if (this.$titleObject)\n            this.$titleObject.text = value;\n        this.updateGear(6 /* Text */);\n    }\n    get text() {\n        return this.title;\n    }\n    set text(value) {\n        this.title = value;\n    }\n    get titleColor() {\n        if (isColorableTitle(this.$titleObject))\n            return this.$titleObject.titleColor;\n        return '';\n    }\n    set titleColor(value) {\n        if (isColorableTitle(this.$titleObject))\n            this.$titleObject.titleColor = value;\n    }\n    get fontSize() {\n        if (isColorableTitle(this.$titleObject))\n            return this.$titleObject.fontSize;\n        return 0;\n    }\n    set fontSize(value) {\n        if (isColorableTitle(this.$titleObject))\n            this.$titleObject.fontSize = value;\n    }\n    set editable(val) {\n        if (this.$titleObject)\n            this.$titleObject.editable = val;\n    }\n    get editable() {\n        if (this.$titleObject && this.$titleObject instanceof GTextInput)\n            return this.$titleObject.editable;\n        else\n            return false;\n    }\n    constructFromXML(xml) {\n        super.constructFromXML(xml);\n        this.$titleObject = this.getChild('title');\n        this.$iconObject = this.getChild('icon');\n    }\n    setupAfterAdd(xml) {\n        super.setupAfterAdd(xml);\n        let cs = XmlParser.getChildNodes(xml, 'Label');\n        if (cs && cs.length > 0) {\n            xml = cs[0];\n            let str;\n            str = xml.attributes.title;\n            if (str)\n                this.text = str;\n            str = xml.attributes.icon;\n            if (str)\n                this.icon = str;\n            str = xml.attributes.titleColor;\n            if (str)\n                this.titleColor = str;\n            if (this.$titleObject instanceof GTextInput) {\n                str = xml.attributes.prompt;\n                let ti = this.$titleObject;\n                if (str)\n                    ti.promptText = str;\n                str = xml.attributes.maxLength;\n                if (str)\n                    ti.maxLength = parseInt(str);\n                str = xml.attributes.restrict;\n                if (str)\n                    ti.restrict = str;\n                str = xml.attributes.password;\n                if (str)\n                    ti.password = str == 'true';\n            }\n        }\n    }\n}\n\nclass PageOption {\n    set controller(val) {\n        this.$controller = val;\n    }\n    set name(pageName) {\n        this.$id = this.$controller.getPageIdByName(pageName);\n    }\n    get name() {\n        if (this.$id)\n            return this.$controller.getPageNameById(this.$id);\n        else\n            return null;\n    }\n    set index(pageIndex) {\n        this.$id = this.$controller.getPageId(pageIndex);\n    }\n    get index() {\n        if (this.$id)\n            return this.$controller.getPageIndexById(this.$id);\n        else\n            return -1;\n    }\n    clear() {\n        this.$id = null;\n    }\n    set id(id) {\n        this.$id = id;\n    }\n    get id() {\n        return this.$id;\n    }\n}\n\nclass GButton extends GComponent {\n    constructor() {\n        super();\n        this.$mode = 0 /* Common */;\n        this.$title = '';\n        this.$icon = '';\n        this.$sound = UIConfig.buttonSound;\n        this.$soundVolumeScale = UIConfig.buttonSoundVolumeScale;\n        this.$pageOption = new PageOption();\n        this.$changeStateOnClick = true;\n        this.$downEffect = 0;\n        this.$downEffectValue = 0.8;\n        this.$container.cursor = 'pointer';\n    }\n    setDisplayObject(value) {\n        super.setDisplayObject(value);\n        // this.$displayObject.buttonMode = true; //todo\n    }\n    get icon() {\n        return this.$icon;\n    }\n    set icon(value) {\n        this.$icon = value;\n        value = this.$selected && this.$selectedIcon ? this.$selectedIcon : this.$icon;\n        if (this.$iconObject != null)\n            this.$iconObject.icon = value;\n        this.updateGear(7 /* Icon */);\n    }\n    get selectedIcon() {\n        return this.$selectedIcon;\n    }\n    set selectedIcon(value) {\n        this.$selectedIcon = value;\n        value = this.$selected && this.$selectedIcon ? this.$selectedIcon : this.$icon;\n        if (this.$iconObject != null)\n            this.$iconObject.icon = value;\n    }\n    get title() {\n        return this.$title;\n    }\n    set title(value) {\n        this.$title = value;\n        if (this.$titleObject)\n            this.$titleObject.text =\n                this.$selected && this.$selectedTitle ? this.$selectedTitle : this.$title;\n        this.updateGear(6 /* Text */);\n    }\n    get text() {\n        return this.title;\n    }\n    set text(value) {\n        this.title = value;\n    }\n    get selectedTitle() {\n        return this.$selectedTitle;\n    }\n    set selectedTitle(value) {\n        this.$selectedTitle = value;\n        if (this.$titleObject)\n            this.$titleObject.text =\n                this.$selected && this.$selectedTitle ? this.$selectedTitle : this.$title;\n    }\n    get titleColor() {\n        if (isColorableTitle(this.$titleObject))\n            return this.$titleObject.titleColor;\n    }\n    set titleColor(value) {\n        if (isColorableTitle(this.$titleObject))\n            this.$titleObject.titleColor = value;\n    }\n    get fontSize() {\n        if (isColorableTitle(this.$titleObject))\n            return this.$titleObject.fontSize;\n        return 0;\n    }\n    set fontSize(value) {\n        if (isColorableTitle(this.$titleObject))\n            this.$titleObject.fontSize = value;\n    }\n    get sound() {\n        return this.$sound;\n    }\n    set sound(val) {\n        this.$sound = val;\n    }\n    get soundVolumeScale() {\n        return this.$soundVolumeScale;\n    }\n    set soundVolumeScale(value) {\n        this.$soundVolumeScale = value;\n    }\n    set selected(val) {\n        if (this.$mode == 0 /* Common */)\n            return;\n        if (this.$selected != val) {\n            this.$selected = val;\n            if (this.grayed &&\n                this.$buttonController &&\n                this.$buttonController.hasPage(GButton.DISABLED)) {\n                if (this.$selected)\n                    this.setState(GButton.SELECTED_DISABLED);\n                else\n                    this.setState(GButton.DISABLED);\n            }\n            else {\n                if (this.$selected)\n                    this.setState(this.$over ? GButton.SELECTED_OVER : GButton.DOWN);\n                else\n                    this.setState(this.$over ? GButton.OVER : GButton.UP);\n            }\n            if (this.$selectedTitle && this.$titleObject)\n                this.$titleObject.text = this.$selected ? this.$selectedTitle : this.$title;\n            if (this.$selectedIcon) {\n                let str = this.$selected ? this.$selectedIcon : this.$icon;\n                if (this.$iconObject != null)\n                    this.$iconObject.icon = str;\n            }\n            if (this.$relatedController && this.$parent && !this.$parent.$buildingDisplayList) {\n                if (this.$selected) {\n                    this.$relatedController.selectedPageId = this.$pageOption.id;\n                    if (this.$relatedController.$autoRadioGroupDepth)\n                        this.$parent.adjustRadioGroupDepth(this, this.$relatedController);\n                }\n                else if (this.$mode == 1 /* Check */ &&\n                    this.$relatedController.selectedPageId == this.$pageOption.id)\n                    this.$relatedController.oppositePageId = this.$pageOption.id;\n            }\n        }\n    }\n    get selected() {\n        return this.$selected;\n    }\n    get mode() {\n        return this.$mode;\n    }\n    set mode(value) {\n        if (this.$mode != value) {\n            if (value == 0 /* Common */)\n                this.selected = false;\n            this.$mode = value;\n        }\n    }\n    get relatedController() {\n        return this.$relatedController;\n    }\n    set relatedController(val) {\n        if (val != this.$relatedController) {\n            this.$relatedController = val;\n            this.$pageOption.controller = val;\n            this.$pageOption.clear();\n        }\n    }\n    get pageOption() {\n        return this.$pageOption;\n    }\n    get changeStateOnClick() {\n        return this.$changeStateOnClick;\n    }\n    set changeStateOnClick(value) {\n        this.$changeStateOnClick = value;\n    }\n    get linkedPopup() {\n        return this.$linkedPopup;\n    }\n    set linkedPopup(value) {\n        this.$linkedPopup = value;\n    }\n    addStateListener(listener, thisObj) {\n        this.on(\"__stateChanged\" /* CHANGED */, listener, thisObj);\n    }\n    removeStateListener(listener) {\n        this.off(\"__stateChanged\" /* CHANGED */, listener);\n    }\n    fireClick(downEffect = true) {\n        if (downEffect && this.$mode == 0 /* Common */) {\n            this.setState(GButton.OVER);\n            GTimer.inst.add(100, 1, this.setState, this, GButton.DOWN);\n            GTimer.inst.add(200, 1, this.setState, this, GButton.UP);\n        }\n        this.$click(null);\n    }\n    setState(val) {\n        if (this.$buttonController)\n            this.$buttonController.selectedPage = val;\n        if (this.$downEffect == 1) {\n            if (val == GButton.DOWN || val == GButton.SELECTED_OVER || val == GButton.SELECTED_DISABLED) {\n                let r = this.$downEffectValue * 255;\n                let color = (r << 16) + (r << 8) + r;\n                this.$children.forEach(obj => {\n                    if (isColorGear(obj))\n                        obj.color = color;\n                });\n            }\n            else {\n                this.$children.forEach(obj => {\n                    if (isColorGear(obj))\n                        obj.color = 0xffffff;\n                });\n            }\n        }\n        else if (this.$downEffect == 2) {\n            if (val == GButton.DOWN || val == GButton.SELECTED_OVER || val == GButton.SELECTED_DISABLED)\n                this.setScale(this.$downEffectValue, this.$downEffectValue);\n            else\n                this.setScale(1, 1);\n        }\n    }\n    handleControllerChanged(c) {\n        super.handleControllerChanged(c);\n        if (this.$relatedController == c)\n            this.selected = this.$pageOption.id == c.selectedPageId;\n    }\n    handleGrayedChanged() {\n        if (this.$buttonController && this.$buttonController.hasPage(GButton.DISABLED)) {\n            if (this.grayed) {\n                if (this.$selected && this.$buttonController.hasPage(GButton.SELECTED_DISABLED))\n                    this.setState(GButton.SELECTED_DISABLED);\n                else\n                    this.setState(GButton.DISABLED);\n            }\n            else if (this.$selected)\n                this.setState(GButton.DOWN);\n            else\n                this.setState(GButton.UP);\n        }\n        else\n            super.handleGrayedChanged();\n    }\n    constructFromXML(xml) {\n        super.constructFromXML(xml);\n        xml = XmlParser.getChildNodes(xml, 'Button')[0];\n        let str;\n        str = xml.attributes.mode;\n        if (str)\n            this.$mode = ParseButtonMode(str);\n        str = xml.attributes.sound;\n        if (str != null)\n            this.$sound = str;\n        str = xml.attributes.volume;\n        if (str)\n            this.$soundVolumeScale = parseInt(str) / 100;\n        str = xml.attributes.downEffect;\n        if (str) {\n            this.$downEffect = str == 'dark' ? 1 : str == 'scale' ? 2 : 0;\n            str = xml.attributes.downEffectValue;\n            this.$downEffectValue = parseFloat(str);\n            if (this.$downEffect == 2)\n                this.setPivot(0.5, 0.5);\n        }\n        this.$buttonController = this.getController('button');\n        this.$titleObject = this.getChild('title');\n        this.$iconObject = this.getChild('icon');\n        if (this.$titleObject != null)\n            this.$title = this.$titleObject.text;\n        if (this.$iconObject != null)\n            this.$icon = this.$iconObject.icon;\n        if (this.$mode == 0 /* Common */)\n            this.setState(GButton.UP);\n        this.on(InteractiveEvents.Over, this.$rollover, this);\n        this.on(InteractiveEvents.Out, this.$rollout, this);\n        this.on(InteractiveEvents.Down, this.$mousedown, this);\n        this.on(InteractiveEvents.Click, this.$click, this);\n        this.$hitArea = new createjs.Shape();\n        this.$hitArea.graphics.beginFill(\"#fff\").drawRect(0, 0, this.width, this.height);\n        this.$displayObject.hitArea = this.$hitArea;\n    }\n    setupAfterAdd(xml) {\n        super.setupAfterAdd(xml);\n        xml = XmlParser.getChildNodes(xml, 'Button')[0];\n        if (xml) {\n            let str;\n            str = xml.attributes.title;\n            if (str)\n                this.title = str;\n            str = xml.attributes.icon;\n            if (str)\n                this.icon = str;\n            str = xml.attributes.selectedTitle;\n            if (str)\n                this.selectedTitle = str;\n            str = xml.attributes.selectedIcon;\n            if (str)\n                this.selectedIcon = str;\n            str = xml.attributes.titleColor;\n            if (str)\n                this.titleColor = StringUtil.HEX2RGB(str);\n            str = xml.attributes.sound;\n            if (str != null)\n                this.$sound = str;\n            str = xml.attributes.volume;\n            if (str)\n                this.$soundVolumeScale = parseInt(str) / 100;\n            str = xml.attributes.titleFontSize;\n            if (str)\n                this.fontSize = parseInt(str);\n            str = xml.attributes.controller;\n            if (str)\n                this.$relatedController = this.$parent.getController(str);\n            else\n                this.$relatedController = null;\n            this.$pageOption.id = xml.attributes.page;\n            this.selected = xml.attributes.checked == 'true';\n        }\n    }\n    $rollover(evt) {\n        if (!this.$buttonController || !this.$buttonController.hasPage(GButton.OVER))\n            return;\n        this.$over = true;\n        if (this.$down)\n            return;\n        this.setState(this.$selected ? GButton.SELECTED_OVER : GButton.OVER);\n    }\n    $rollout(evt) {\n        if (!this.$buttonController || !this.$buttonController.hasPage(GButton.OVER))\n            return;\n        this.$over = false;\n        if (this.$down)\n            return;\n        this.setState(this.$selected ? GButton.DOWN : GButton.UP);\n    }\n    $mousedown(evt) {\n        this.$down = true;\n        this.$mouseUpEvent = Decls$1.GRoot.inst.nativeStage.on(InteractiveEvents.Up, this.$mouseup, this);\n        if (this.$mode == 0 /* Common */) {\n            if (this.grayed && this.$buttonController && this.$buttonController.hasPage(GButton.DISABLED))\n                this.setState(GButton.SELECTED_DISABLED);\n            else\n                this.setState(GButton.DOWN);\n        }\n        if (this.$linkedPopup != null) {\n            if (this.$linkedPopup instanceof Window)\n                this.$linkedPopup.toggleVisible();\n            else\n                Decls$1.GRoot.inst.togglePopup(this.$linkedPopup, this);\n        }\n    }\n    $mouseup(evt) {\n        if (this.$down) {\n            Decls$1.GRoot.inst.nativeStage.off(InteractiveEvents.Up, this.$mouseUpEvent);\n            this.$down = false;\n            if (this.$mode == 0 /* Common */) {\n                if (this.grayed &&\n                    this.$buttonController &&\n                    this.$buttonController.hasPage(GButton.DISABLED))\n                    this.setState(GButton.DISABLED);\n                else if (this.$over)\n                    this.setState(GButton.OVER);\n                else\n                    this.setState(GButton.UP);\n            }\n        }\n    }\n    $click(evt) {\n        if (this.$sound) {\n            var pi = UIPackage.getItemByURL(this.$sound);\n            if (pi) {\n                var sound = pi.owner.getItemAsset(pi);\n                if (sound)\n                    Decls$1.GRoot.inst.playOneShotSound(sound, this.$soundVolumeScale);\n            }\n        }\n        if (!this.$changeStateOnClick)\n            return;\n        if (this.$mode == 1 /* Check */) {\n            this.selected = !this.$selected;\n            let evt = new createjs.Event(\"__stateChanged\" /* CHANGED */, true, false);\n            evt.data = { selected: this.selected };\n            this.dispatchEvent(evt, this);\n        }\n        else if (this.$mode == 2 /* Radio */) {\n            if (!this.$selected) {\n                this.selected = true;\n                let evt = new createjs.Event(\"__stateChanged\" /* CHANGED */, true, false);\n                evt.data = { selected: this.selected };\n                this.dispatchEvent(evt, this);\n            }\n        }\n    }\n    dispose() {\n        GTimer.inst.remove(this.setState, this);\n        GTimer.inst.remove(this.setState, this);\n        Decls$1.GRoot.inst.off(InteractiveEvents.Up, this.$mouseup);\n        super.dispose();\n    }\n}\nGButton.UP = 'up';\nGButton.DOWN = 'down';\nGButton.OVER = 'over';\nGButton.SELECTED_OVER = 'selectedOver';\nGButton.DISABLED = 'disabled';\nGButton.SELECTED_DISABLED = 'selectedDisabled';\n\nclass GComboBox extends GComponent {\n    constructor() {\n        super();\n        this.$visibleItemCount = 0;\n        this.$selectedIndex = 0;\n        this.$popupDir = 1 /* Down */;\n        this.$visibleItemCount = UIConfig.defaultComboBoxVisibleItemCount;\n        this.$itemsUpdated = true;\n        this.$selectedIndex = -1;\n        this.$items = [];\n        this.$values = [];\n    }\n    get text() {\n        if (this.$titleObject)\n            return this.$titleObject.text;\n        else\n            return null;\n    }\n    set text(value) {\n        if (this.$titleObject)\n            this.$titleObject.text = value;\n        this.updateGear(6 /* Text */);\n    }\n    get icon() {\n        if (this.$iconObject)\n            return this.$iconObject.icon;\n        else\n            return null;\n    }\n    set icon(value) {\n        if (this.$iconObject)\n            this.$iconObject.icon = value;\n        this.updateGear(7 /* Icon */);\n    }\n    get titleColor() {\n        if (isColorableTitle(this.$titleObject))\n            return this.$titleObject.titleColor;\n        // return 0;\n    }\n    set titleColor(value) {\n        if (isColorableTitle(this.$titleObject))\n            this.$titleObject.titleColor = value;\n    }\n    get visibleItemCount() {\n        return this.$visibleItemCount;\n    }\n    set visibleItemCount(value) {\n        this.$visibleItemCount = value;\n    }\n    get popupDirection() {\n        return this.$popupDir;\n    }\n    set popupDirection(value) {\n        this.$popupDir = value;\n    }\n    get items() {\n        return this.$items;\n    }\n    set items(value) {\n        if (!value)\n            this.$items.length = 0;\n        else\n            this.$items = value.concat();\n        if (this.$items.length > 0) {\n            if (this.$selectedIndex >= this.$items.length)\n                this.$selectedIndex = this.$items.length - 1;\n            else if (this.$selectedIndex == -1)\n                this.$selectedIndex = 0;\n            this.text = this.$items[this.$selectedIndex];\n            if (this.$icons != null && this.$selectedIndex < this.$icons.length)\n                this.icon = this.$icons[this.$selectedIndex];\n        }\n        else {\n            this.text = '';\n            if (this.$icons != null)\n                this.icon = null;\n            this.$selectedIndex = -1;\n        }\n        this.$itemsUpdated = true;\n    }\n    get icons() {\n        return this.$icons;\n    }\n    set icons(value) {\n        this.$icons = value;\n        if (this.$icons != null &&\n            this.$selectedIndex != -1 &&\n            this.$selectedIndex < this.$icons.length)\n            this.icon = this.$icons[this.$selectedIndex];\n    }\n    get values() {\n        return this.$values;\n    }\n    set values(value) {\n        if (!value)\n            this.$values.length = 0;\n        else\n            this.$values = value.concat();\n    }\n    get selectedIndex() {\n        return this.$selectedIndex;\n    }\n    set selectedIndex(val) {\n        if (this.$selectedIndex == val)\n            return;\n        this.$selectedIndex = val;\n        if (this.selectedIndex >= 0 && this.selectedIndex < this.$items.length) {\n            this.text = this.$items[this.$selectedIndex];\n            if (this.$icons != null && this.$selectedIndex < this.$icons.length)\n                this.icon = this.$icons[this.$selectedIndex];\n        }\n        else {\n            this.text = '';\n            if (this.$icons != null)\n                this.icon = null;\n        }\n    }\n    get value() {\n        return this.$values[this.$selectedIndex];\n    }\n    set value(val) {\n        this.selectedIndex = this.$values.indexOf(val);\n    }\n    setState(val) {\n        if (this.$buttonController)\n            this.$buttonController.selectedPage = val;\n    }\n    constructFromXML(xml) {\n        super.constructFromXML(xml);\n        xml = XmlParser.getChildNodes(xml, 'ComboBox')[0];\n        let str;\n        this.$buttonController = this.getController('button');\n        this.$titleObject = this.getChild('title');\n        this.$iconObject = this.getChild('icon');\n        str = xml.attributes.dropdown;\n        if (str) {\n            this.$dropdown = UIPackage.createObjectFromURL(str);\n            if (!this.$dropdown)\n                throw new Error(\"the 'dropdown' is not specified, it must be a component definied in the package pool\");\n            this.$dropdown.name = 'this.dropdown';\n            this.$list = this.$dropdown.getChild('list');\n            if (this.$list == null)\n                throw new Error(`${this.resourceURL}: the dropdown component must have a GList child and named 'list'.`);\n            this.$list.on(\"__itemClick\" /* ItemClick */, this.$clickItem, this);\n            this.$list.addRelation(this.$dropdown, 14 /* Width */);\n            this.$list.removeRelation(this.$dropdown, 15 /* Height */);\n            this.$dropdown.addRelation(this.$list, 15 /* Height */);\n            this.$dropdown.removeRelation(this.$list, 14 /* Width */);\n            this.$dropdown.on('removed', this.$popupWinClosed, this);\n        }\n        if (!fairygui_module_isMobile.any) {\n            this.on(InteractiveEvents.Over, this.$rollover, this);\n            this.on(InteractiveEvents.Out, this.$rollout, this);\n        }\n        this.on(InteractiveEvents.Down, this.$mousedown, this);\n    }\n    dispose() {\n        GTimer.inst.remove(this.delayedClickItem, this);\n        this.$list.off(\"__itemClick\" /* ItemClick */, this.$clickItem);\n        this.$dropdown.off('removed', this.$popupWinClosed);\n        GRoot.inst.nativeStage.off(InteractiveEvents.Up, this.$mouseUpEvent);\n        this.$popupWinClosed(null);\n        if (this.$dropdown) {\n            this.$dropdown.dispose();\n            this.$dropdown = null;\n        }\n        super.dispose();\n    }\n    setupAfterAdd(xml) {\n        super.setupAfterAdd(xml);\n        xml = XmlParser.getChildNodes(xml, 'ComboBox')[0];\n        if (xml) {\n            let str;\n            str = xml.attributes.titleColor;\n            if (str)\n                this.titleColor = str;\n            str = xml.attributes.visibleItemCount;\n            if (str)\n                this.$visibleItemCount = parseInt(str);\n            let col = xml.children;\n            if (col) {\n                col.forEach((x, i) => {\n                    if (x.nodeName == 'item') {\n                        this.$items.push(x.attributes.title);\n                        this.$values.push(x.attributes.value);\n                        str = x.attributes.icon;\n                        if (str) {\n                            if (!this.$icons)\n                                this.$icons = new Array(length);\n                            this.$icons[i] = str;\n                        }\n                    }\n                });\n            }\n            str = xml.attributes.title;\n            if (str) {\n                this.text = str;\n                this.$selectedIndex = this.$items.indexOf(str);\n            }\n            else if (this.$items.length > 0) {\n                this.$selectedIndex = 0;\n                this.text = this.$items[0];\n            }\n            else\n                this.$selectedIndex = -1;\n            str = xml.attributes.icon;\n            if (str)\n                this.icon = str;\n            str = xml.attributes.direction;\n            if (str) {\n                if (str == 'up')\n                    this.$popupDir = 2 /* Up */;\n                else if (str == 'auto')\n                    this.$popupDir = 0 /* Auto */;\n            }\n        }\n    }\n    showDropdown() {\n        if (this.$itemsUpdated) {\n            this.$itemsUpdated = false;\n            this.$list.removeChildrenToPool();\n            this.$items.forEach((o, i) => {\n                let item = this.$list.addItemFromPool();\n                item.name = i < this.$values.length ? this.$values[i] : '';\n                item.text = this.$items[i];\n                item.icon = this.$icons != null && i < this.$icons.length ? this.$icons[i] : null;\n            }, this);\n            this.$list.resizeToFit(this.$visibleItemCount);\n        }\n        this.$list.selectedIndex = -1;\n        this.$dropdown.width = this.width;\n        GRoot.findFor(this).togglePopup(this.$dropdown, this, this.$popupDir);\n        if (this.$dropdown.parent)\n            this.setState(GButton.DOWN);\n    }\n    $popupWinClosed(evt) {\n        if (this.$over)\n            this.setState(GButton.OVER);\n        else\n            this.setState(GButton.UP);\n    }\n    $clickItem(evt) {\n        let item = evt.data.item;\n        let index = this.$list.getChildIndex(item);\n        GTimer.inst.add(100, 1, this.delayedClickItem, this, index);\n    }\n    delayedClickItem(index) {\n        if (this.$dropdown.parent instanceof GRoot)\n            this.$dropdown.parent.hidePopup();\n        this.$selectedIndex = index;\n        if (this.$selectedIndex >= 0)\n            this.text = this.$items[this.$selectedIndex];\n        else\n            this.text = '';\n        let evt = new createjs.Event(\"__stateChanged\" /* CHANGED */, true, false);\n        evt.data = { selectedIndex: this.$selectedIndex };\n        this.dispatchEvent(evt, this);\n    }\n    $rollover(evt) {\n        this.$over = true;\n        if (this.$down || (this.$dropdown && this.$dropdown.parent))\n            return;\n        this.setState(GButton.OVER);\n    }\n    $rollout(evt) {\n        this.$over = false;\n        if (this.$down || (this.$dropdown && this.$dropdown.parent))\n            return;\n        this.setState(GButton.UP);\n    }\n    $mousedown(evt) {\n        evt.stopPropagation();\n        GRoot.inst.checkPopups(evt.target);\n        this.$down = true;\n        this.$mouseUpEvent = GRoot.inst.nativeStage.on(InteractiveEvents.Up, this.$mouseup, this);\n        if (this.$dropdown)\n            this.showDropdown();\n    }\n    $mouseup(evt) {\n        if (this.$down) {\n            this.$down = false;\n            GRoot.inst.nativeStage.off(InteractiveEvents.Up, this.$mouseUpEvent);\n            if (this.$dropdown && !this.$dropdown.parent) {\n                if (this.$over)\n                    this.setState(GButton.OVER);\n                else\n                    this.setState(GButton.UP);\n            }\n        }\n    }\n}\n\nclass GSlider extends GComponent {\n    constructor() {\n        super();\n        this.$max = 0;\n        this.$value = 0;\n        this.$barMaxWidth = 0;\n        this.$barMaxHeight = 0;\n        this.$barMaxWidthDelta = 0;\n        this.$barMaxHeightDelta = 0;\n        this.$titleType = 0 /* Percent */;\n        this.$value = 50;\n        this.$max = 100;\n        this.$clickPos = new createjs.Point();\n    }\n    get titleType() {\n        return this.$titleType;\n    }\n    set titleType(value) {\n        this.$titleType = value;\n    }\n    get max() {\n        return this.$max;\n    }\n    set max(value) {\n        if (this.$max != value) {\n            this.$max = value;\n            this.update();\n        }\n    }\n    get value() {\n        return this.$value;\n    }\n    set value(value) {\n        if (this.$value != value) {\n            this.$value = value;\n            this.update();\n        }\n    }\n    update() {\n        let percent = Math.min(this.$value / this.$max, 1);\n        this.updateWidthPercent(percent);\n    }\n    updateWidthPercent(percent) {\n        if (this.$titleObject) {\n            switch (this.$titleType) {\n                case 0 /* Percent */:\n                    this.$titleObject.text = `${Math.round(percent * 100)}%`;\n                    break;\n                case 1 /* ValueAndMax */:\n                    this.$titleObject.text = `${this.$value}/${this.$max}`;\n                    break;\n                case 2 /* Value */:\n                    this.$titleObject.text = `${this.$value}`;\n                    break;\n                case 3 /* Max */:\n                    this.$titleObject.text = `${this.$max}`;\n                    break;\n            }\n        }\n        if (this.$barObjectH)\n            this.$barObjectH.width = (this.width - this.$barMaxWidthDelta) * percent;\n        if (this.$barObjectV)\n            this.$barObjectV.height = (this.height - this.$barMaxHeightDelta) * percent;\n        if (this.$aniObject instanceof GMovieClip)\n            this.$aniObject.frame = Math.round(percent * 100);\n    }\n    handleSizeChanged() {\n        super.handleSizeChanged();\n        if (this.$barObjectH)\n            this.$barMaxWidth = this.width - this.$barMaxWidthDelta;\n        if (this.$barObjectV)\n            this.$barMaxHeight = this.height - this.$barMaxHeightDelta;\n        if (!this.$inProgressBuilding)\n            this.update();\n    }\n    setupAfterAdd(xml) {\n        super.setupAfterAdd(xml);\n        xml = XmlParser.getChildNodes(xml, 'Slider')[0];\n        if (xml) {\n            this.$value = parseInt(xml.attributes.value);\n            this.$max = parseInt(xml.attributes.max);\n        }\n        this.update();\n    }\n    constructFromXML(xml) {\n        super.constructFromXML(xml);\n        xml = XmlParser.getChildNodes(xml, 'Slider')[0];\n        let str;\n        if (xml) {\n            str = xml.attributes.titleType;\n            if (str)\n                this.$titleType = ParseProgressTitleType(str);\n        }\n        this.$titleObject = this.getChild('title');\n        this.$barObjectH = this.getChild('bar');\n        this.$barObjectV = this.getChild('bar_v');\n        this.$aniObject = this.getChild('ani');\n        this.$gripObject = this.getChild('grip');\n        if (this.$barObjectH) {\n            this.$barMaxWidth = this.$barObjectH.width;\n            this.$barMaxWidthDelta = this.width - this.$barMaxWidth;\n        }\n        if (this.$barObjectV) {\n            this.$barMaxHeight = this.$barObjectV.height;\n            this.$barMaxHeightDelta = this.height - this.$barMaxHeight;\n        }\n        if (this.$gripObject)\n            this.$gripObject.on(InteractiveEvents.Down, this.$gripMouseDown, this);\n    }\n    $gripMouseDown(evt) {\n        this.$clickPos = this.globalToLocal(evt.stageX, evt.stageY);\n        this.$clickPercent = this.$value / this.$max;\n        this.$mouseMoveEvent = GRoot.inst.nativeStage.on(InteractiveEvents.Move, this.$gripMouseMove, this);\n        this.$mouseUpEvent = GRoot.inst.nativeStage.on(InteractiveEvents.Up, this.$gripMouseUp, this);\n    }\n    $gripMouseMove(evt) {\n        let pt = this.globalToLocal(evt.stageX, evt.stageY, GSlider.sSilderHelperPoint);\n        let deltaX = pt.x - this.$clickPos.x;\n        let deltaY = pt.y - this.$clickPos.y;\n        let percent;\n        if (this.$barObjectH)\n            percent = this.$clickPercent + deltaX / this.$barMaxWidth;\n        else\n            percent = this.$clickPercent + deltaY / this.$barMaxHeight;\n        if (percent > 1)\n            percent = 1;\n        else if (percent < 0)\n            percent = 0;\n        let newValue = Math.round(this.$max * percent);\n        if (newValue != this.$value) {\n            this.$value = newValue;\n            let evt = new createjs.Event(\"__stateChanged\" /* CHANGED */, true, false);\n            this.dispatchEvent(evt, this);\n        }\n        this.updateWidthPercent(percent);\n    }\n    $gripMouseUp(evt) {\n        let percent = this.$value / this.$max;\n        this.updateWidthPercent(percent);\n        GRoot.inst.nativeStage.off(InteractiveEvents.Move, this.$mouseMoveEvent);\n        GRoot.inst.nativeStage.off(InteractiveEvents.Up, this.$mouseUpEvent);\n    }\n    dispose() {\n        if (this.$gripObject)\n            this.$gripObject.off(InteractiveEvents.Down, this.$gripMouseDown);\n        GRoot.inst.nativeStage.off(InteractiveEvents.Move, this.$mouseMoveEvent);\n        GRoot.inst.nativeStage.off(InteractiveEvents.Up, this.$mouseUpEvent);\n        super.dispose();\n    }\n}\nGSlider.sSilderHelperPoint = new createjs.Point();\n\nclass GProgressBar extends GComponent {\n    constructor() {\n        super();\n        this.$max = 0;\n        this.$value = 0;\n        this.$barMaxWidth = 0;\n        this.$barMaxHeight = 0;\n        this.$barMaxWidthDelta = 0;\n        this.$barMaxHeightDelta = 0;\n        this.$barStartX = 0;\n        this.$barStartY = 0;\n        this.$tweenValue = 0;\n        this.$titleType = 0 /* Percent */;\n        this.$value = 50;\n        this.$max = 100;\n    }\n    get titleType() {\n        return this.$titleType;\n    }\n    set titleType(value) {\n        if (this.$titleType != value) {\n            this.$titleType = value;\n            this.update(this.$value);\n        }\n    }\n    get max() {\n        return this.$max;\n    }\n    set max(value) {\n        if (this.$max != value) {\n            this.$max = value;\n            this.update(this.$value);\n        }\n    }\n    get value() {\n        return this.$value;\n    }\n    set value(value) {\n        if (this.$tweener != null) {\n            this.$tweener.paused = true;\n            this.$tweener = null;\n        }\n        if (this.$value != value) {\n            this.$value = value;\n            this.update(this.$value);\n        }\n    }\n    tweenValue(value, duration) {\n        if (this.$value != value) {\n            if (this.$tweener) {\n                this.$tweener.paused = true;\n                this.$tweener.removeAllEventListeners();\n                createjs.Tween.removeTweens(this);\n            }\n            this.$tweenValue = this.$value;\n            this.$value = value;\n            this.$tweener = createjs.Tween.get(this, {\n                onChange: Binder.create(this.onUpdateTween, this)\n            }).to({ $tweenValue: value }, duration * 1000, GProgressBar.easeLinear);\n            return this.$tweener;\n        }\n        else\n            return null;\n    }\n    onUpdateTween() {\n        this.update(this.$tweenValue);\n    }\n    update(val) {\n        let percent = this.$max != 0 ? Math.min(val / this.$max, 1) : 0;\n        if (this.$titleObject) {\n            switch (this.$titleType) {\n                case 0 /* Percent */:\n                    this.$titleObject.text = `${Math.round(percent * 100)}%`;\n                    break;\n                case 1 /* ValueAndMax */:\n                    this.$titleObject.text = `${Math.round(val)}/${Math.round(this.$max)}`;\n                    break;\n                case 2 /* Value */:\n                    this.$titleObject.text = `${Math.round(val)}`;\n                    break;\n                case 3 /* Max */:\n                    this.$titleObject.text = `${Math.round(this.$max)}`;\n                    break;\n            }\n        }\n        let fullWidth = this.width - this.$barMaxWidthDelta;\n        let fullHeight = this.height - this.$barMaxHeightDelta;\n        if (!this.$reverse) {\n            if (this.$barObjectH)\n                this.$barObjectH.width = fullWidth * percent;\n            if (this.$barObjectV)\n                this.$barObjectV.height = fullHeight * percent;\n        }\n        else {\n            if (this.$barObjectH) {\n                this.$barObjectH.width = fullWidth * percent;\n                this.$barObjectH.x = this.$barStartX + (fullWidth - this.$barObjectH.width);\n            }\n            if (this.$barObjectV) {\n                this.$barObjectV.height = fullHeight * percent;\n                this.$barObjectV.y = this.$barStartY + (fullHeight - this.$barObjectV.height);\n            }\n        }\n        if (this.$aniObject instanceof GMovieClip)\n            this.$aniObject.frame = Math.round(percent * 100);\n    }\n    constructFromXML(xml) {\n        super.constructFromXML(xml);\n        xml = XmlParser.getChildNodes(xml, 'ProgressBar')[0];\n        let str;\n        str = xml.attributes.titleType;\n        if (str)\n            this.$titleType = ParseProgressTitleType(str);\n        this.$reverse = xml.attributes.reverse == 'true';\n        this.$titleObject = this.getChild('title');\n        this.$barObjectH = this.getChild('bar');\n        this.$barObjectV = this.getChild('bar_v');\n        this.$aniObject = this.getChild('ani');\n        if (this.$barObjectH) {\n            this.$barMaxWidth = this.$barObjectH.width;\n            this.$barMaxWidthDelta = this.width - this.$barMaxWidth;\n            this.$barStartX = this.$barObjectH.x;\n        }\n        if (this.$barObjectV) {\n            this.$barMaxHeight = this.$barObjectV.height;\n            this.$barMaxHeightDelta = this.height - this.$barMaxHeight;\n            this.$barStartY = this.$barObjectV.y;\n        }\n    }\n    handleSizeChanged() {\n        super.handleSizeChanged();\n        if (this.$barObjectH)\n            this.$barMaxWidth = this.width - this.$barMaxWidthDelta;\n        if (this.$barObjectV)\n            this.$barMaxHeight = this.height - this.$barMaxHeightDelta;\n        if (!this.$inProgressBuilding)\n            this.update(this.$value);\n    }\n    setupAfterAdd(xml) {\n        super.setupAfterAdd(xml);\n        xml = XmlParser.getChildNodes(xml, 'ProgressBar')[0];\n        if (xml) {\n            this.$value = parseInt(xml.attributes.value) || 0;\n            this.$max = parseInt(xml.attributes.max) || 0;\n        }\n        this.update(this.$value);\n    }\n    dispose() {\n        if (this.$tweener) {\n            this.$tweener.paused = true;\n            this.$tweener.removeAllEventListeners();\n        }\n        createjs.Tween.removeTweens(this);\n        this.$tweener = null;\n        super.dispose();\n    }\n}\nGProgressBar.easeLinear = ParseEaseType('linear'); // createjs.Ease.getPowIn(1);\n\nclass GScrollBar extends GComponent {\n    constructor() {\n        super();\n        this.$dragOffset = new createjs.Point();\n        this.$scrollPerc = 0;\n    }\n    setScrollPane(target, vertical) {\n        this.$target = target;\n        this.$vertical = vertical;\n    }\n    set displayPerc(val) {\n        if (this.$vertical) {\n            if (!this.$fixedGripSize)\n                this.$grip.height = val * this.$bar.height;\n            this.$grip.y = this.$bar.y + (this.$bar.height - this.$grip.height) * this.$scrollPerc;\n        }\n        else {\n            if (!this.$fixedGripSize)\n                this.$grip.width = val * this.$bar.width;\n            this.$grip.x = this.$bar.x + (this.$bar.width - this.$grip.width) * this.$scrollPerc;\n        }\n    }\n    get scrollPerc() {\n        return this.$scrollPerc;\n    }\n    set scrollPerc(val) {\n        this.$scrollPerc = val;\n        if (this.$vertical)\n            this.$grip.y = this.$bar.y + (this.$bar.height - this.$grip.height) * this.$scrollPerc;\n        else\n            this.$grip.x = this.$bar.x + (this.$bar.width - this.$grip.width) * this.$scrollPerc;\n    }\n    get minSize() {\n        if (this.$vertical)\n            return ((this.$arrowButton1 != null ? this.$arrowButton1.height : 0) +\n                (this.$arrowButton2 != null ? this.$arrowButton2.height : 0));\n        else\n            return ((this.$arrowButton1 != null ? this.$arrowButton1.width : 0) +\n                (this.$arrowButton2 != null ? this.$arrowButton2.width : 0));\n    }\n    constructFromXML(xml) {\n        super.constructFromXML(xml);\n        xml = XmlParser.getChildNodes(xml, 'ScrollBar')[0];\n        if (xml != null)\n            this.$fixedGripSize = xml.attributes.fixedGripSize == 'true';\n        this.$grip = this.getChild('grip');\n        if (!this.$grip) {\n            console.error(\"please create and define 'grip' in the Editor for the scrollbar\");\n            return;\n        }\n        this.$bar = this.getChild('bar');\n        if (!this.$bar) {\n            console.error(\"please create and define 'bar' in the Editor for the scrollbar\");\n            return;\n        }\n        this.$arrowButton1 = this.getChild('arrow1');\n        this.$arrowButton2 = this.getChild('arrow2');\n        this.$grip.on(InteractiveEvents.Down, this.$gripMouseDown, this);\n        if (this.$arrowButton1)\n            this.$arrowButton1.on(InteractiveEvents.Down, this.$arrowButton1Click, this);\n        if (this.$arrowButton2)\n            this.$arrowButton2.on(InteractiveEvents.Down, this.$arrowButton2Click, this);\n        this.on(InteractiveEvents.Down, this.$barMouseDown, this);\n    }\n    $gripMouseDown(evt) {\n        if (!this.$bar)\n            return;\n        evt.stopPropagation();\n        // this.$dragOffset = evt.data.getLocalPosition(this.displayObject, this.$dragOffset);\n        this.$dragOffset = new createjs.Point(evt.localX, evt.localY);\n        this.$dragOffset.x -= this.$grip.x;\n        this.$dragOffset.y -= this.$grip.y;\n        this.$mouseMoveEvent = GRoot.inst.nativeStage.on(InteractiveEvents.Move, this.$gripDragging, this);\n        this.$mouseUpEvent = GRoot.inst.nativeStage.on(InteractiveEvents.Up, this.$gripDraggingEnd, this);\n    }\n    $gripDragging(evt) {\n        let pt = evt.target.localToLocal(evt.localX, evt.localY, this.$displayObject); // todo\n        if (GScrollBar.sScrollbarHelperPoint.x == 0 && GScrollBar.sScrollbarHelperPoint.y == 0) {\n            GScrollBar.sScrollbarHelperPoint.x = this.$target['$xPos'];\n            GScrollBar.sScrollbarHelperPoint.y = this.$target['$yPos'];\n        }\n        pt.x -= GScrollBar.sScrollbarHelperPoint.x;\n        pt.y -= GScrollBar.sScrollbarHelperPoint.y;\n        if (this.$vertical) {\n            let curY = pt.y - this.$dragOffset.y;\n            this.$target.setPercY((curY - this.$bar.y) / (this.$bar.height - this.$grip.height), false);\n        }\n        else {\n            let curX = pt.x - this.$dragOffset.x;\n            this.$target.setPercX((curX - this.$bar.x) / (this.$bar.width - this.$grip.width), false);\n        }\n    }\n    $gripDraggingEnd(evt) {\n        GScrollBar.sScrollbarHelperPoint = new createjs.Point();\n        GRoot.inst.nativeStage.off(InteractiveEvents.Move, this.$mouseMoveEvent);\n        GRoot.inst.nativeStage.off(InteractiveEvents.Up, this.$mouseUpEvent);\n    }\n    $arrowButton1Click(evt) {\n        evt.stopPropagation();\n        if (this.$vertical)\n            this.$target.scrollUp();\n        else\n            this.$target.scrollLeft();\n    }\n    $arrowButton2Click(evt) {\n        evt.stopPropagation();\n        if (this.$vertical)\n            this.$target.scrollDown();\n        else\n            this.$target.scrollRight();\n    }\n    $barMouseDown(evt) {\n        let pt = new createjs.Point(evt.localX, evt.localY);\n        // let pt: createjs.Point = evt.data.getLocalPosition(this.$grip.displayObject, GScrollBar.sScrollbarHelperPoint);\n        if (this.$vertical) {\n            if (pt.y < 0)\n                this.$target.scrollUp(4);\n            else\n                this.$target.scrollDown(4);\n        }\n        else {\n            if (pt.x < 0)\n                this.$target.scrollLeft(4);\n            else\n                this.$target.scrollRight(4);\n        }\n    }\n    dispose() {\n        this.off(InteractiveEvents.Down, this.$barMouseDown);\n        GScrollBar.sScrollbarHelperPoint = new createjs.Point();\n        if (this.$arrowButton1)\n            this.$arrowButton1.off(InteractiveEvents.Down, this.$arrowButton1Click);\n        if (this.$arrowButton2)\n            this.$arrowButton2.off(InteractiveEvents.Down, this.$arrowButton2Click);\n        this.$grip.off(InteractiveEvents.Down, this.$gripMouseDown);\n        this.$gripDraggingEnd(null);\n        super.dispose();\n    }\n}\nGScrollBar.sScrollbarHelperPoint = new createjs.Point();\n\nclass ItemInfo {\n    constructor() {\n        this.width = 0;\n        this.height = 0;\n        this.updateFlag = 0;\n        this.selected = false;\n    }\n}\nclass GList extends GComponent {\n    constructor() {\n        super();\n        this.$lineCount = 0;\n        this.$columnCount = 0;\n        this.$lineGap = 0;\n        this.$columnGap = 0;\n        this.$lastSelectedIndex = 0;\n        this.$numItems = 0;\n        this.$firstIndex = 0; //top left index\n        this.$curLineItemCount = 0; //item count in one line\n        this.$virtualListChanged = 0 /* None */;\n        //render sorting type\n        this.$apexIndex = 0;\n        this.$childrenRenderOrder = 0 /* Ascent */;\n        this.$itemInfoVer = 0; //is the item used in the current handling or not\n        this.$enterCounter = 0; //because the handleScroll function can be re-entered, so this variable is used to avoid dead-lock\n        this.$trackBounds = true;\n        this.$pool = new GObjectRecycler();\n        this.$layout = 0 /* SingleColumn */;\n        this.$autoResizeItem = true;\n        this.$lastSelectedIndex = -1;\n        this.$selectionMode = 0 /* Single */;\n        this.opaque = true;\n        this.scrollItemToViewOnClick = true;\n        this.$align = \"left\" /* Left */;\n        this.$verticalAlign = 0 /* Top */;\n        this.$container = new createjs.Container();\n        this.$rootContainer.addChild(this.$container);\n        this.$container.cursor = 'pointer';\n    }\n    get childrenRenderOrder() {\n        return this.$childrenRenderOrder;\n    }\n    set childrenRenderOrder(value) {\n        if (this.$childrenRenderOrder != value) {\n            this.$childrenRenderOrder = value;\n            this.appendChildrenList();\n        }\n    }\n    get apexIndex() {\n        return this.$apexIndex;\n    }\n    set apexIndex(value) {\n        if (this.$apexIndex != value) {\n            this.$apexIndex = value;\n            if (this.$childrenRenderOrder == 2 /* Arch */)\n                this.appendChildrenList();\n        }\n    }\n    /**@override */\n    appendChildrenList() {\n        const cnt = this.$children.length;\n        if (cnt == 0)\n            return;\n        let i;\n        let child;\n        switch (this.$childrenRenderOrder) {\n            case 0 /* Ascent */:\n                {\n                    for (i = 0; i < cnt; i++) {\n                        child = this.$children[i];\n                        if (child.displayObject != null && child.finalVisible)\n                            this.$container.addChild(child.displayObject);\n                    }\n                }\n                break;\n            case 1 /* Descent */:\n                {\n                    for (i = cnt - 1; i >= 0; i--) {\n                        child = this.$children[i];\n                        if (child.displayObject != null && child.finalVisible)\n                            this.$container.addChild(child.displayObject);\n                    }\n                }\n                break;\n            case 2 /* Arch */:\n                {\n                    for (i = 0; i < this.$apexIndex; i++) {\n                        child = this.$children[i];\n                        if (child.displayObject != null && child.finalVisible)\n                            this.$container.addChild(child.displayObject);\n                    }\n                    for (i = cnt - 1; i >= this.$apexIndex; i--) {\n                        child = this.$children[i];\n                        if (child.displayObject != null && child.finalVisible)\n                            this.$container.addChild(child.displayObject);\n                    }\n                }\n                break;\n        }\n    }\n    /**@override */\n    setXY(xv, yv) {\n        if (this.$x != xv || this.$y != yv) {\n            this.$x = xv;\n            this.$y = yv;\n            this.handleXYChanged();\n            this.updateGear(1 /* XY */);\n            if (GObject.draggingObject == this && !GObject.sUpdatingWhileDragging)\n                this.localToGlobalRect(0, 0, this.width, this.height, GObject.sGlobalRect);\n        }\n    }\n    /**@override */\n    $setChildIndex(child, oldIndex, index = 0) {\n        let cnt = this.$children.length;\n        if (index > cnt)\n            index = cnt;\n        if (oldIndex == index)\n            return oldIndex;\n        this.$children.splice(oldIndex, 1);\n        this.$children.splice(index, 0, child);\n        if (child.inContainer) {\n            let displayIndex = 0;\n            let g;\n            let i;\n            if (this.$childrenRenderOrder == 0 /* Ascent */) {\n                for (i = 0; i < index; i++) {\n                    g = this.$children[i];\n                    if (g.inContainer)\n                        displayIndex++;\n                }\n                if (displayIndex == this.$container.children.length)\n                    displayIndex--;\n                this.$container.setChildIndex(child.displayObject, displayIndex);\n            }\n            else if (this.$childrenRenderOrder == 1 /* Descent */) {\n                for (i = cnt - 1; i > index; i--) {\n                    g = this.$children[i];\n                    if (g.inContainer)\n                        displayIndex++;\n                }\n                if (displayIndex == this.$container.children.length)\n                    displayIndex--;\n                this.$container.setChildIndex(child.displayObject, displayIndex);\n            }\n            else\n                GTimer.inst.callLater(this.appendChildrenList, this);\n            this.setBoundsChangedFlag();\n        }\n        return index;\n    }\n    /**@override */\n    childStateChanged(child) {\n        if (this.$buildingDisplayList)\n            return;\n        if (child instanceof GGroup) {\n            this.$children.forEach(g => {\n                if (g.group == child)\n                    this.childStateChanged(g);\n            }, this);\n            return;\n        }\n        if (!child.displayObject)\n            return;\n        if (child.finalVisible) {\n            let i, g;\n            let cnt = this.$children.length;\n            if (!child.displayObject.parent) {\n                let index = 0;\n                if (this.$childrenRenderOrder == 0 /* Ascent */) {\n                    for (let i = 0; i < cnt; i++) {\n                        g = this.$children[i];\n                        if (g == child)\n                            break;\n                        if (g.displayObject != null && g.displayObject.parent != null)\n                            index++;\n                    }\n                    this.$container.addChildAt(child.displayObject, index);\n                }\n                else if (this.$childrenRenderOrder == 1 /* Descent */) {\n                    for (i = cnt - 1; i >= 0; i--) {\n                        g = this.$children[i];\n                        if (g == child)\n                            break;\n                        if (g.displayObject != null && g.displayObject.parent != null)\n                            index++;\n                    }\n                    this.$container.addChildAt(child.displayObject, index);\n                }\n                else {\n                    this.$container.addChild(child.displayObject);\n                    GTimer.inst.callLater(this.appendChildrenList, this);\n                }\n            }\n        }\n        else {\n            if (child.displayObject.parent)\n                this.$container.removeChild(child.displayObject);\n        }\n    }\n    dispose() {\n        GTimer.inst.remove(this.$refreshVirtualList, this);\n        this.$pool.clear();\n        if (this.$scrollPane)\n            this.$scrollPane.off(\"__scroll\" /* SCROLL */, this.$scrolled);\n        super.dispose();\n    }\n    get layout() {\n        return this.$layout;\n    }\n    set layout(value) {\n        if (this.$layout != value) {\n            this.$layout = value;\n            this.setBoundsChangedFlag();\n            if (this.$virtual)\n                this.setVirtualListChangedFlag(true);\n        }\n    }\n    get lineCount() {\n        return this.$lineCount;\n    }\n    set lineCount(value) {\n        if (this.$lineCount != value) {\n            this.$lineCount = value;\n            if (this.$layout == 3 /* FlowVertical */ ||\n                this.$layout == 4 /* Pagination */) {\n                this.setBoundsChangedFlag();\n                if (this.$virtual)\n                    this.setVirtualListChangedFlag(true);\n            }\n        }\n    }\n    get columnCount() {\n        return this.$columnCount;\n    }\n    set columnCount(value) {\n        if (this.$columnCount != value) {\n            this.$columnCount = value;\n            if (this.$layout == 2 /* FlowHorizontal */ ||\n                this.$layout == 4 /* Pagination */) {\n                this.setBoundsChangedFlag();\n                if (this.$virtual)\n                    this.setVirtualListChangedFlag(true);\n            }\n        }\n    }\n    get lineGap() {\n        return this.$lineGap;\n    }\n    set lineGap(value) {\n        if (this.$lineGap != value) {\n            this.$lineGap = value;\n            this.setBoundsChangedFlag();\n            if (this.$virtual)\n                this.setVirtualListChangedFlag(true);\n        }\n    }\n    get columnGap() {\n        return this.$columnGap;\n    }\n    set columnGap(value) {\n        if (this.$columnGap != value) {\n            this.$columnGap = value;\n            this.setBoundsChangedFlag();\n            if (this.$virtual)\n                this.setVirtualListChangedFlag(true);\n        }\n    }\n    get align() {\n        return this.$align;\n    }\n    set align(value) {\n        if (this.$align != value) {\n            this.$align = value;\n            this.setBoundsChangedFlag();\n            if (this.$virtual)\n                this.setVirtualListChangedFlag(true);\n        }\n    }\n    get verticalAlign() {\n        return this.$verticalAlign;\n    }\n    set verticalAlign(value) {\n        if (this.$verticalAlign != value) {\n            this.$verticalAlign = value;\n            this.setBoundsChangedFlag();\n            if (this.$virtual)\n                this.setVirtualListChangedFlag(true);\n        }\n    }\n    get virtualItemSize() {\n        return this.$itemSize;\n    }\n    set virtualItemSize(value) {\n        if (this.$virtual) {\n            if (this.$itemSize == null)\n                this.$itemSize = new createjs.Point();\n            this.$itemSize.copy(value);\n            this.setVirtualListChangedFlag(true);\n        }\n    }\n    get defaultItem() {\n        return this.$defaultItem;\n    }\n    set defaultItem(val) {\n        this.$defaultItem = val;\n    }\n    get autoResizeItem() {\n        return this.$autoResizeItem;\n    }\n    set autoResizeItem(value) {\n        if (this.$autoResizeItem != value) {\n            this.$autoResizeItem = value;\n            this.setBoundsChangedFlag();\n            if (this.$virtual)\n                this.setVirtualListChangedFlag(true);\n        }\n    }\n    get selectionMode() {\n        return this.$selectionMode;\n    }\n    set selectionMode(value) {\n        this.$selectionMode = value;\n    }\n    get selectionController() {\n        return this.$selectionController;\n    }\n    set selectionController(value) {\n        this.$selectionController = value;\n    }\n    get itemPool() {\n        return this.$pool;\n    }\n    getFromPool(url = null) {\n        if (!url)\n            url = this.$defaultItem;\n        let obj = this.$pool.get(url);\n        if (obj != null)\n            obj.visible = true;\n        return obj;\n    }\n    returnToPool(obj) {\n        this.$pool.recycle(obj.resourceURL, obj);\n    }\n    addChildAt(child, index = 0) {\n        super.addChildAt(child, index);\n        if (child instanceof GButton) {\n            child.selected = false;\n            child.changeStateOnClick = false;\n        }\n        child.click(this.$clickItem, this);\n        return child;\n    }\n    addItem(url = null) {\n        if (!url)\n            url = this.$defaultItem;\n        return this.addChild(UIPackage.createObjectFromURL(url));\n    }\n    addItemFromPool(url = null) {\n        return this.addChild(this.getFromPool(url));\n    }\n    removeChildAt(index, dispose = false) {\n        if (index >= 0 && index < this.numChildren) {\n            let child = this.$children[index];\n            child.parent = null;\n            if (child.sortingOrder != 0)\n                this.$sortingChildCount--;\n            this.$children.splice(index, 1);\n            if (child.inContainer) {\n                this.$container.removeChild(child.displayObject);\n                if (this.$childrenRenderOrder == 2 /* Arch */)\n                    GTimer.inst.callLater(this.appendChildrenList, this);\n            }\n            if (dispose === true)\n                child.dispose();\n            this.setBoundsChangedFlag();\n            child.removeClick(this.$clickItem);\n            return child;\n        }\n        else\n            throw new Error('Invalid child index');\n    }\n    removeChildToPoolAt(index) {\n        let child = this.removeChildAt(index);\n        this.returnToPool(child);\n    }\n    removeChildToPool(child) {\n        super.removeChild(child);\n        this.returnToPool(child);\n    }\n    removeChildrenToPool(beginIndex = 0, endIndex = -1) {\n        if (endIndex < 0 || endIndex >= this.$children.length)\n            endIndex = this.$children.length - 1;\n        for (let i = beginIndex; i <= endIndex; ++i)\n            this.removeChildToPoolAt(beginIndex);\n    }\n    get selectedIndex() {\n        let i;\n        if (this.$virtual) {\n            for (i = 0; i < this.$realNumItems; i++) {\n                const ii = this.$virtualItems[i];\n                if ((ii.obj instanceof GButton && ii.obj.selected) || (ii.obj == null && ii.selected)) {\n                    if (this.$loop)\n                        return i % this.$numItems;\n                    else\n                        return i;\n                }\n            }\n        }\n        else {\n            const cnt = this.$children.length;\n            for (i = 0; i < cnt; i++) {\n                const obj = this.$children[i];\n                if (obj != null && obj.selected)\n                    return i;\n            }\n        }\n        return -1;\n    }\n    set selectedIndex(value) {\n        if (value >= 0 && value < this.numItems) {\n            if (this.selectionMode != 0 /* Single */)\n                this.clearSelection();\n            this.addSelection(value);\n        }\n        else\n            this.clearSelection();\n    }\n    getSelection() {\n        let ret = [];\n        let i;\n        if (this.$virtual) {\n            for (i = 0; i < this.$realNumItems; i++) {\n                const ii = this.$virtualItems[i];\n                if ((ii.obj instanceof GButton && ii.obj.selected) || (ii.obj == null && ii.selected)) {\n                    let j = i;\n                    if (this.$loop) {\n                        j = i % this.$numItems;\n                        if (ret.indexOf(j) != -1)\n                            continue;\n                    }\n                    ret.push(j);\n                }\n            }\n        }\n        else {\n            const cnt = this.$children.length;\n            for (i = 0; i < cnt; i++) {\n                const obj = this.$children[i];\n                if (obj != null && obj.selected)\n                    ret.push(i);\n            }\n        }\n        return ret;\n    }\n    addSelection(index, scrollIntoView = false) {\n        if (this.$selectionMode == 3 /* None */)\n            return;\n        this.checkVirtualList();\n        if (this.$selectionMode == 0 /* Single */)\n            this.clearSelection();\n        if (scrollIntoView)\n            this.scrollToView(index);\n        this.$lastSelectedIndex = index;\n        let obj = null;\n        if (this.$virtual) {\n            const ii = this.$virtualItems[index];\n            if (ii.obj != null)\n                obj = ii.obj;\n            ii.selected = true;\n        }\n        else\n            obj = this.getChildAt(index);\n        if (obj != null && !obj.selected) {\n            obj.selected = true;\n            this.updateSelectionController(index);\n        }\n    }\n    removeSelection(index) {\n        if (this.$selectionMode == 3 /* None */)\n            return;\n        let obj = null;\n        if (this.$virtual) {\n            const ii = this.$virtualItems[index];\n            if (ii.obj != null)\n                obj = ii.obj;\n            ii.selected = false;\n        }\n        else\n            obj = this.getChildAt(index);\n        if (obj != null)\n            obj.selected = false;\n    }\n    clearSelection() {\n        let i;\n        if (this.$virtual) {\n            for (i = 0; i < this.$realNumItems; i++) {\n                const ii = this.$virtualItems[i];\n                if (ii.obj instanceof GButton)\n                    ii.obj.selected = false;\n                ii.selected = false;\n            }\n        }\n        else {\n            const cnt = this.$children.length;\n            for (i = 0; i < cnt; i++) {\n                const obj = this.$children[i];\n                if (obj != null)\n                    obj.selected = false;\n            }\n        }\n    }\n    clearSelectionExcept(g) {\n        let i;\n        if (this.$virtual) {\n            for (i = 0; i < this.$realNumItems; i++) {\n                const ii = this.$virtualItems[i];\n                if (ii.obj != g) {\n                    if (ii.obj instanceof GButton)\n                        ii.obj.selected = false;\n                    ii.selected = false;\n                }\n            }\n        }\n        else {\n            const cnt = this.$children.length;\n            for (i = 0; i < cnt; i++) {\n                const obj = this.$children[i];\n                if (obj != null && obj != g)\n                    obj.selected = false;\n            }\n        }\n    }\n    selectAll() {\n        this.checkVirtualList();\n        let last = -1;\n        let i;\n        if (this.$virtual) {\n            for (i = 0; i < this.$realNumItems; i++) {\n                const ii = this.$virtualItems[i];\n                if (ii.obj instanceof GButton && !ii.obj.selected) {\n                    ii.obj.selected = true;\n                    last = i;\n                }\n                ii.selected = true;\n            }\n        }\n        else {\n            const cnt = this.$children.length;\n            for (i = 0; i < cnt; i++) {\n                const obj = this.$children[i];\n                if (obj != null && !obj.selected) {\n                    obj.selected = true;\n                    last = i;\n                }\n            }\n        }\n        if (last != -1)\n            this.updateSelectionController(last);\n    }\n    selectNone() {\n        this.clearSelection();\n    }\n    selectReverse() {\n        this.checkVirtualList();\n        let last = -1;\n        let i;\n        if (this.$virtual) {\n            for (i = 0; i < this.$realNumItems; i++) {\n                const ii = this.$virtualItems[i];\n                if (ii.obj instanceof GButton) {\n                    ii.obj.selected = !ii.obj.selected;\n                    if (ii.obj.selected)\n                        last = i;\n                }\n                ii.selected = !ii.selected;\n            }\n        }\n        else {\n            const cnt = this.$children.length;\n            for (i = 0; i < cnt; i++) {\n                const obj = this.$children[i];\n                if (obj != null) {\n                    obj.selected = !obj.selected;\n                    if (obj.selected)\n                        last = i;\n                }\n            }\n        }\n        if (last != -1)\n            this.updateSelectionController(last);\n    }\n    handleArrowKey(key) {\n        let index = this.selectedIndex;\n        if (index == -1)\n            return;\n        let current;\n        let k, i;\n        let obj;\n        switch (key) {\n            case 38 /* Up */:\n                if (this.$layout == 0 /* SingleColumn */ ||\n                    this.$layout == 3 /* FlowVertical */) {\n                    index--;\n                    if (index >= 0) {\n                        this.clearSelection();\n                        this.addSelection(index, true);\n                    }\n                }\n                else if (this.$layout == 2 /* FlowHorizontal */ ||\n                    this.$layout == 4 /* Pagination */) {\n                    current = this.$children[index];\n                    k = 0;\n                    for (i = index - 1; i >= 0; i--) {\n                        obj = this.$children[i];\n                        if (obj.y != current.y) {\n                            current = obj;\n                            break;\n                        }\n                        k++;\n                    }\n                    for (; i >= 0; i--) {\n                        obj = this.$children[i];\n                        if (obj.y != current.y) {\n                            this.clearSelection();\n                            this.addSelection(i + k + 1, true);\n                            break;\n                        }\n                    }\n                }\n                break;\n            case 39 /* Right */:\n                if (this.$layout == 1 /* SingleRow */ ||\n                    this.$layout == 2 /* FlowHorizontal */ ||\n                    this.$layout == 4 /* Pagination */) {\n                    index++;\n                    if (index < this.$children.length) {\n                        this.clearSelection();\n                        this.addSelection(index, true);\n                    }\n                }\n                else if (this.$layout == 3 /* FlowVertical */) {\n                    current = this.$children[index];\n                    k = 0;\n                    const cnt = this.$children.length;\n                    for (i = index + 1; i < cnt; i++) {\n                        obj = this.$children[i];\n                        if (obj.x != current.x) {\n                            current = obj;\n                            break;\n                        }\n                        k++;\n                    }\n                    for (; i < cnt; i++) {\n                        obj = this.$children[i];\n                        if (obj.x != current.x) {\n                            this.clearSelection();\n                            this.addSelection(i - k - 1, true);\n                            break;\n                        }\n                    }\n                }\n                break;\n            case 40 /* Down */:\n                if (this.$layout == 0 /* SingleColumn */ ||\n                    this.$layout == 3 /* FlowVertical */) {\n                    index++;\n                    if (index < this.$children.length) {\n                        this.clearSelection();\n                        this.addSelection(index, true);\n                    }\n                }\n                else if (this.$layout == 2 /* FlowHorizontal */ ||\n                    this.$layout == 4 /* Pagination */) {\n                    current = this.$children[index];\n                    k = 0;\n                    const cnt = this.$children.length;\n                    for (i = index + 1; i < cnt; i++) {\n                        obj = this.$children[i];\n                        if (obj.y != current.y) {\n                            current = obj;\n                            break;\n                        }\n                        k++;\n                    }\n                    for (; i < cnt; i++) {\n                        obj = this.$children[i];\n                        if (obj.y != current.y) {\n                            this.clearSelection();\n                            this.addSelection(i - k - 1, true);\n                            break;\n                        }\n                    }\n                }\n                break;\n            case 37 /* Left */:\n                if (this.$layout == 1 /* SingleRow */ ||\n                    this.$layout == 2 /* FlowHorizontal */ ||\n                    this.$layout == 4 /* Pagination */) {\n                    index--;\n                    if (index >= 0) {\n                        this.clearSelection();\n                        this.addSelection(index, true);\n                    }\n                }\n                else if (this.$layout == 3 /* FlowVertical */) {\n                    current = this.$children[index];\n                    k = 0;\n                    for (i = index - 1; i >= 0; i--) {\n                        obj = this.$children[i];\n                        if (obj.x != current.x) {\n                            current = obj;\n                            break;\n                        }\n                        k++;\n                    }\n                    for (; i >= 0; i--) {\n                        obj = this.$children[i];\n                        if (obj.x != current.x) {\n                            this.clearSelection();\n                            this.addSelection(i + k + 1, true);\n                            break;\n                        }\n                    }\n                }\n                break;\n        }\n    }\n    $clickItem(evt) {\n        if (this.$scrollPane != null && this.$scrollPane.isDragging)\n            return;\n        const item = GObject.castFromNativeObject(evt.currentTarget);\n        if (!item)\n            return;\n        this.setSelectionOnEvent(item);\n        if (this.$scrollPane && this.scrollItemToViewOnClick)\n            this.$scrollPane.scrollToView(item, true);\n        let event = new createjs.Event(\"__itemClick\" /* ItemClick */, true, false);\n        event.data = { item };\n        this.dispatchEvent(event, this);\n    }\n    setSelectionOnEvent(button) {\n        if (!(button instanceof GButton) || this.$selectionMode == 3 /* None */)\n            return;\n        let dontChangeLastIndex = false;\n        let index = this.childIndexToItemIndex(this.getChildIndex(button));\n        if (this.$selectionMode == 0 /* Single */) {\n            if (!button.selected) {\n                this.clearSelectionExcept(button);\n                button.selected = true;\n            }\n        }\n        else {\n            if (DOMEventManager.inst.isKeyPressed(16 /* Shift */)) {\n                if (!button.selected) {\n                    if (this.$lastSelectedIndex != -1) {\n                        const min = Math.min(this.$lastSelectedIndex, index);\n                        const max = Math.min(Math.max(this.$lastSelectedIndex, index), this.numItems - 1);\n                        let i;\n                        if (this.$virtual) {\n                            for (i = min; i <= max; i++) {\n                                const ii = this.$virtualItems[i];\n                                if (ii.obj instanceof GButton)\n                                    ii.obj.selected = true;\n                                ii.selected = true;\n                            }\n                        }\n                        else {\n                            for (i = min; i <= max; i++) {\n                                const obj = this.getChildAt(i);\n                                if (obj != null)\n                                    obj.selected = true;\n                            }\n                        }\n                        dontChangeLastIndex = true;\n                    }\n                    else\n                        button.selected = true;\n                }\n            }\n            else if (DOMEventManager.inst.isKeyPressed(17 /* Ctrl */) ||\n                this.$selectionMode == 2 /* Multiple_SingleClick */)\n                button.selected = !button.selected;\n            else {\n                if (!button.selected) {\n                    this.clearSelectionExcept(button);\n                    button.selected = true;\n                }\n                else\n                    this.clearSelectionExcept(button);\n            }\n        }\n        if (!dontChangeLastIndex)\n            this.$lastSelectedIndex = index;\n        if (button.selected)\n            this.updateSelectionController(index);\n    }\n    resizeToFit(itemCount = 1000000, minSize = 0) {\n        this.ensureBoundsCorrect();\n        const curCount = this.numItems;\n        if (itemCount > curCount)\n            itemCount = curCount;\n        if (this.$virtual) {\n            const lineCount = Math.ceil(itemCount / this.$curLineItemCount);\n            if (this.$layout == 0 /* SingleColumn */ ||\n                this.$layout == 2 /* FlowHorizontal */)\n                this.viewHeight = lineCount * this.$itemSize.y + Math.max(0, lineCount - 1) * this.$lineGap;\n            else\n                this.viewWidth = lineCount * this.$itemSize.x + Math.max(0, lineCount - 1) * this.$columnGap;\n        }\n        else if (itemCount == 0) {\n            if (this.$layout == 0 /* SingleColumn */ ||\n                this.$layout == 2 /* FlowHorizontal */)\n                this.viewHeight = minSize;\n            else\n                this.viewWidth = minSize;\n        }\n        else {\n            let i = itemCount - 1;\n            let obj;\n            while (i >= 0) {\n                obj = this.getChildAt(i);\n                if (!this.foldInvisibleItems || obj.visible)\n                    break;\n                i--;\n            }\n            if (i < 0) {\n                if (this.$layout == 0 /* SingleColumn */ ||\n                    this.$layout == 2 /* FlowHorizontal */)\n                    this.viewHeight = minSize;\n                else\n                    this.viewWidth = minSize;\n            }\n            else {\n                let size = 0;\n                if (this.$layout == 0 /* SingleColumn */ ||\n                    this.$layout == 2 /* FlowHorizontal */) {\n                    size = obj.y + obj.height;\n                    if (size < minSize)\n                        size = minSize;\n                    this.viewHeight = size;\n                }\n                else {\n                    size = obj.x + obj.width;\n                    if (size < minSize)\n                        size = minSize;\n                    this.viewWidth = size;\n                }\n            }\n        }\n    }\n    getMaxItemWidth() {\n        const cnt = this.$children.length;\n        let max = 0;\n        for (let i = 0; i < cnt; i++) {\n            const child = this.getChildAt(i);\n            if (child.width > max)\n                max = child.width;\n        }\n        return max;\n    }\n    handleSizeChanged() {\n        super.handleSizeChanged();\n        this.setBoundsChangedFlag();\n        if (this.$virtual)\n            this.setVirtualListChangedFlag(true);\n    }\n    handleControllerChanged(c) {\n        super.handleControllerChanged(c);\n        if (this.$selectionController == c)\n            this.selectedIndex = c.selectedIndex;\n    }\n    updateSelectionController(index) {\n        if (this.$selectionController != null &&\n            !this.$selectionController.$updating &&\n            index < this.selectionController.pageCount) {\n            const c = this.$selectionController;\n            this.$selectionController = null;\n            c.selectedIndex = index;\n            this.$selectionController = c;\n        }\n    }\n    getSnappingPosition(xValue, yValue, resultPoint = null) {\n        if (this.$virtual) {\n            if (!resultPoint)\n                resultPoint = new createjs.Point();\n            let saved;\n            let index;\n            if (this.$layout == 0 /* SingleColumn */ ||\n                this.$layout == 2 /* FlowHorizontal */) {\n                saved = yValue;\n                GList.$lastPosHelper = yValue;\n                index = this.getIndexOnPos1(false);\n                yValue = GList.$lastPosHelper;\n                if (index < this.$virtualItems.length &&\n                    saved - yValue > this.$virtualItems[index].height / 2 &&\n                    index < this.$realNumItems)\n                    yValue += this.$virtualItems[index].height + this.$lineGap;\n            }\n            else if (this.$layout == 1 /* SingleRow */ ||\n                this.$layout == 3 /* FlowVertical */) {\n                saved = xValue;\n                GList.$lastPosHelper = xValue;\n                index = this.getIndexOnPos2(false);\n                xValue = GList.$lastPosHelper;\n                if (index < this.$virtualItems.length &&\n                    saved - xValue > this.$virtualItems[index].width / 2 &&\n                    index < this.$realNumItems)\n                    xValue += this.$virtualItems[index].width + this.$columnGap;\n            }\n            else {\n                saved = xValue;\n                GList.$lastPosHelper = xValue;\n                index = this.getIndexOnPos3(false);\n                xValue = GList.$lastPosHelper;\n                if (index < this.$virtualItems.length &&\n                    saved - xValue > this.$virtualItems[index].width / 2 &&\n                    index < this.$realNumItems)\n                    xValue += this.$virtualItems[index].width + this.$columnGap;\n            }\n            resultPoint.x = xValue;\n            resultPoint.y = yValue;\n            return resultPoint;\n        }\n        else\n            return super.getSnappingPosition(xValue, yValue, resultPoint);\n    }\n    scrollToView(index, ani = false, snapToFirst = false) {\n        if (this.$virtual) {\n            if (this.$numItems == 0)\n                return;\n            this.checkVirtualList();\n            if (index >= this.$virtualItems.length)\n                throw new Error(`Invalid child index: ${index} is larger than max length: ${this.$virtualItems.length}`);\n            if (this.$loop)\n                index = Math.floor(this.$firstIndex / this.$numItems) * this.$numItems + index;\n            let rect;\n            const ii = this.$virtualItems[index];\n            let pos = 0;\n            let i;\n            if (this.$layout == 0 /* SingleColumn */ ||\n                this.$layout == 2 /* FlowHorizontal */) {\n                for (i = 0; i < index; i += this.$curLineItemCount)\n                    pos += this.$virtualItems[i].height + this.$lineGap;\n                rect = new createjs.Rectangle(0, pos, this.$itemSize.x, ii.height);\n            }\n            else if (this.$layout == 1 /* SingleRow */ ||\n                this.$layout == 3 /* FlowVertical */) {\n                for (i = 0; i < index; i += this.$curLineItemCount)\n                    pos += this.$virtualItems[i].width + this.$columnGap;\n                rect = new createjs.Rectangle(pos, 0, ii.width, this.$itemSize.y);\n            }\n            else {\n                const page = index / (this.$curLineItemCount * this.$curLineItemCount2);\n                rect = new createjs.Rectangle(page * this.viewWidth + (index % this.$curLineItemCount) * (ii.width + this.$columnGap), ((index / this.$curLineItemCount) % this.$curLineItemCount2) *\n                    (ii.height + this.$lineGap), ii.width, ii.height);\n            }\n            //the position will be also changed if the height of its parent (if changeable) is being changed, so here we need to forcely set this to true\n            snapToFirst = true;\n            if (this.$scrollPane != null)\n                this.$scrollPane.scrollToView(rect, ani, snapToFirst);\n        }\n        else {\n            const obj = this.getChildAt(index);\n            if (this.$scrollPane != null)\n                this.$scrollPane.scrollToView(obj, ani, snapToFirst);\n            else if (this.parent != null && this.parent.scrollPane != null)\n                this.parent.scrollPane.scrollToView(obj, ani, snapToFirst);\n        }\n    }\n    getFirstChildInView() {\n        return this.childIndexToItemIndex(super.getFirstChildInView());\n    }\n    childIndexToItemIndex(index) {\n        if (!this.$virtual)\n            return index;\n        if (this.$layout == 4 /* Pagination */) {\n            for (let i = this.$firstIndex; i < this.$realNumItems; i++) {\n                if (this.$virtualItems[i].obj != null) {\n                    index--;\n                    if (index < 0)\n                        return i;\n                }\n            }\n            return index;\n        }\n        else {\n            index += this.$firstIndex;\n            if (this.$loop && this.$numItems > 0)\n                index = index % this.$numItems;\n            return index;\n        }\n    }\n    itemIndexToChildIndex(index) {\n        if (!this.$virtual)\n            return index;\n        if (this.$layout == 4 /* Pagination */)\n            return this.getChildIndex(this.$virtualItems[index].obj);\n        else {\n            if (this.$loop && this.$numItems > 0) {\n                const j = this.$firstIndex % this.$numItems;\n                if (index >= j)\n                    index = this.$firstIndex + (index - j);\n                else\n                    index = this.$firstIndex + this.$numItems + (j - index);\n            }\n            else\n                index -= this.$firstIndex;\n            return index;\n        }\n    }\n    setVirtual() {\n        this.$setVirtual(false);\n    }\n    setVirtualAndLoop() {\n        this.$setVirtual(true);\n    }\n    $setVirtual(loop) {\n        if (!this.$virtual) {\n            if (this.$scrollPane == null)\n                throw new Error('Virtual list must be scrollable');\n            if (loop) {\n                if (this.$layout == 2 /* FlowHorizontal */ ||\n                    this.$layout == 3 /* FlowVertical */)\n                    throw new Error('Virtual list with loop mode is not supported for both FlowHorizontal and FlowVertical layout');\n                this.$scrollPane.bouncebackEffect = false;\n            }\n            this.$virtual = true;\n            this.$loop = loop;\n            this.$virtualItems = [];\n            this.removeChildrenToPool();\n            if (this.$itemSize == null) {\n                this.$itemSize = new createjs.Point();\n                const obj = this.getFromPool(null);\n                if (obj == null)\n                    throw new Error('Virtual list must have a default list item resource specified through list.defaultItem = resUrl.');\n                else {\n                    this.$itemSize.x = obj.width;\n                    this.$itemSize.y = obj.height;\n                }\n                this.returnToPool(obj);\n            }\n            if (this.$layout == 0 /* SingleColumn */ ||\n                this.$layout == 2 /* FlowHorizontal */) {\n                this.$scrollPane.scrollSpeed = this.$itemSize.y;\n                if (this.$loop)\n                    this.$scrollPane.$loop = 2;\n            }\n            else {\n                this.$scrollPane.scrollSpeed = this.$itemSize.x;\n                if (this.$loop)\n                    this.$scrollPane.$loop = 1;\n            }\n            this.$scrollPane.on(\"__scroll\" /* SCROLL */, this.$scrolled, this);\n            this.setVirtualListChangedFlag(true);\n        }\n    }\n    get numItems() {\n        if (this.$virtual)\n            return this.$numItems;\n        else\n            return this.$children.length;\n    }\n    set numItems(value) {\n        let i;\n        if (this.$virtual) {\n            if (this.itemRenderer == null)\n                throw new Error('list.itemRenderer is required');\n            this.$numItems = value;\n            if (this.$loop)\n                this.$realNumItems = this.$numItems * 6;\n            //enlarge for loop\n            else\n                this.$realNumItems = this.$numItems;\n            //increase only\n            const oldCount = this.$virtualItems.length;\n            if (this.$realNumItems > oldCount) {\n                for (i = oldCount; i < this.$realNumItems; i++) {\n                    let ii = new ItemInfo();\n                    ii.width = this.$itemSize.x;\n                    ii.height = this.$itemSize.y;\n                    this.$virtualItems.push(ii);\n                }\n            }\n            else {\n                for (i = this.$realNumItems; i < oldCount; i++)\n                    this.$virtualItems[i].selected = false;\n            }\n            if (this.$virtualListChanged != 0 /* None */)\n                GTimer.inst.remove(this.$refreshVirtualList, this);\n            //refresh now\n            this.$refreshVirtualList();\n        }\n        else {\n            const cnt = this.$children.length;\n            if (value > cnt) {\n                for (i = cnt; i < value; i++) {\n                    if (this.itemProvider == null)\n                        this.addItemFromPool();\n                    else\n                        this.addItemFromPool(this.itemProvider(i));\n                }\n            }\n            else\n                this.removeChildrenToPool(value, cnt);\n            if (this.itemRenderer != null) {\n                for (i = 0; i < value; i++)\n                    this.itemRenderer(i, this.getChildAt(i));\n            }\n        }\n    }\n    refreshVirtualList() {\n        this.setVirtualListChangedFlag(false);\n    }\n    checkVirtualList() {\n        if (this.$virtualListChanged != 0 /* None */) {\n            this.$refreshVirtualList();\n            GTimer.inst.remove(this.$refreshVirtualList, this);\n        }\n    }\n    setVirtualListChangedFlag(layoutChanged = false) {\n        if (layoutChanged)\n            this.$virtualListChanged = 2 /* SizeChanged */;\n        else if (this.$virtualListChanged == 0 /* None */)\n            this.$virtualListChanged = 1 /* ContentChanged */;\n        GTimer.inst.callLater(this.$refreshVirtualList, this);\n    }\n    $refreshVirtualList() {\n        const layoutChanged = this.$virtualListChanged == 2 /* SizeChanged */;\n        this.$virtualListChanged = 0 /* None */;\n        this.$eventLocked = true;\n        if (layoutChanged) {\n            if (this.$layout == 0 /* SingleColumn */ || this.$layout == 1 /* SingleRow */)\n                this.$curLineItemCount = 1;\n            else if (this.$layout == 2 /* FlowHorizontal */) {\n                if (this.$columnCount > 0)\n                    this.$curLineItemCount = this.$columnCount;\n                else {\n                    this.$curLineItemCount = Math.floor((this.$scrollPane.viewWidth + this.$columnGap) / (this.$itemSize.x + this.$columnGap));\n                    if (this.$curLineItemCount <= 0)\n                        this.$curLineItemCount = 1;\n                }\n            }\n            else if (this.$layout == 3 /* FlowVertical */) {\n                if (this.$lineCount > 0)\n                    this.$curLineItemCount = this.$lineCount;\n                else {\n                    this.$curLineItemCount = Math.floor((this.$scrollPane.viewHeight + this.$lineGap) / (this.$itemSize.y + this.$lineGap));\n                    if (this.$curLineItemCount <= 0)\n                        this.$curLineItemCount = 1;\n                }\n            } //pagination\n            else {\n                if (this.$columnCount > 0)\n                    this.$curLineItemCount = this.$columnCount;\n                else {\n                    this.$curLineItemCount = Math.floor((this.$scrollPane.viewWidth + this.$columnGap) / (this.$itemSize.x + this.$columnGap));\n                    if (this.$curLineItemCount <= 0)\n                        this.$curLineItemCount = 1;\n                }\n                if (this.$lineCount > 0)\n                    this.$curLineItemCount2 = this.$lineCount;\n                else {\n                    this.$curLineItemCount2 = Math.floor((this.$scrollPane.viewHeight + this.$lineGap) / (this.$itemSize.y + this.$lineGap));\n                    if (this.$curLineItemCount2 <= 0)\n                        this.$curLineItemCount2 = 1;\n                }\n            }\n        }\n        let ch = 0, cw = 0;\n        if (this.$realNumItems > 0) {\n            let i;\n            let len = Math.ceil(this.$realNumItems / this.$curLineItemCount) * this.$curLineItemCount;\n            let len2 = Math.min(this.$curLineItemCount, this.$realNumItems);\n            if (this.$layout == 0 /* SingleColumn */ ||\n                this.$layout == 2 /* FlowHorizontal */) {\n                for (i = 0; i < len; i += this.$curLineItemCount)\n                    ch += this.$virtualItems[i].height + this.$lineGap;\n                if (ch > 0)\n                    ch -= this.$lineGap;\n                if (this.$autoResizeItem)\n                    cw = this.$scrollPane.viewWidth;\n                else {\n                    for (i = 0; i < len2; i++)\n                        cw += this.$virtualItems[i].width + this.$columnGap;\n                    if (cw > 0)\n                        cw -= this.$columnGap;\n                }\n            }\n            else if (this.$layout == 1 /* SingleRow */ ||\n                this.$layout == 3 /* FlowVertical */) {\n                for (i = 0; i < len; i += this.$curLineItemCount)\n                    cw += this.$virtualItems[i].width + this.$columnGap;\n                if (cw > 0)\n                    cw -= this.$columnGap;\n                if (this.$autoResizeItem)\n                    ch = this.$scrollPane.viewHeight;\n                else {\n                    for (i = 0; i < len2; i++)\n                        ch += this.$virtualItems[i].height + this.$lineGap;\n                    if (ch > 0)\n                        ch -= this.$lineGap;\n                }\n            }\n            else {\n                const pageCount = Math.ceil(len / (this.$curLineItemCount * this.$curLineItemCount2));\n                cw = pageCount * this.viewWidth;\n                ch = this.viewHeight;\n            }\n        }\n        this.handleAlign(cw, ch);\n        this.$scrollPane.setContentSize(cw, ch);\n        this.$eventLocked = false;\n        this.handleScroll(true);\n    }\n    $scrolled() {\n        this.handleScroll(false);\n    }\n    getIndexOnPos1(forceUpdate) {\n        if (this.$realNumItems < this.$curLineItemCount) {\n            GList.$lastPosHelper = 0;\n            return 0;\n        }\n        let i;\n        let pos2;\n        let pos3;\n        if (this.numChildren > 0 && !forceUpdate) {\n            pos2 = this.getChildAt(0).y;\n            if (pos2 > GList.$lastPosHelper) {\n                for (i = this.$firstIndex - this.$curLineItemCount; i >= 0; i -= this.$curLineItemCount) {\n                    pos2 -= this.$virtualItems[i].height + this.$lineGap;\n                    if (pos2 <= GList.$lastPosHelper) {\n                        GList.$lastPosHelper = pos2;\n                        return i;\n                    }\n                }\n                GList.$lastPosHelper = 0;\n                return 0;\n            }\n            else {\n                for (i = this.$firstIndex; i < this.$realNumItems; i += this.$curLineItemCount) {\n                    pos3 = pos2 + this.$virtualItems[i].height + this.$lineGap;\n                    if (pos3 > GList.$lastPosHelper) {\n                        GList.$lastPosHelper = pos2;\n                        return i;\n                    }\n                    pos2 = pos3;\n                }\n                GList.$lastPosHelper = pos2;\n                return this.$realNumItems - this.$curLineItemCount;\n            }\n        }\n        else {\n            pos2 = 0;\n            for (i = 0; i < this.$realNumItems; i += this.$curLineItemCount) {\n                pos3 = pos2 + this.$virtualItems[i].height + this.$lineGap;\n                if (pos3 > GList.$lastPosHelper) {\n                    GList.$lastPosHelper = pos2;\n                    return i;\n                }\n                pos2 = pos3;\n            }\n            GList.$lastPosHelper = pos2;\n            return this.$realNumItems - this.$curLineItemCount;\n        }\n    }\n    getIndexOnPos2(forceUpdate) {\n        if (this.$realNumItems < this.$curLineItemCount) {\n            GList.$lastPosHelper = 0;\n            return 0;\n        }\n        let i;\n        let pos2;\n        let pos3;\n        if (this.numChildren > 0 && !forceUpdate) {\n            pos2 = this.getChildAt(0).x;\n            if (pos2 > GList.$lastPosHelper) {\n                for (i = this.$firstIndex - this.$curLineItemCount; i >= 0; i -= this.$curLineItemCount) {\n                    pos2 -= this.$virtualItems[i].width + this.$columnGap;\n                    if (pos2 <= GList.$lastPosHelper) {\n                        GList.$lastPosHelper = pos2;\n                        return i;\n                    }\n                }\n                GList.$lastPosHelper = 0;\n                return 0;\n            }\n            else {\n                for (i = this.$firstIndex; i < this.$realNumItems; i += this.$curLineItemCount) {\n                    pos3 = pos2 + this.$virtualItems[i].width + this.$columnGap;\n                    if (pos3 > GList.$lastPosHelper) {\n                        GList.$lastPosHelper = pos2;\n                        return i;\n                    }\n                    pos2 = pos3;\n                }\n                GList.$lastPosHelper = pos2;\n                return this.$realNumItems - this.$curLineItemCount;\n            }\n        }\n        else {\n            pos2 = 0;\n            for (i = 0; i < this.$realNumItems; i += this.$curLineItemCount) {\n                pos3 = pos2 + this.$virtualItems[i].width + this.$columnGap;\n                if (pos3 > GList.$lastPosHelper) {\n                    GList.$lastPosHelper = pos2;\n                    return i;\n                }\n                pos2 = pos3;\n            }\n            GList.$lastPosHelper = pos2;\n            return this.$realNumItems - this.$curLineItemCount;\n        }\n    }\n    getIndexOnPos3(forceUpdate) {\n        if (this.$realNumItems < this.$curLineItemCount) {\n            GList.$lastPosHelper = 0;\n            return 0;\n        }\n        const viewWidth = this.viewWidth;\n        const page = Math.floor(GList.$lastPosHelper / viewWidth);\n        const startIndex = page * (this.$curLineItemCount * this.$curLineItemCount2);\n        let i;\n        let pos3;\n        let pos2 = page * viewWidth;\n        for (i = 0; i < this.$curLineItemCount; i++) {\n            pos3 = pos2 + this.$virtualItems[startIndex + i].width + this.$columnGap;\n            if (pos3 > GList.$lastPosHelper) {\n                GList.$lastPosHelper = pos2;\n                return startIndex + i;\n            }\n            pos2 = pos3;\n        }\n        GList.$lastPosHelper = pos2;\n        return startIndex + this.$curLineItemCount - 1;\n    }\n    handleScroll(forceUpdate) {\n        if (this.$eventLocked)\n            return;\n        this.$enterCounter = 0;\n        if (this.$layout == 0 /* SingleColumn */ ||\n            this.$layout == 2 /* FlowHorizontal */) {\n            this.handleScroll1(forceUpdate);\n            this.handleArchOrder1();\n        }\n        else if (this.$layout == 1 /* SingleRow */ ||\n            this.$layout == 3 /* FlowVertical */) {\n            this.handleScroll2(forceUpdate);\n            this.handleArchOrder2();\n        }\n        else\n            this.handleScroll3(forceUpdate);\n        this.$boundsChanged = false;\n    }\n    handleScroll1(forceUpdate) {\n        this.$enterCounter++;\n        if (this.$enterCounter > 3) {\n            console.warn('this list view cannot be filled full as the itemRenderer function always returns an item with different size.');\n            return;\n        }\n        let pos = this.$scrollPane.scrollingPosY;\n        let max = pos + this.$scrollPane.viewHeight;\n        const end = max == this.$scrollPane.contentHeight; //indicates we need to scroll to end in spite of content size changing\n        //find the first item from current pos\n        GList.$lastPosHelper = pos;\n        const newFirstIndex = this.getIndexOnPos1(forceUpdate);\n        if (newFirstIndex == this.$firstIndex && !forceUpdate)\n            return;\n        pos = GList.$lastPosHelper;\n        const oldFirstIndex = this.$firstIndex;\n        this.$firstIndex = newFirstIndex;\n        let curIndex = newFirstIndex;\n        const forward = oldFirstIndex > newFirstIndex;\n        const oldCount = this.numChildren;\n        const lastIndex = oldFirstIndex + oldCount - 1;\n        let reuseIndex = forward ? lastIndex : oldFirstIndex;\n        let curX = 0, curY = pos;\n        let needRender;\n        let deltaSize = 0;\n        let firstItemDeltaSize = 0;\n        let url = this.defaultItem;\n        let ii, ii2;\n        let i, j;\n        const partSize = (this.$scrollPane.viewWidth - this.$columnGap * (this.$curLineItemCount - 1)) /\n            this.$curLineItemCount;\n        this.$itemInfoVer++;\n        while (curIndex < this.$realNumItems && (end || curY < max)) {\n            ii = this.$virtualItems[curIndex];\n            if (ii.obj == null || forceUpdate) {\n                if (this.itemProvider != null) {\n                    url = this.itemProvider(curIndex % this.$numItems);\n                    if (url == null)\n                        url = this.$defaultItem;\n                    url = UIPackage.normalizeURL(url);\n                }\n                if (ii.obj != null && ii.obj.resourceURL != url) {\n                    if (ii.obj instanceof GButton)\n                        ii.selected = ii.obj.selected;\n                    this.removeChildToPool(ii.obj);\n                    ii.obj = null;\n                }\n            }\n            if (ii.obj == null) {\n                //search for a most suitable item to reuse in order to render or create less item when refresh\n                if (forward) {\n                    for (j = reuseIndex; j >= oldFirstIndex; j--) {\n                        ii2 = this.$virtualItems[j];\n                        if (ii2.obj != null &&\n                            ii2.updateFlag != this.$itemInfoVer &&\n                            ii2.obj.resourceURL == url) {\n                            if (ii2.obj instanceof GButton)\n                                ii2.selected = ii2.obj.selected;\n                            ii.obj = ii2.obj;\n                            ii2.obj = null;\n                            if (j == reuseIndex)\n                                reuseIndex--;\n                            break;\n                        }\n                    }\n                }\n                else {\n                    for (j = reuseIndex; j <= lastIndex; j++) {\n                        ii2 = this.$virtualItems[j];\n                        if (ii2.obj != null &&\n                            ii2.updateFlag != this.$itemInfoVer &&\n                            ii2.obj.resourceURL == url) {\n                            if (ii2.obj instanceof GButton)\n                                ii2.selected = ii2.obj.selected;\n                            ii.obj = ii2.obj;\n                            ii2.obj = null;\n                            if (j == reuseIndex)\n                                reuseIndex++;\n                            break;\n                        }\n                    }\n                }\n                if (ii.obj != null)\n                    this.setChildIndex(ii.obj, forward ? curIndex - newFirstIndex : this.numChildren);\n                else {\n                    ii.obj = this.$pool.get(url);\n                    if (forward)\n                        this.addChildAt(ii.obj, curIndex - newFirstIndex);\n                    else\n                        this.addChild(ii.obj);\n                }\n                if (ii.obj instanceof GButton)\n                    ii.obj.selected = ii.selected;\n                needRender = true;\n            }\n            else\n                needRender = forceUpdate;\n            if (needRender) {\n                if (this.$autoResizeItem &&\n                    (this.$layout == 0 /* SingleColumn */ || this.$columnCount > 0))\n                    ii.obj.setSize(partSize, ii.obj.height, true);\n                this.itemRenderer(curIndex % this.$numItems, ii.obj);\n                if (curIndex % this.$curLineItemCount == 0) {\n                    deltaSize += Math.ceil(ii.obj.height) - ii.height;\n                    if (curIndex == newFirstIndex && oldFirstIndex > newFirstIndex) {\n                        //when scrolling down, we need to make compensation for the position to avoid flickering if the item's size changes\n                        firstItemDeltaSize = Math.ceil(ii.obj.height) - ii.height;\n                    }\n                }\n                ii.width = Math.ceil(ii.obj.width);\n                ii.height = Math.ceil(ii.obj.height);\n            }\n            ii.updateFlag = this.$itemInfoVer;\n            ii.obj.setXY(curX, curY);\n            if (curIndex == newFirstIndex)\n                //pad one more\n                max += ii.height;\n            curX += ii.width + this.$columnGap;\n            if (curIndex % this.$curLineItemCount == this.$curLineItemCount - 1) {\n                curX = 0;\n                curY += ii.height + this.$lineGap;\n            }\n            curIndex++;\n        }\n        for (i = 0; i < oldCount; i++) {\n            ii = this.$virtualItems[oldFirstIndex + i];\n            if (ii.updateFlag != this.$itemInfoVer && ii.obj != null) {\n                if (ii.obj instanceof GButton)\n                    ii.selected = ii.obj.selected;\n                this.removeChildToPool(ii.obj);\n                ii.obj = null;\n            }\n        }\n        if (deltaSize != 0 || firstItemDeltaSize != 0)\n            this.$scrollPane.changeContentSizeOnScrolling(0, deltaSize, 0, firstItemDeltaSize);\n        if (curIndex > 0 &&\n            this.numChildren > 0 &&\n            this.$container.y < 0 &&\n            this.getChildAt(0).y > -this.$container.y)\n            //last page is not full\n            this.handleScroll1(false); //recursive\n    }\n    handleScroll2(forceUpdate) {\n        this.$enterCounter++;\n        if (this.$enterCounter > 3) {\n            console.warn('this list view cannot be filled full as the itemRenderer function always returns an item with different size.');\n            return;\n        }\n        let pos = this.$scrollPane.scrollingPosX;\n        let max = pos + this.$scrollPane.viewWidth;\n        const end = pos == this.$scrollPane.contentWidth;\n        GList.$lastPosHelper = pos;\n        const newFirstIndex = this.getIndexOnPos2(forceUpdate);\n        if (newFirstIndex == this.$firstIndex && !forceUpdate)\n            return;\n        pos = GList.$lastPosHelper;\n        const oldFirstIndex = this.$firstIndex;\n        this.$firstIndex = newFirstIndex;\n        let curIndex = newFirstIndex;\n        const forward = oldFirstIndex > newFirstIndex;\n        const oldCount = this.numChildren;\n        let lastIndex = oldFirstIndex + oldCount - 1;\n        let reuseIndex = forward ? lastIndex : oldFirstIndex;\n        let curX = pos, curY = 0;\n        let needRender;\n        let deltaSize = 0;\n        let firstItemDeltaSize = 0;\n        let url = this.defaultItem;\n        let ii, ii2;\n        let i, j;\n        const partSize = (this.$scrollPane.viewHeight - this.$lineGap * (this.$curLineItemCount - 1)) /\n            this.$curLineItemCount;\n        this.$itemInfoVer++;\n        while (curIndex < this.$realNumItems && (end || curX < max)) {\n            ii = this.$virtualItems[curIndex];\n            if (ii.obj == null || forceUpdate) {\n                if (this.itemProvider != null) {\n                    url = this.itemProvider(curIndex % this.$numItems);\n                    if (url == null)\n                        url = this.$defaultItem;\n                    url = UIPackage.normalizeURL(url);\n                }\n                if (ii.obj != null && ii.obj.resourceURL != url) {\n                    if (ii.obj instanceof GButton)\n                        ii.selected = ii.obj.selected;\n                    this.removeChildToPool(ii.obj);\n                    ii.obj = null;\n                }\n            }\n            if (ii.obj == null) {\n                if (forward) {\n                    for (j = reuseIndex; j >= oldFirstIndex; j--) {\n                        ii2 = this.$virtualItems[j];\n                        if (ii2.obj != null &&\n                            ii2.updateFlag != this.$itemInfoVer &&\n                            ii2.obj.resourceURL == url) {\n                            if (ii2.obj instanceof GButton)\n                                ii2.selected = ii2.obj.selected;\n                            ii.obj = ii2.obj;\n                            ii2.obj = null;\n                            if (j == reuseIndex)\n                                reuseIndex--;\n                            break;\n                        }\n                    }\n                }\n                else {\n                    for (j = reuseIndex; j <= lastIndex; j++) {\n                        ii2 = this.$virtualItems[j];\n                        if (ii2.obj != null &&\n                            ii2.updateFlag != this.$itemInfoVer &&\n                            ii2.obj.resourceURL == url) {\n                            if (ii2.obj instanceof GButton)\n                                ii2.selected = ii2.obj.selected;\n                            ii.obj = ii2.obj;\n                            ii2.obj = null;\n                            if (j == reuseIndex)\n                                reuseIndex++;\n                            break;\n                        }\n                    }\n                }\n                if (ii.obj != null)\n                    this.setChildIndex(ii.obj, forward ? curIndex - newFirstIndex : this.numChildren);\n                else {\n                    ii.obj = this.$pool.get(url);\n                    if (forward)\n                        this.addChildAt(ii.obj, curIndex - newFirstIndex);\n                    else\n                        this.addChild(ii.obj);\n                }\n                if (ii.obj instanceof GButton)\n                    ii.obj.selected = ii.selected;\n                needRender = true;\n            }\n            else\n                needRender = forceUpdate;\n            if (needRender) {\n                if (this.$autoResizeItem &&\n                    (this.$layout == 1 /* SingleRow */ || this.$lineCount > 0))\n                    ii.obj.setSize(ii.obj.width, partSize, true);\n                this.itemRenderer(curIndex % this.$numItems, ii.obj);\n                if (curIndex % this.$curLineItemCount == 0) {\n                    deltaSize += Math.ceil(ii.obj.width) - ii.width;\n                    if (curIndex == newFirstIndex && oldFirstIndex > newFirstIndex)\n                        firstItemDeltaSize = Math.ceil(ii.obj.width) - ii.width;\n                }\n                ii.width = Math.ceil(ii.obj.width);\n                ii.height = Math.ceil(ii.obj.height);\n            }\n            ii.updateFlag = this.$itemInfoVer;\n            ii.obj.setXY(curX, curY);\n            if (curIndex == newFirstIndex)\n                max += ii.width;\n            curY += ii.height + this.$lineGap;\n            if (curIndex % this.$curLineItemCount == this.$curLineItemCount - 1) {\n                curY = 0;\n                curX += ii.width + this.$columnGap;\n            }\n            curIndex++;\n        }\n        for (i = 0; i < oldCount; i++) {\n            ii = this.$virtualItems[oldFirstIndex + i];\n            if (ii.updateFlag != this.$itemInfoVer && ii.obj != null) {\n                if (ii.obj instanceof GButton)\n                    ii.selected = ii.obj.selected;\n                this.removeChildToPool(ii.obj);\n                ii.obj = null;\n            }\n        }\n        if (deltaSize != 0 || firstItemDeltaSize != 0)\n            this.$scrollPane.changeContentSizeOnScrolling(deltaSize, 0, firstItemDeltaSize, 0);\n        if (curIndex > 0 &&\n            this.numChildren > 0 &&\n            this.$container.x < 0 &&\n            this.getChildAt(0).x > -this.$container.x)\n            this.handleScroll2(false);\n    }\n    handleScroll3(forceUpdate) {\n        let pos = this.$scrollPane.scrollingPosX;\n        GList.$lastPosHelper = pos;\n        const newFirstIndex = this.getIndexOnPos3(forceUpdate);\n        if (newFirstIndex == this.$firstIndex && !forceUpdate)\n            return;\n        pos = GList.$lastPosHelper;\n        const oldFirstIndex = this.$firstIndex;\n        this.$firstIndex = newFirstIndex;\n        //height-sync is not supported in pagnation mode, so just only render 1 page\n        let reuseIndex = oldFirstIndex;\n        const virtualItemCount = this.$virtualItems.length;\n        const pageSize = this.$curLineItemCount * this.$curLineItemCount2;\n        const startCol = newFirstIndex % this.$curLineItemCount;\n        const viewWidth = this.viewWidth;\n        const page = Math.floor(newFirstIndex / pageSize);\n        const startIndex = page * pageSize;\n        const lastIndex = startIndex + pageSize * 2;\n        let needRender;\n        let i;\n        let ii, ii2;\n        let col;\n        let url = this.$defaultItem;\n        const partWidth = (this.$scrollPane.viewWidth - this.$columnGap * (this.$curLineItemCount - 1)) /\n            this.$curLineItemCount;\n        const partHeight = (this.$scrollPane.viewHeight - this.$lineGap * (this.$curLineItemCount2 - 1)) /\n            this.$curLineItemCount2;\n        this.$itemInfoVer++;\n        //add mark for items used this time\n        for (i = startIndex; i < lastIndex; i++) {\n            if (i >= this.$realNumItems)\n                continue;\n            col = i % this.$curLineItemCount;\n            if (i - startIndex < pageSize) {\n                if (col < startCol)\n                    continue;\n            }\n            else {\n                if (col > startCol)\n                    continue;\n            }\n            ii = this.$virtualItems[i];\n            ii.updateFlag = this.$itemInfoVer;\n        }\n        let lastObj = null;\n        let insertIndex = 0;\n        for (i = startIndex; i < lastIndex; i++) {\n            if (i >= this.$realNumItems)\n                continue;\n            ii = this.$virtualItems[i];\n            if (ii.updateFlag != this.$itemInfoVer)\n                continue;\n            if (ii.obj == null) {\n                //find if any free item can be used\n                while (reuseIndex < virtualItemCount) {\n                    ii2 = this.$virtualItems[reuseIndex];\n                    if (ii2.obj != null && ii2.updateFlag != this.$itemInfoVer) {\n                        if (ii2.obj instanceof GButton)\n                            ii2.selected = ii2.obj.selected;\n                        ii.obj = ii2.obj;\n                        ii2.obj = null;\n                        break;\n                    }\n                    reuseIndex++;\n                }\n                if (insertIndex == -1)\n                    insertIndex = this.getChildIndex(lastObj) + 1;\n                if (ii.obj == null) {\n                    if (this.itemProvider != null) {\n                        url = this.itemProvider(i % this.$numItems);\n                        if (url == null)\n                            url = this.$defaultItem;\n                        url = UIPackage.normalizeURL(url);\n                    }\n                    ii.obj = this.$pool.get(url);\n                    this.addChildAt(ii.obj, insertIndex);\n                }\n                else\n                    insertIndex = this.setChildIndexBefore(ii.obj, insertIndex);\n                insertIndex++;\n                if (ii.obj instanceof GButton)\n                    ii.obj.selected = ii.selected;\n                needRender = true;\n            }\n            else {\n                needRender = forceUpdate;\n                insertIndex = -1;\n                lastObj = ii.obj;\n            }\n            if (needRender) {\n                if (this.$autoResizeItem) {\n                    if (this.$curLineItemCount == this.$columnCount &&\n                        this.$curLineItemCount2 == this.$lineCount)\n                        ii.obj.setSize(partWidth, partHeight, true);\n                    else if (this.$curLineItemCount == this.$columnCount)\n                        ii.obj.setSize(partWidth, ii.obj.height, true);\n                    else if (this.$curLineItemCount2 == this.$lineCount)\n                        ii.obj.setSize(ii.obj.width, partHeight, true);\n                }\n                this.itemRenderer(i % this.$numItems, ii.obj);\n                ii.width = Math.ceil(ii.obj.width);\n                ii.height = Math.ceil(ii.obj.height);\n            }\n        }\n        //layout\n        let borderX = (startIndex / pageSize) * viewWidth;\n        let xx = borderX;\n        let yy = 0;\n        let lineHeight = 0;\n        for (i = startIndex; i < lastIndex; i++) {\n            if (i >= this.$realNumItems)\n                continue;\n            ii = this.$virtualItems[i];\n            if (ii.updateFlag == this.$itemInfoVer)\n                ii.obj.setXY(xx, yy);\n            if (ii.height > lineHeight)\n                lineHeight = ii.height;\n            if (i % this.$curLineItemCount == this.$curLineItemCount - 1) {\n                xx = borderX;\n                yy += lineHeight + this.$lineGap;\n                lineHeight = 0;\n                if (i == startIndex + pageSize - 1) {\n                    borderX += viewWidth;\n                    xx = borderX;\n                    yy = 0;\n                }\n            }\n            else\n                xx += ii.width + this.$columnGap;\n        }\n        //release items not used\n        for (i = reuseIndex; i < virtualItemCount; i++) {\n            ii = this.$virtualItems[i];\n            if (ii.updateFlag != this.$itemInfoVer && ii.obj != null) {\n                if (ii.obj instanceof GButton)\n                    ii.selected = ii.obj.selected;\n                this.removeChildToPool(ii.obj);\n                ii.obj = null;\n            }\n        }\n    }\n    handleArchOrder1() {\n        if (this.$childrenRenderOrder == 2 /* Arch */) {\n            const mid = this.$scrollPane.posY + this.viewHeight / 2;\n            let minDist = Number.POSITIVE_INFINITY;\n            let dist = 0;\n            let apexIndex = 0;\n            const cnt = this.numChildren;\n            for (let i = 0; i < cnt; i++) {\n                const obj = this.getChildAt(i);\n                if (!this.foldInvisibleItems || obj.visible) {\n                    dist = Math.abs(mid - obj.y - obj.height / 2);\n                    if (dist < minDist) {\n                        minDist = dist;\n                        apexIndex = i;\n                    }\n                }\n            }\n            this.apexIndex = apexIndex;\n        }\n    }\n    handleArchOrder2() {\n        if (this.childrenRenderOrder == 2 /* Arch */) {\n            const mid = this.$scrollPane.posX + this.viewWidth / 2;\n            let minDist = Number.POSITIVE_INFINITY;\n            let dist = 0;\n            let apexIndex = 0;\n            const cnt = this.numChildren;\n            for (let i = 0; i < cnt; i++) {\n                const obj = this.getChildAt(i);\n                if (!this.foldInvisibleItems || obj.visible) {\n                    dist = Math.abs(mid - obj.x - obj.width / 2);\n                    if (dist < minDist) {\n                        minDist = dist;\n                        apexIndex = i;\n                    }\n                }\n            }\n            this.apexIndex = apexIndex;\n        }\n    }\n    handleAlign(contentWidth, contentHeight) {\n        let newOffsetX = 0;\n        let newOffsetY = 0;\n        if (contentHeight < this.viewHeight) {\n            if (this.$verticalAlign == 1 /* Middle */)\n                newOffsetY = Math.floor((this.viewHeight - contentHeight) / 2);\n            else if (this.$verticalAlign == 2 /* Bottom */)\n                newOffsetY = this.viewHeight - contentHeight;\n        }\n        if (contentWidth < this.viewWidth) {\n            if (this.$align == \"center\" /* Center */)\n                newOffsetX = Math.floor((this.viewWidth - contentWidth) / 2);\n            else if (this.$align == \"right\" /* Right */)\n                newOffsetX = this.viewWidth - contentWidth;\n        }\n        if (newOffsetX != this.$alignOffset.x || newOffsetY != this.$alignOffset.y) {\n            this.$alignOffset.setValues(newOffsetX, newOffsetY);\n            if (this.$scrollPane != null)\n                this.$scrollPane.adjustMaskContainer();\n            else {\n                this.$container.x = this.$margin.left + this.$alignOffset.x;\n                this.$container.y = this.$margin.top + this.$alignOffset.y;\n            }\n        }\n    }\n    /**@override */\n    updateBounds() {\n        if (this.$virtual)\n            return;\n        let i;\n        let child;\n        let curX = 0;\n        let curY = 0;\n        let maxWidth = 0;\n        let maxHeight = 0;\n        let cw = 0, ch = 0;\n        let j = 0;\n        let page = 0;\n        let k = 0;\n        const cnt = this.$children.length;\n        const viewWidth = this.viewWidth;\n        const viewHeight = this.viewHeight;\n        let lineSize = 0;\n        let lineStart = 0;\n        let ratio;\n        if (this.$layout == 0 /* SingleColumn */) {\n            for (i = 0; i < cnt; i++) {\n                child = this.getChildAt(i);\n                if (this.foldInvisibleItems && !child.visible)\n                    continue;\n                if (curY != 0)\n                    curY += this.$lineGap;\n                child.y = curY;\n                if (this.$autoResizeItem)\n                    child.setSize(viewWidth, child.height, true);\n                curY += Math.ceil(child.height);\n                if (child.width > maxWidth)\n                    maxWidth = child.width;\n            }\n            cw = Math.ceil(maxWidth);\n            ch = curY;\n        }\n        else if (this.$layout == 1 /* SingleRow */) {\n            for (i = 0; i < cnt; i++) {\n                child = this.getChildAt(i);\n                if (this.foldInvisibleItems && !child.visible)\n                    continue;\n                if (curX != 0)\n                    curX += this.$columnGap;\n                child.x = curX;\n                if (this.$autoResizeItem)\n                    child.setSize(child.width, viewHeight, true);\n                curX += Math.ceil(child.width);\n                if (child.height > maxHeight)\n                    maxHeight = child.height;\n            }\n            cw = curX;\n            ch = Math.ceil(maxHeight);\n        }\n        else if (this.$layout == 2 /* FlowHorizontal */) {\n            if (this.$autoResizeItem && this.$columnCount > 0) {\n                for (i = 0; i < cnt; i++) {\n                    child = this.getChildAt(i);\n                    if (this.foldInvisibleItems && !child.visible)\n                        continue;\n                    lineSize += child.sourceWidth;\n                    j++;\n                    if (j == this.$columnCount || i == cnt - 1) {\n                        ratio = (viewWidth - lineSize - (j - 1) * this.$columnGap) / lineSize;\n                        curX = 0;\n                        for (j = lineStart; j <= i; j++) {\n                            child = this.getChildAt(j);\n                            if (this.foldInvisibleItems && !child.visible)\n                                continue;\n                            child.setXY(curX, curY);\n                            if (j < i) {\n                                child.setSize(child.sourceWidth + Math.round(child.sourceWidth * ratio), child.height, true);\n                                curX += Math.ceil(child.width) + this.$columnGap;\n                            }\n                            else\n                                child.setSize(viewWidth - curX, child.height, true);\n                            if (child.height > maxHeight)\n                                maxHeight = child.height;\n                        }\n                        //new line\n                        curY += Math.ceil(maxHeight) + this.$lineGap;\n                        maxHeight = 0;\n                        j = 0;\n                        lineStart = i + 1;\n                        lineSize = 0;\n                    }\n                }\n                ch = curY + Math.ceil(maxHeight);\n                cw = viewWidth;\n            }\n            else {\n                for (i = 0; i < cnt; i++) {\n                    child = this.getChildAt(i);\n                    if (this.foldInvisibleItems && !child.visible)\n                        continue;\n                    if (curX != 0)\n                        curX += this.$columnGap;\n                    if ((this.$columnCount != 0 && j >= this.$columnCount) ||\n                        (this.$columnCount == 0 && curX + child.width > viewWidth && maxHeight != 0)) {\n                        //new line\n                        curX = 0;\n                        curY += Math.ceil(maxHeight) + this.$lineGap;\n                        maxHeight = 0;\n                        j = 0;\n                    }\n                    child.setXY(curX, curY);\n                    curX += Math.ceil(child.width);\n                    if (curX > maxWidth)\n                        maxWidth = curX;\n                    if (child.height > maxHeight)\n                        maxHeight = child.height;\n                    j++;\n                }\n                ch = curY + Math.ceil(maxHeight);\n                cw = Math.ceil(maxWidth);\n            }\n        }\n        else if (this.$layout == 3 /* FlowVertical */) {\n            if (this.$autoResizeItem && this.$lineCount > 0) {\n                for (i = 0; i < cnt; i++) {\n                    child = this.getChildAt(i);\n                    if (this.foldInvisibleItems && !child.visible)\n                        continue;\n                    lineSize += child.sourceHeight;\n                    j++;\n                    if (j == this.$lineCount || i == cnt - 1) {\n                        ratio = (viewHeight - lineSize - (j - 1) * this.$lineGap) / lineSize;\n                        curY = 0;\n                        for (j = lineStart; j <= i; j++) {\n                            child = this.getChildAt(j);\n                            if (this.foldInvisibleItems && !child.visible)\n                                continue;\n                            child.setXY(curX, curY);\n                            if (j < i) {\n                                child.setSize(child.width, child.sourceHeight + Math.round(child.sourceHeight * ratio), true);\n                                curY += Math.ceil(child.height) + this.$lineGap;\n                            }\n                            else\n                                child.setSize(child.width, viewHeight - curY, true);\n                            if (child.width > maxWidth)\n                                maxWidth = child.width;\n                        }\n                        //new line\n                        curX += Math.ceil(maxWidth) + this.$columnGap;\n                        maxWidth = 0;\n                        j = 0;\n                        lineStart = i + 1;\n                        lineSize = 0;\n                    }\n                }\n                cw = curX + Math.ceil(maxWidth);\n                ch = viewHeight;\n            }\n            else {\n                for (i = 0; i < cnt; i++) {\n                    child = this.getChildAt(i);\n                    if (this.foldInvisibleItems && !child.visible)\n                        continue;\n                    if (curY != 0)\n                        curY += this.$lineGap;\n                    if ((this.$lineCount != 0 && j >= this.$lineCount) ||\n                        (this.$lineCount == 0 && curY + child.height > viewHeight && maxWidth != 0)) {\n                        curY = 0;\n                        curX += Math.ceil(maxWidth) + this.$columnGap;\n                        maxWidth = 0;\n                        j = 0;\n                    }\n                    child.setXY(curX, curY);\n                    curY += Math.ceil(child.height);\n                    if (curY > maxHeight)\n                        maxHeight = curY;\n                    if (child.width > maxWidth)\n                        maxWidth = child.width;\n                    j++;\n                }\n                cw = curX + Math.ceil(maxWidth);\n                ch = Math.ceil(maxHeight);\n            }\n        } //pagination\n        else {\n            let eachHeight;\n            if (this.$autoResizeItem && this.$lineCount > 0)\n                eachHeight = Math.floor((viewHeight - (this.$lineCount - 1) * this.$lineGap) / this.$lineCount);\n            if (this.$autoResizeItem && this.$columnCount > 0) {\n                for (i = 0; i < cnt; i++) {\n                    child = this.getChildAt(i);\n                    if (this.foldInvisibleItems && !child.visible)\n                        continue;\n                    lineSize += child.sourceWidth;\n                    j++;\n                    if (j == this.$columnCount || i == cnt - 1) {\n                        ratio = (viewWidth - lineSize - (j - 1) * this.$columnGap) / lineSize;\n                        curX = 0;\n                        for (j = lineStart; j <= i; j++) {\n                            child = this.getChildAt(j);\n                            if (this.foldInvisibleItems && !child.visible)\n                                continue;\n                            child.setXY(page * viewWidth + curX, curY);\n                            if (j < i) {\n                                child.setSize(child.sourceWidth + Math.round(child.sourceWidth * ratio), this.$lineCount > 0 ? eachHeight : child.height, true);\n                                curX += Math.ceil(child.width) + this.$columnGap;\n                            }\n                            else\n                                child.setSize(viewWidth - curX, this.$lineCount > 0 ? eachHeight : child.height, true);\n                            if (child.height > maxHeight)\n                                maxHeight = child.height;\n                        }\n                        //new line\n                        curY += Math.ceil(maxHeight) + this.$lineGap;\n                        maxHeight = 0;\n                        j = 0;\n                        lineStart = i + 1;\n                        lineSize = 0;\n                        k++;\n                        if ((this.$lineCount != 0 && k >= this.$lineCount) ||\n                            (this.$lineCount == 0 && curY + child.height > viewHeight)) {\n                            //new page\n                            page++;\n                            curY = 0;\n                            k = 0;\n                        }\n                    }\n                }\n            }\n            else {\n                for (i = 0; i < cnt; i++) {\n                    child = this.getChildAt(i);\n                    if (this.foldInvisibleItems && !child.visible)\n                        continue;\n                    if (curX != 0)\n                        curX += this.$columnGap;\n                    if (this.$autoResizeItem && this.$lineCount > 0)\n                        child.setSize(child.width, eachHeight, true);\n                    if ((this.$columnCount != 0 && j >= this.$columnCount) ||\n                        (this.$columnCount == 0 && curX + child.width > viewWidth && maxHeight != 0)) {\n                        //new line\n                        curX = 0;\n                        curY += Math.ceil(maxHeight) + this.$lineGap;\n                        maxHeight = 0;\n                        j = 0;\n                        k++;\n                        if ((this.$lineCount != 0 && k >= this.$lineCount) ||\n                            (this.$lineCount == 0 && curY + child.height > viewHeight && maxWidth != 0)) {\n                            //new page\n                            page++;\n                            curY = 0;\n                            k = 0;\n                        }\n                    }\n                    child.setXY(page * viewWidth + curX, curY);\n                    curX += Math.ceil(child.width);\n                    if (curX > maxWidth)\n                        maxWidth = curX;\n                    if (child.height > maxHeight)\n                        maxHeight = child.height;\n                    j++;\n                }\n            }\n            ch = page > 0 ? viewHeight : curY + Math.ceil(maxHeight);\n            cw = (page + 1) * viewWidth;\n        }\n        this.handleAlign(cw, ch);\n        this.setBounds(0, 0, cw, ch);\n    }\n    setupBeforeAdd(xml) {\n        super.setupBeforeAdd(xml);\n        let str;\n        let arr;\n        str = xml.attributes.layout;\n        if (str)\n            this.$layout = ParseListLayoutType(str);\n        let overflow;\n        str = xml.attributes.overflow;\n        if (str)\n            overflow = ParseOverflowType(str);\n        else\n            overflow = 0 /* Visible */;\n        str = xml.attributes.margin;\n        if (str)\n            this.$margin.parse(str);\n        str = xml.attributes.align;\n        if (str)\n            this.$align = ParseAlignType(str);\n        str = xml.attributes.vAlign;\n        if (str)\n            this.$verticalAlign = ParseVertAlignType(str);\n        if (overflow == 2 /* Scroll */) {\n            let scroll;\n            str = xml.attributes.scroll;\n            if (str)\n                scroll = ParseScrollType(str);\n            else\n                scroll = 1 /* Vertical */;\n            let scrollBarDisplay;\n            str = xml.attributes.scrollBar;\n            if (str)\n                scrollBarDisplay = ParseScrollBarDisplayType(str);\n            else\n                scrollBarDisplay = 0 /* Default */;\n            let scrollBarFlags;\n            str = xml.attributes.scrollBarFlags;\n            if (str)\n                scrollBarFlags = parseInt(str);\n            else\n                scrollBarFlags = 0;\n            let scrollBarMargin = new Margin();\n            str = xml.attributes.scrollBarMargin;\n            if (str)\n                scrollBarMargin.parse(str);\n            let vtScrollBarRes;\n            let hzScrollBarRes;\n            str = xml.attributes.scrollBarRes;\n            if (str) {\n                arr = str.split(',');\n                vtScrollBarRes = arr[0];\n                hzScrollBarRes = arr[1];\n            }\n            let headerRes;\n            let footerRes;\n            str = xml.attributes.ptrRes;\n            if (str) {\n                arr = str.split(',');\n                headerRes = arr[0];\n                footerRes = arr[1];\n            }\n            this.setupScroll(scrollBarMargin, scroll, scrollBarDisplay, scrollBarFlags, vtScrollBarRes, hzScrollBarRes, headerRes, footerRes);\n        }\n        else\n            this.setupOverflow(overflow);\n        str = xml.attributes.lineGap;\n        if (str)\n            this.$lineGap = parseInt(str);\n        str = xml.attributes.colGap;\n        if (str)\n            this.$columnGap = parseInt(str);\n        str = xml.attributes.lineItemCount;\n        if (str) {\n            if (this.$layout == 2 /* FlowHorizontal */ ||\n                this.$layout == 4 /* Pagination */)\n                this.$columnCount = parseInt(str);\n            else if (this.$layout == 3 /* FlowVertical */)\n                this.$lineCount = parseInt(str);\n        }\n        str = xml.attributes.lineItemCount2;\n        if (str)\n            this.$lineCount = parseInt(str);\n        str = xml.attributes.selectionMode;\n        if (str)\n            this.$selectionMode = ParseListSelectionMode(str);\n        str = xml.attributes.defaultItem;\n        if (str)\n            this.$defaultItem = str;\n        str = xml.attributes.autoItemSize;\n        if (this.$layout == 1 /* SingleRow */ || this.$layout == 0 /* SingleColumn */)\n            this.$autoResizeItem = str != 'false';\n        else\n            this.$autoResizeItem = str == 'true';\n        str = xml.attributes.renderOrder;\n        if (str) {\n            this.$childrenRenderOrder = ParseListChildrenRenderOrder(str);\n            if (this.$childrenRenderOrder == 2 /* Arch */) {\n                str = xml.attributes.apex;\n                if (str)\n                    this.$apexIndex = parseInt(str);\n            }\n        }\n        let col = xml.children;\n        col.forEach(cxml => {\n            if (cxml.nodeName != 'item')\n                return;\n            let url = cxml.attributes.url;\n            if (!url)\n                url = this.$defaultItem;\n            if (!url)\n                return;\n            let obj = this.getFromPool(url);\n            if (obj != null) {\n                this.addChild(obj);\n                str = cxml.attributes.title;\n                if (str)\n                    obj.text = str;\n                str = cxml.attributes.icon;\n                if (str)\n                    obj.icon = str;\n                str = cxml.attributes.name;\n                if (str)\n                    obj.name = str;\n                str = cxml.attributes.selectedIcon;\n                if (str && obj instanceof GButton)\n                    obj.selectedIcon = str;\n            }\n        }, this);\n    }\n    setupAfterAdd(xml) {\n        super.setupAfterAdd(xml);\n        let str;\n        str = xml.attributes.selectionController;\n        if (str)\n            this.$selectionController = this.parent.getController(str);\n    }\n}\nGList.$lastPosHelper = 0;\n\nclass PopupMenu {\n    constructor(resourceURL = null) {\n        if (!resourceURL) {\n            resourceURL = UIConfig.popupMenu;\n            if (!resourceURL)\n                throw new Error('UIConfig.popupMenu not defined');\n        }\n        this.$contentPane = UIPackage.createObjectFromURL(resourceURL);\n        this.$contentPane.on('added', this.$addedToStage, this);\n        this.$list = this.$contentPane.getChild('list');\n        this.$list.removeChildrenToPool();\n        this.$list.addRelation(this.$contentPane, 14 /* Width */);\n        this.$list.removeRelation(this.$contentPane, 15 /* Height */);\n        this.$contentPane.addRelation(this.$list, 15 /* Height */);\n        this.$list.on(\"__itemClick\" /* ItemClick */, this.$clickItem, this);\n    }\n    dispose() {\n        GTimer.inst.remove(this.$delayClickItem, this);\n        this.$list.off(\"__itemClick\" /* ItemClick */, this.$clickItem);\n        this.$contentPane.off('added', this.$addedToStage);\n        this.$contentPane.dispose();\n    }\n    addItem(caption, handler) {\n        let item = this.$list.addItemFromPool();\n        item.title = caption;\n        item.data = handler;\n        item.grayed = false;\n        let c = item.getController('checked');\n        if (c != null)\n            c.selectedIndex = 0;\n        return item;\n    }\n    addItemAt(caption, index, handler) {\n        let item = this.$list.getFromPool();\n        this.$list.addChildAt(item, index);\n        item.title = caption;\n        item.data = handler;\n        item.grayed = false;\n        let c = item.getController('checked');\n        if (c != null)\n            c.selectedIndex = 0;\n        return item;\n    }\n    addSeperator() {\n        if (UIConfig.popupMenuSeperator == null)\n            throw new Error('UIConfig.popupMenuSeperator not defined');\n        this.$list.addItemFromPool(UIConfig.popupMenuSeperator);\n    }\n    getItemName(index) {\n        let item = this.$list.getChildAt(index);\n        return item.name;\n    }\n    setItemText(name, caption) {\n        let item = this.$list.getChild(name);\n        item.title = caption;\n    }\n    setItemVisible(name, visible) {\n        let item = this.$list.getChild(name);\n        if (item.visible != visible) {\n            item.visible = visible;\n            this.$list.setBoundsChangedFlag();\n        }\n    }\n    setItemGrayed(name, grayed) {\n        let item = this.$list.getChild(name);\n        item.grayed = grayed;\n    }\n    setItemCheckable(name, checkable) {\n        let item = this.$list.getChild(name);\n        let c = item.getController('checked');\n        if (c != null) {\n            if (checkable) {\n                if (c.selectedIndex == 0)\n                    c.selectedIndex = 1;\n            }\n            else\n                c.selectedIndex = 0;\n        }\n    }\n    setItemChecked(name, checked) {\n        let item = this.$list.getChild(name);\n        let c = item.getController('checked');\n        if (c != null)\n            c.selectedIndex = checked ? 2 : 1;\n    }\n    isItemChecked(name) {\n        let item = this.$list.getChild(name);\n        let c = item.getController('checked');\n        if (c != null)\n            return c.selectedIndex == 2;\n        else\n            return false;\n    }\n    removeItem(name) {\n        let item = this.$list.getChild(name);\n        if (item != null) {\n            let index = this.$list.getChildIndex(item);\n            this.$list.removeChildToPoolAt(index);\n            return true;\n        }\n        else\n            return false;\n    }\n    clearItems() {\n        this.$list.removeChildrenToPool();\n    }\n    get itemCount() {\n        return this.$list.numChildren;\n    }\n    get contentPane() {\n        return this.$contentPane;\n    }\n    get list() {\n        return this.$list;\n    }\n    show(target = null, dir) {\n        let r = target != null ? GRoot.findFor(target) : GRoot.inst;\n        r.showPopup(this.contentPane, target instanceof GRoot ? null : target, dir);\n    }\n    $clickItem(evt) {\n        let item = evt.data.item;\n        GTimer.inst.add(100, 1, this.$delayClickItem, this, item);\n    }\n    $delayClickItem(itemObject) {\n        if (!(itemObject instanceof GButton))\n            return;\n        if (itemObject.grayed) {\n            this.$list.selectedIndex = -1;\n            return;\n        }\n        let c = itemObject.getController('checked');\n        if (c != null && c.selectedIndex != 0) {\n            if (c.selectedIndex == 1)\n                c.selectedIndex = 2;\n            else\n                c.selectedIndex = 1;\n        }\n        let r = this.$contentPane.parent;\n        if (r)\n            r.hidePopup(this.contentPane);\n        if (itemObject.data != null)\n            itemObject.data.call(null);\n        GTimer.inst.remove(this.$delayClickItem, this);\n    }\n    $addedToStage() {\n        this.$list.selectedIndex = -1;\n        this.$list.resizeToFit(100000, 10);\n    }\n}\n\nclass UIObjectFactory {\n    static setPackageItemExtension(url, type) {\n        UIObjectFactory.packageItemExtensions[url.substring(5)] = type;\n    }\n    // public static setLoaderExtension(type: { new(): GLoader }): void {\n    //     UIObjectFactory.loaderExtension = type;\n    // }\n    static newObject(pi) {\n        switch (pi.type) {\n            case 0 /* Image */:\n                return new GImage();\n            case 2 /* MovieClip */:\n                return new GMovieClip();\n            case 4 /* Component */:\n                let cls = UIObjectFactory.packageItemExtensions[pi.owner.id + pi.id];\n                if (cls)\n                    return new cls();\n                let xml = pi.owner.getItemAsset(pi);\n                let extention = xml.attributes.extention;\n                if (extention != null) {\n                    switch (extention) {\n                        case 'Button':\n                            return new GButton();\n                        case 'ProgressBar':\n                            return new GProgressBar();\n                        case 'Label':\n                            return new GLabel();\n                        case 'Slider':\n                            return new GSlider();\n                        case 'ScrollBar':\n                            return new GScrollBar();\n                        case 'ComboBox':\n                            return new GComboBox();\n                        default:\n                            return new GComponent();\n                    }\n                }\n                else\n                    return new GComponent();\n        }\n        return null;\n    }\n    static newObjectDirectly(type) {\n        switch (type) {\n            case 'image':\n                return new GImage();\n            case 'movieclip':\n                return new GMovieClip();\n            case 'component':\n                return new GComponent();\n            case 'text':\n                return new GTextField();\n            case 'list':\n                return new GList();\n            case 'richtext':\n                return new GRichTextField();\n            case 'inputtext':\n                return new GTextInput();\n            case 'group':\n                return new GGroup();\n            case 'graph':\n                return new GGraph();\n            case 'loader':\n                if (UIObjectFactory.loaderExtension != null)\n                    return new UIObjectFactory.loaderExtension();\n                else\n                    return new GLoader();\n        }\n        return null;\n    }\n}\nUIObjectFactory.packageItemExtensions = {};\nDecls.UIObjectFactory = UIObjectFactory;\n\nclass DragIndicator {\n    constructor() {\n        this.$agent = new GLoader();\n        this.$agent.draggable = true;\n        this.$agent.touchable = false;\n        this.$agent.setSize(100, 100);\n        this.$agent.setPivot(0.5, 0.5, true);\n        this.$agent.align = \"center\" /* Center */;\n        this.$agent.verticalAlign = 1 /* Middle */;\n        this.$agent.sortingOrder = 1000000; //top most\n        this.$agent.on(\"__dragEnd\" /* END */, this.$dragEnd, this);\n    }\n    get dragAgent() {\n        return this.$agent;\n    }\n    get isDragging() {\n        return this.$agent.parent != null;\n    }\n    get sourceObject() {\n        return this.$sourceObject;\n    }\n    startDrag(source, icon, sourceData, touchPointID = -1) {\n        if (this.isDragging)\n            return;\n        this.$sourceObject = source;\n        this.$sourceData = sourceData;\n        this.$agent.url = icon;\n        GRoot.inst.addChild(this.$agent);\n        const pt = GRoot.inst.globalToLocal(GRoot.globalMouseStatus.mouseX, GRoot.globalMouseStatus.mouseY);\n        this.$agent.setXY(pt.x, pt.y);\n        this.$agent.startDrag(touchPointID);\n    }\n    cancel() {\n        if (this.$agent.parent != null) {\n            this.$agent.stopDrag();\n            GRoot.inst.removeChild(this.$agent);\n            this.$sourceData = null;\n        }\n    }\n    $dragEnd(evt) {\n        if (!this.isDragging)\n            return;\n        GRoot.inst.removeChild(this.$agent);\n        let sourceData = this.$sourceData;\n        this.$sourceData = null;\n        let obj = GRoot.inst.getObjectUnderPoint(evt.target.x, evt.target.y);\n        while (obj != null) {\n            if (obj.hasListener(\"__dragDrop\" /* DROP */)) {\n                obj.requestFocus();\n                let currentTarget = obj.displayObject;\n                let event = new createjs.Event(\"__dragDrop\" /* DROP */, true, false);\n                event.data = { currentTarget, sourceData };\n                obj.dispatchEvent(event, this);\n                return;\n            }\n            obj = obj.parent;\n        }\n    }\n}\n\n\n\n// EXTERNAL MODULE: ./node_modules/stats.js/build/stats.min.js\nvar stats_min = __webpack_require__(466);\n;// CONCATENATED MODULE: ./src/main.ts\n\r\n\r\n// import { WindowA } from './WindowA';\r\n// import { WindowB } from './WindowB';\r\n// import { WindowWait } from './WindowWait';\r\nclass Main {\r\n    constructor(canvas, manifest) {\r\n        this.manifest = [];\r\n        this.canvas = canvas;\r\n        this.manifest = manifest;\r\n        this.stage = new createjs.Stage(canvas);\r\n        this.init();\r\n    }\r\n    init() {\r\n        this.initStats();\r\n        this.createStage();\r\n        this.createLoader();\r\n    }\r\n    createStage() {\r\n        GRoot.inst.attachTo(this.stage, {\r\n            designWidth: 800,\r\n            designHeight: 600,\r\n            scaleMode: \"fixedWidth\" /* FIXED_WIDTH */,\r\n            orientation: \"landscape\" /* LANDSCAPE */,\r\n            alignV: 3 /* TOP */,\r\n            alignH: 0 /* LEFT */\r\n        });\r\n        createjs.Ticker.framerate = 60;\r\n        createjs.Ticker.timingMode = createjs.Ticker.RAF_SYNCHED;\r\n        createjs.Ticker.on('tick', this.tick, this);\r\n    }\r\n    tick(e) {\r\n        if (e.paused !== 1) {\r\n            this.stage.update();\r\n        }\r\n        else {\r\n            console.log('pause!');\r\n        }\r\n    }\r\n    createLoader() {\r\n        this.loader = new AssetLoader(false, \"\", \"Anonymous\");\r\n        createjs.Sound.alternateExtensions = [\"mp3\"];\r\n        this.loader.installPlugin(createjs.Sound);\r\n        this.loader.loadManifest(this.manifest);\r\n        // this.loader.on(\"progress\", this.loadProgress, this);\r\n        this.loader.on(\"complete\", this.resLoaded, this);\r\n    }\r\n    initStats() {\r\n        this.stats = new stats_min();\r\n        this.stats.showPanel(0); // 0: fps, 1: ms, 2: mb, 3+: custom\r\n        document.body.appendChild(this.stats.dom);\r\n    }\r\n    loadProgress(e) {\r\n        let p = e.progress * 100;\r\n        this.loadingView.setProgress(p);\r\n        if (p >= 100) {\r\n            this.loader.off(\"progress\", this.loadProgress);\r\n            this.loadingView.dispose();\r\n            this.loadingView = null;\r\n            this.contentlayer.dispose();\r\n            GRoot.inst.removeChild(this.contentlayer);\r\n        }\r\n    }\r\n    resLoaded() {\r\n        this.loader.destroy();\r\n        UIPackage.addPackage(\"uitest\");\r\n        let ins = UIPackage.createObject(\"uitest\", \"main\");\r\n        // console.log(fgui.UIPackage.addPackage(\"uitest\"));\r\n        ins.setSize(GRoot.inst.width, GRoot.inst.height);\r\n        ins.addRelation(GRoot.inst, 24 /* Size */);\r\n        GRoot.inst.addChild(ins);\r\n        this.animate();\r\n    }\r\n    animate() {\r\n        this.stats.begin();\r\n        this.stats.end();\r\n        requestAnimationFrame(this.animate.bind(this));\r\n    }\r\n}\r\nlet main_canvas = document.querySelector('#mainView');\r\nlet manifest = [\r\n    { id: \"uitest\", src: 'public/ui/uitest.fui', type: \"binary\" },\r\n    { id: 'uitest@atlas0', src: 'public/ui/uitest@atlas0.jpg', type: \"image\" },\r\n    // { id: 'test@atlas0_1', src: 'ui/test@atlas0_1.png', type: \"image\" }\r\n];\r\nnew Main(main_canvas, manifest);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5\n")}},__webpack_module_cache__={};function __webpack_require__(g){var I=__webpack_module_cache__[g];if(void 0!==I)return I.exports;var C=__webpack_module_cache__[g]={exports:{}};return __webpack_modules__[g].call(C.exports,C,C.exports,__webpack_require__),C.exports}__webpack_require__.r=g=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(g,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(g,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__(5);main=__webpack_exports__})();